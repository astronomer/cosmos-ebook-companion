{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.10.9", "generated_at": "2025-08-22T10:11:02.523523Z", "invocation_id": "97aea7bd-e064-4f56-b166-d68be01464da", "invocation_started_at": "2025-08-22T10:11:02.288624Z", "env": {}, "project_name": "customer_360", "project_id": "02caed6330a9e52f267923d40c977f82", "user_id": "a083db21-884d-404c-a431-6eff7338f921", "send_anonymous_usage_stats": true, "adapter_type": "postgres", "quoting": {"database": true, "schema": true, "identifier": true, "column": null}}, "nodes": {"model.customer_360.stg_customers": {"database": "cosmos", "schema": "cosmos", "name": "stg_customers", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_customers.sql", "original_file_path": "models/staging/stg_customers.sql", "unique_id": "model.customer_360.stg_customers", "fqn": ["customer_360", "staging", "stg_customers"], "alias": "stg_customers", "checksum": {"name": "sha256", "checksum": "f4fa7579d5f3a646a1f81cb90ce4970a7674fcfffd90b76830e2157288bfe001"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "customers"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "customers"], "description": "Staging model for customer master data with demographic and risk enrichment", "columns": {"customer_id": {"name": "customer_id", "description": "Primary key for customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_number": {"name": "customer_number", "description": "Formatted customer number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_name": {"name": "first_name", "description": "Customer first name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_name": {"name": "last_name", "description": "Customer last name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "email_address": {"name": "email_address", "description": "Primary email address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "credit_score": {"name": "credit_score", "description": "Customer credit score", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "customers"]}, "created_at": 1755857463.3808289, "relation_name": "\"cosmos\".\"cosmos\".\"stg_customers\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['bronze', 'staging', 'customers']\n) }}\n\n/*\n    Staging model for customer master data\n    \n    This model creates a clean, standardized view of customer information\n    from multiple source systems, applying basic data quality rules and\n    enriching with reference data lookups.\n*/\n\nwith mock_customers as (\n    -- Generate realistic customer data for demo\n    select\n        -- Customer identifiers\n        series_value as customer_id,\n        'CUST' || lpad(series_value::text, 6, '0') as customer_number,\n        \n        -- Personal information\n        case \n            when series_value % 4 = 1 then 'John'\n            when series_value % 4 = 2 then 'Jane'\n            when series_value % 4 = 3 then 'Michael'\n            else 'Sarah'\n        end as first_name,\n        \n        case \n            when series_value % 5 = 1 then 'Smith'\n            when series_value % 5 = 2 then 'Johnson'\n            when series_value % 5 = 3 then 'Williams'\n            when series_value % 5 = 4 then 'Brown'\n            else 'Davis'\n        end as last_name,\n        \n        -- Demographics\n        '1980-01-01'::date + (series_value * interval '45 days') as date_of_birth,\n        case when series_value % 2 = 1 then 'M' else 'F' end as gender,\n        \n        -- Contact information\n        'customer' || series_value || '@email.com' as email_address,\n        case \n            when series_value % 10 = 1 then '555-01' || lpad((series_value % 100)::text, 2, '0') || '-' || lpad((series_value % 10000)::text, 4, '0')\n            else '555-02' || lpad((series_value % 100)::text, 2, '0') || '-' || lpad((series_value % 10000)::text, 4, '0')\n        end as phone_number,\n        \n        -- Financial information\n        case \n            when series_value % 10 = 1 then 150000 + (series_value % 300000)\n            when series_value % 10 = 2 then 75000 + (series_value % 75000)\n            else 45000 + (series_value % 100000)\n        end as annual_income,\n        \n        -- Credit information\n        case \n            when series_value % 20 = 1 then 300 + (series_value % 200)  -- Poor credit\n            when series_value % 10 = 1 then 720 + (series_value % 130)  -- Excellent credit\n            else 580 + (series_value % 140)  -- Fair to good credit\n        end as credit_score,\n        \n        -- Account status\n        case \n            when series_value % 50 = 1 then 'CLOSED'\n            when series_value % 25 = 1 then 'SUSPENDED'\n            else 'ACTIVE'\n        end as customer_status,\n        \n        -- Dates\n        '2020-01-01'::date + (series_value * interval '2 days') as customer_since_date,\n        current_timestamp as last_updated,\n        current_timestamp as dbt_created_at\n        \n    from generate_series(1, {{ var('num_customers') }}) as series_value\n),\n\nbase_customers as (\n    select\n        -- Customer identifiers\n        customer_id,\n        customer_number,\n        \n        -- Personal information\n        initcap(first_name) as first_name,\n        initcap(last_name) as last_name,\n        concat(initcap(first_name), ' ', initcap(last_name)) as full_name,\n        \n        -- Demographics\n        date_of_birth,\n        date_part('year', age(current_date, date_of_birth))::int as age,\n        case \n            when date_part('year', age(current_date, date_of_birth)) < 25 then 'AC010'  -- Young Adult\n            when date_part('year', age(current_date, date_of_birth)) < 35 then 'AC006'  -- Young Professional  \n            when date_part('year', age(current_date, date_of_birth)) < 50 then 'AC007'  -- Mid-Career\n            when date_part('year', age(current_date, date_of_birth)) < 65 then 'AC008'  -- Pre-Retirement\n            else 'AC009'  -- Retired\n        end as age_cohort_id,\n        \n        upper(gender) as gender,\n        \n        -- Contact information\n        lower(email_address) as email_address,\n        phone_number,\n        \n        -- Financial classification\n        annual_income,\n        case \n            when annual_income <= 25000 then 'IB001'      -- Low Income\n            when annual_income <= 50000 then 'IB002'      -- Lower Middle\n            when annual_income <= 75000 then 'IB003'      -- Middle Income\n            when annual_income <= 100000 then 'IB004'     -- Upper Middle\n            when annual_income <= 150000 then 'IB005'     -- High Income\n            when annual_income <= 250000 then 'IB006'     -- Affluent\n            else 'IB007'                                   -- High Net Worth\n        end as income_bracket_id,\n        \n        -- Credit assessment\n        credit_score,\n        case \n            when credit_score >= 800 then 'CSR001'        -- Exceptional\n            when credit_score >= 740 then 'CSR002'        -- Very Good\n            when credit_score >= 670 then 'CSR003'        -- Good\n            when credit_score >= 580 then 'CSR004'        -- Fair\n            when credit_score >= 500 then 'CSR005'        -- Poor\n            else 'CSR006'                                  -- Very Poor\n        end as credit_score_range_id,\n        \n        -- Risk classification\n        case \n            when credit_score >= 740 and annual_income >= 75000 then 'RC002'  -- Low Risk\n            when credit_score >= 670 and annual_income >= 50000 then 'RC003'  -- Moderate Risk\n            when credit_score >= 580 then 'RC004'                             -- Elevated Risk\n            when credit_score >= 500 then 'RC005'                             -- High Risk\n            else 'RC006'                                                       -- Severe Risk\n        end as risk_category_id,\n        \n        -- Account information\n        upper(customer_status) as customer_status,\n        customer_since_date,\n        date_part('year', age(current_date, customer_since_date))::int as relationship_years,\n        case \n            when date_part('month', age(current_date, customer_since_date)) <= 2 then 'LS003'  -- New Customer\n            when date_part('year', age(current_date, customer_since_date)) < 1 then 'LS004'    -- Growing\n            when date_part('year', age(current_date, customer_since_date)) < 3 then 'LS005'    -- Established\n            when date_part('year', age(current_date, customer_since_date)) < 5 then 'LS006'    -- Mature\n            else 'LS007'                                                                        -- Loyal\n        end as lifecycle_stage_id,\n        \n        -- Metadata\n        last_updated,\n        dbt_created_at\n        \n    from mock_customers\n    where customer_status != 'INVALID'  -- Basic data quality filter\n),\n\nenriched_customers as (\n    select\n        bc.*,\n        \n        -- Enrichment from reference data\n        ac.cohort_name as age_cohort_name,\n        ac.characteristics as age_cohort_characteristics,\n        \n        ib.bracket_name as income_bracket_name,\n        ib.marketing_priority as income_marketing_priority,\n        \n        csr.range_name as credit_score_range_name,\n        csr.grade as credit_grade,\n        csr.default_rate as expected_default_rate,\n        \n        rc.risk_level as risk_level,\n        rc.risk_name as risk_name,\n        rc.monitoring_frequency as risk_monitoring_frequency,\n        \n        ls.stage_name as lifecycle_stage_name,\n        ls.characteristics as lifecycle_characteristics,\n        \n        -- Customer value indicators\n        case \n            when bc.annual_income >= 250000 and bc.credit_score >= 740 then 'High Value'\n            when bc.annual_income >= 100000 and bc.credit_score >= 670 then 'Medium Value'\n            else 'Standard Value'\n        end as customer_value_segment,\n        \n        -- Marketing eligibility flags\n        case when bc.age >= 18 and bc.customer_status = 'ACTIVE' then true else false end as marketing_eligible,\n        case when bc.credit_score >= 580 then true else false end as lending_eligible,\n        case when bc.annual_income >= 50000 then true else false end as premium_product_eligible\n        \n    from base_customers bc\n    left join {{ ref('age_cohorts') }} ac on bc.age_cohort_id = ac.cohort_id\n    left join {{ ref('income_brackets') }} ib on bc.income_bracket_id = ib.bracket_id\n    left join {{ ref('credit_score_ranges') }} csr on bc.credit_score_range_id = csr.score_range_id\n    left join {{ ref('risk_categories') }} rc on bc.risk_category_id = rc.risk_category_id\n    left join {{ ref('lifecycle_stages') }} ls on bc.lifecycle_stage_id = ls.stage_id\n)\n\nselect * from enriched_customers", "doc_blocks": [], "language": "sql", "refs": [{"name": "age_cohorts", "package": null, "version": null}, {"name": "income_brackets", "package": null, "version": null}, {"name": "credit_score_ranges", "package": null, "version": null}, {"name": "risk_categories", "package": null, "version": null}, {"name": "lifecycle_stages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.customer_360.age_cohorts", "seed.customer_360.income_brackets", "seed.customer_360.credit_score_ranges", "seed.customer_360.risk_categories", "seed.customer_360.lifecycle_stages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_id", "customer_number"], "time_spine": null}, "model.customer_360.stg_transactions": {"database": "cosmos", "schema": "cosmos", "name": "stg_transactions", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_transactions.sql", "original_file_path": "models/staging/stg_transactions.sql", "unique_id": "model.customer_360.stg_transactions", "fqn": ["customer_360", "staging", "stg_transactions"], "alias": "stg_transactions", "checksum": {"name": "sha256", "checksum": "945b3c8792d27d5fdc307eaeda66fbf74d016cebe9d43f3994152671245bd0fe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "transactions", "financial"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "transactions", "financial"], "description": "Staging model for all customer transactions", "columns": {"transaction_id": {"name": "transaction_id", "description": "Primary key for transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_id": {"name": "account_id", "description": "Foreign key to accounts", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "transactions", "financial"]}, "created_at": 1755857463.3827178, "relation_name": "\"cosmos\".\"cosmos\".\"stg_transactions\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['bronze', 'staging', 'transactions', 'financial']\n) }}\n\n/*\n    Staging model for transaction history\n    \n    Captures all customer transactions across channels with\n    enrichment for risk scoring and analytical purposes.\n*/\n\nwith mock_transactions as (\n    select\n        series_value as transaction_id,\n        'TXN' || lpad(series_value::text, 10, '0') as transaction_number,\n        \n        -- Link to accounts (transactions distributed across accounts)\n        ((series_value - 1) % ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }})::int) + 1 as account_id,\n        \n        -- Transaction types\n        case \n            when series_value % 10 = 1 then 'DEPOSIT'\n            when series_value % 10 = 2 then 'WITHDRAWAL'\n            when series_value % 10 = 3 then 'TRANSFER_IN'\n            when series_value % 10 = 4 then 'TRANSFER_OUT'\n            when series_value % 10 = 5 then 'PAYMENT'\n            when series_value % 10 = 6 then 'PURCHASE'\n            when series_value % 10 = 7 then 'FEE'\n            when series_value % 10 = 8 then 'INTEREST'\n            when series_value % 10 = 9 then 'DIVIDEND'\n            else 'REFUND'\n        end as transaction_type,\n        \n        -- Transaction amounts (realistic distribution)\n        case \n            when series_value % 20 = 1 then (10000 + (series_value % 90000))::numeric(12,2)  -- Large amounts\n            when series_value % 10 = 1 then (1000 + (series_value % 4000))::numeric(12,2)   -- Medium amounts\n            when series_value % 5 = 1 then (100 + (series_value % 900))::numeric(12,2)      -- Small amounts\n            else (10 + (series_value % 190))::numeric(12,2)                                  -- Micro amounts\n        end as transaction_amount,\n        \n        -- Transaction status\n        case \n            when series_value % 100 = 1 then 'FAILED'\n            when series_value % 50 = 1 then 'PENDING'\n            when series_value % 25 = 1 then 'CANCELLED'\n            else 'COMPLETED'\n        end as transaction_status,\n        \n        -- Channels\n        case \n            when series_value % 6 = 1 then 'ATM'\n            when series_value % 6 = 2 then 'ONLINE'\n            when series_value % 6 = 3 then 'MOBILE'\n            when series_value % 6 = 4 then 'BRANCH'\n            when series_value % 6 = 5 then 'PHONE'\n            else 'CARD'\n        end as channel,\n        \n        -- Dates (distributed over last 2 years)\n        '2023-01-01'::date + (series_value % 730) * interval '1 day' + \n        (series_value % 1440) * interval '1 minute' as transaction_datetime,\n        \n        -- Geographic data\n        case \n            when series_value % 10 = 1 then 'New York, NY'\n            when series_value % 10 = 2 then 'Los Angeles, CA'\n            when series_value % 10 = 3 then 'Chicago, IL'\n            when series_value % 10 = 4 then 'Houston, TX'\n            when series_value % 10 = 5 then 'Phoenix, AZ'\n            else 'Online'\n        end as transaction_location,\n        \n        -- Merchant data for purchases\n        case \n            when series_value % 10 = 6 then \n                case \n                    when series_value % 5 = 1 then 'Amazon.com'\n                    when series_value % 5 = 2 then 'Walmart'\n                    when series_value % 5 = 3 then 'Target'\n                    when series_value % 5 = 4 then 'Starbucks'\n                    else 'Gas Station'\n                end\n            else null\n        end as merchant_name,\n        \n        -- Risk flags\n        case when series_value % 100 = 1 then true else false end as is_high_risk,\n        case when series_value % 50 = 1 then true else false end as requires_approval,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }} * 50)::int) as series_value\n),\n\nbase_transactions as (\n    select\n        transaction_id,\n        transaction_number,\n        account_id,\n        \n        -- Transaction details\n        upper(transaction_type) as transaction_type,\n        transaction_amount,\n        upper(transaction_status) as transaction_status,\n        upper(channel) as channel,\n        \n        -- Timing\n        transaction_datetime,\n        transaction_datetime::date as transaction_date,\n        extract(hour from transaction_datetime) as transaction_hour,\n        extract(dow from transaction_datetime) as day_of_week,\n        \n        -- Location and merchant\n        transaction_location,\n        merchant_name,\n        \n        -- Risk indicators\n        is_high_risk,\n        requires_approval,\n        \n        -- Amount analysis\n        case \n            when transaction_amount >= 10000 then 'LARGE'\n            when transaction_amount >= 1000 then 'MEDIUM'\n            when transaction_amount >= 100 then 'SMALL'\n            else 'MICRO'\n        end as amount_category,\n        \n        last_updated,\n        current_timestamp as dbt_created_at\n        \n    from mock_transactions\n    where transaction_status != 'INVALID'\n),\n\ncategorized_transactions as (\n    select\n        bt.*,\n        \n        -- Channel analysis\n        case \n            when bt.channel in ('ONLINE', 'MOBILE') then 'DIGITAL'\n            when bt.channel in ('ATM', 'CARD') then 'SELF_SERVICE'\n            when bt.channel in ('BRANCH', 'PHONE') then 'ASSISTED'\n            else 'OTHER'\n        end as channel_category,\n        \n        -- Time-based patterns\n        case \n            when bt.transaction_hour between 9 and 17 then 'BUSINESS_HOURS'\n            when bt.transaction_hour between 18 and 22 then 'EVENING'\n            when bt.transaction_hour between 6 and 8 then 'MORNING'\n            else 'OFF_HOURS'\n        end as time_category,\n        \n        case \n            when bt.day_of_week in (1, 7) then 'WEEKEND'\n            else 'WEEKDAY'\n        end as day_category,\n        \n        -- Transaction flow\n        case \n            when bt.transaction_type in ('DEPOSIT', 'TRANSFER_IN', 'INTEREST', 'DIVIDEND', 'REFUND') then 'INFLOW'\n            when bt.transaction_type in ('WITHDRAWAL', 'TRANSFER_OUT', 'PAYMENT', 'PURCHASE', 'FEE') then 'OUTFLOW'\n            else 'NEUTRAL'\n        end as flow_direction,\n        \n        -- Digital adoption indicator\n        case \n            when bt.channel in ('ONLINE', 'MOBILE') then true \n            else false \n        end as is_digital_transaction\n        \n    from base_transactions bt\n),\n\nenriched_transactions as (\n    select\n        ct.*,\n        \n        -- Risk scoring (now can reference time_category from previous CTE)\n        case \n            when ct.is_high_risk then 90\n            when ct.amount_category = 'LARGE' and ct.time_category = 'OFF_HOURS' then 75\n            when ct.amount_category = 'LARGE' then 60\n            when ct.time_category = 'OFF_HOURS' then 45\n            else 20\n        end as risk_score\n        \n    from categorized_transactions ct\n)\n\nselect * from enriched_transactions", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["transaction_id"], "time_spine": null}, "model.customer_360.stg_retention_events": {"database": "cosmos", "schema": "cosmos", "name": "stg_retention_events", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_retention_events.sql", "original_file_path": "models/staging/stg_retention_events.sql", "unique_id": "model.customer_360.stg_retention_events", "fqn": ["customer_360", "staging", "stg_retention_events"], "alias": "stg_retention_events", "checksum": {"name": "sha256", "checksum": "b50ffe058bfeab69e5a9762453243ab0cc1e5ce18e207d68c773cc61da17c056"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "retention"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "retention"], "description": "Staging model for customer retention events", "columns": {"event_id": {"name": "event_id", "description": "Primary key for event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "retention"]}, "created_at": 1755857463.38886, "relation_name": "\"cosmos\".\"cosmos\".\"stg_retention_events\"", "raw_code": "{{ config(materialized='view', tags=['bronze', 'staging', 'retention']) }}\n\nwith mock_retention as (\n    select\n        series_value as event_id,\n        ((series_value - 1) % {{ var('num_customers') }}) + 1 as customer_id,\n        \n        case \n            when series_value % 6 = 1 then 'CHURN_RISK_IDENTIFIED'\n            when series_value % 6 = 2 then 'RETENTION_OFFER_SENT'\n            when series_value % 6 = 3 then 'CUSTOMER_SAVED'\n            when series_value % 6 = 4 then 'ACCOUNT_CLOSED'\n            when series_value % 6 = 5 then 'WIN_BACK_CAMPAIGN'\n            else 'LOYALTY_PROGRAM_ENROLLED'\n        end as event_type,\n        \n        '2024-01-01'::date + (series_value % 365) * interval '1 day' as event_date,\n        \n        case \n            when series_value % 4 = 1 then 'SUCCESSFUL'\n            when series_value % 4 = 2 then 'FAILED'\n            else 'PENDING'\n        end as event_outcome,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * 2)::int) as series_value\n)\n\nselect *, current_timestamp as dbt_created_at from mock_retention", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["event_id"], "time_spine": null}, "model.customer_360.stg_withdrawals": {"database": "cosmos", "schema": "cosmos", "name": "stg_withdrawals", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_withdrawals.sql", "original_file_path": "models/staging/stg_withdrawals.sql", "unique_id": "model.customer_360.stg_withdrawals", "fqn": ["customer_360", "staging", "stg_withdrawals"], "alias": "stg_withdrawals", "checksum": {"name": "sha256", "checksum": "c2ce26eb20eb9f568e6b3d0361c9406bab19ddd54daddf66622d718759caef3b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "transactions", "withdrawals"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "transactions", "withdrawals"], "description": "Staging model for withdrawal transactions", "columns": {"withdrawal_id": {"name": "withdrawal_id", "description": "Primary key for withdrawal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "transactions", "withdrawals"]}, "created_at": 1755857463.3833852, "relation_name": "\"cosmos\".\"cosmos\".\"stg_withdrawals\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['bronze', 'staging', 'transactions', 'withdrawals']\n) }}\n\nwith mock_withdrawals as (\n    select\n        series_value as withdrawal_id,\n        'WDL' || lpad(series_value::text, 10, '0') as withdrawal_number,\n        ((series_value - 1) % ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }})::int) + 1 as account_id,\n        \n        case \n            when series_value % 5 = 1 then 'ATM'\n            when series_value % 5 = 2 then 'TELLER'\n            when series_value % 5 = 3 then 'ONLINE'\n            when series_value % 5 = 4 then 'WIRE_TRANSFER'\n            else 'CHECK'\n        end as withdrawal_type,\n        \n        case \n            when series_value % 5 = 1 then (20 + (series_value % 580))::numeric(10,2)\n            when series_value % 5 = 2 then (50 + (series_value % 1950))::numeric(10,2)\n            when series_value % 5 = 3 then (100 + (series_value % 4900))::numeric(10,2)\n            when series_value % 5 = 4 then (1000 + (series_value % 49000))::numeric(10,2)\n            else (25 + (series_value % 2975))::numeric(10,2)\n        end as withdrawal_amount,\n        \n        '2024-01-01'::date + (series_value % 365) * interval '1 day' as withdrawal_datetime,\n        \n        case \n            when series_value % 100 = 1 then 'FAILED'\n            when series_value % 50 = 1 then 'PENDING'\n            else 'COMPLETED'\n        end as withdrawal_status,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }} * 15)::int) as series_value\n),\n\nenriched_withdrawals as (\n    select\n        mw.*,\n        extract(hour from mw.withdrawal_datetime) as withdrawal_hour,\n        \n        case \n            when mw.withdrawal_amount >= 5000 then 'LARGE'\n            when mw.withdrawal_amount >= 500 then 'MEDIUM'\n            else 'SMALL'\n        end as amount_category,\n        \n        current_timestamp as dbt_created_at\n        \n    from mock_withdrawals mw\n)\n\nselect * from enriched_withdrawals", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["withdrawal_id"], "time_spine": null}, "model.customer_360.stg_fees": {"database": "cosmos", "schema": "cosmos", "name": "stg_fees", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_fees.sql", "original_file_path": "models/staging/stg_fees.sql", "unique_id": "model.customer_360.stg_fees", "fqn": ["customer_360", "staging", "stg_fees"], "alias": "stg_fees", "checksum": {"name": "sha256", "checksum": "7a34efeeea54c52a0379094541ab46a979a4b031b45bd8b0bc042695707326bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "fees", "revenue"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "fees", "revenue"], "description": "Staging model for bank fees", "columns": {"fee_id": {"name": "fee_id", "description": "Primary key for fee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "fees", "revenue"]}, "created_at": 1755857463.384264, "relation_name": "\"cosmos\".\"cosmos\".\"stg_fees\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['bronze', 'staging', 'fees', 'revenue']\n) }}\n\nwith mock_fees as (\n    select\n        series_value as fee_id,\n        'FEE' || lpad(series_value::text, 8, '0') as fee_number,\n        ((series_value - 1) % ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }})::int) + 1 as account_id,\n        \n        case \n            when series_value % 6 = 1 then 'MONTHLY_MAINTENANCE'\n            when series_value % 6 = 2 then 'OVERDRAFT'\n            when series_value % 6 = 3 then 'ATM_FEE'\n            when series_value % 6 = 4 then 'WIRE_TRANSFER'\n            when series_value % 6 = 5 then 'FOREIGN_TRANSACTION'\n            else 'LATE_PAYMENT'\n        end as fee_type,\n        \n        case \n            when series_value % 6 = 1 then 15.00\n            when series_value % 6 = 2 then 35.00\n            when series_value % 6 = 3 then 3.50\n            when series_value % 6 = 4 then 25.00\n            when series_value % 6 = 5 then (series_value % 50) + 5.00\n            else 25.00\n        end as fee_amount,\n        \n        '2024-01-01'::date + (series_value % 365) * interval '1 day' as fee_date,\n        \n        case \n            when series_value % 20 = 1 then 'WAIVED'\n            when series_value % 50 = 1 then 'REFUNDED'\n            else 'CHARGED'\n        end as fee_status,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }} * 8)::int) as series_value\n),\n\nenriched_fees as (\n    select\n        mf.*,\n        \n        case \n            when mf.fee_amount >= 25.00 then 'HIGH_FEE'\n            when mf.fee_amount >= 10.00 then 'MEDIUM_FEE'\n            else 'LOW_FEE'\n        end as fee_category,\n        \n        case \n            when mf.fee_type in ('OVERDRAFT', 'LATE_PAYMENT') then 'PENALTY'\n            when mf.fee_type = 'MONTHLY_MAINTENANCE' then 'SERVICE'\n            else 'TRANSACTION'\n        end as fee_classification,\n        \n        current_timestamp as dbt_created_at\n        \n    from mock_fees mf\n)\n\nselect * from enriched_fees", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["fee_id"], "time_spine": null}, "model.customer_360.stg_deposits": {"database": "cosmos", "schema": "cosmos", "name": "stg_deposits", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_deposits.sql", "original_file_path": "models/staging/stg_deposits.sql", "unique_id": "model.customer_360.stg_deposits", "fqn": ["customer_360", "staging", "stg_deposits"], "alias": "stg_deposits", "checksum": {"name": "sha256", "checksum": "f180ad8d7fef77456015d3a247975dfbf463b57ec0759f0b4f1fa72a8bc119c7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "transactions", "deposits"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "transactions", "deposits"], "description": "Staging model for deposit transactions", "columns": {"deposit_id": {"name": "deposit_id", "description": "Primary key for deposit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "transactions", "deposits"]}, "created_at": 1755857463.3830552, "relation_name": "\"cosmos\".\"cosmos\".\"stg_deposits\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['bronze', 'staging', 'transactions', 'deposits']\n) }}\n\nwith mock_deposits as (\n    select\n        series_value as deposit_id,\n        'DEP' || lpad(series_value::text, 10, '0') as deposit_number,\n        ((series_value - 1) % ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }})::int) + 1 as account_id,\n        \n        case \n            when series_value % 6 = 1 then 'PAYROLL'\n            when series_value % 6 = 2 then 'CASH'\n            when series_value % 6 = 3 then 'CHECK'\n            when series_value % 6 = 4 then 'WIRE_TRANSFER'\n            when series_value % 6 = 5 then 'ACH'\n            else 'MOBILE_DEPOSIT'\n        end as deposit_type,\n        \n        case \n            when series_value % 6 = 1 then (2000 + (series_value % 6000))::numeric(10,2)    -- Payroll\n            when series_value % 6 = 2 then (50 + (series_value % 950))::numeric(10,2)       -- Cash\n            when series_value % 6 = 3 then (100 + (series_value % 2900))::numeric(10,2)     -- Check\n            when series_value % 6 = 4 then (5000 + (series_value % 95000))::numeric(10,2)   -- Wire\n            when series_value % 6 = 5 then (500 + (series_value % 4500))::numeric(10,2)     -- ACH\n            else (25 + (series_value % 975))::numeric(10,2)                                  -- Mobile\n        end as deposit_amount,\n        \n        '2024-01-01'::date + (series_value % 365) * interval '1 day' + \n        (series_value % 1440) * interval '1 minute' as deposit_datetime,\n        \n        case \n            when series_value % 50 = 1 then 'PENDING'\n            when series_value % 100 = 1 then 'HELD'\n            else 'CLEARED'\n        end as deposit_status,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }} * 20)::int) as series_value\n),\n\nenriched_deposits as (\n    select\n        md.*,\n        extract(hour from md.deposit_datetime) as deposit_hour,\n        extract(dow from md.deposit_datetime) as day_of_week,\n        \n        case \n            when md.deposit_amount >= 10000 then 'LARGE'\n            when md.deposit_amount >= 1000 then 'MEDIUM'\n            else 'SMALL'\n        end as amount_category,\n        \n        case \n            when md.deposit_type in ('MOBILE_DEPOSIT', 'ACH') then 'DIGITAL'\n            else 'TRADITIONAL'\n        end as channel_type,\n        \n        current_timestamp as dbt_created_at\n        \n    from mock_deposits md\n)\n\nselect * from enriched_deposits", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["deposit_id"], "time_spine": null}, "model.customer_360.stg_customer_phones": {"database": "cosmos", "schema": "cosmos", "name": "stg_customer_phones", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_customer_phones.sql", "original_file_path": "models/staging/stg_customer_phones.sql", "unique_id": "model.customer_360.stg_customer_phones", "fqn": ["customer_360", "staging", "stg_customer_phones"], "alias": "stg_customer_phones", "checksum": {"name": "sha256", "checksum": "b8e37bb2dd418b33ea528c107b375642c304f010bdfd09ce89db2caa7660dab7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "customers", "contact"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "customers", "contact"], "description": "Staging model for customer phone information", "columns": {"phone_id": {"name": "phone_id", "description": "Primary key for phone", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_id": {"name": "customer_id", "description": "Foreign key to customers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "customers", "contact"]}, "created_at": 1755857463.3817751, "relation_name": "\"cosmos\".\"cosmos\".\"stg_customer_phones\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['bronze', 'staging', 'customers', 'contact']\n) }}\n\n/*\n    Staging model for customer phone information\n    \n    Handles phone number standardization, validation, and\n    communication preference management.\n*/\n\nwith mock_phones as (\n    select\n        series_value as phone_id,\n        case \n            when series_value <= {{ var('num_customers') }} then series_value  -- Primary phones\n            else (series_value % {{ var('num_customers') }}) + 1  -- Additional phones for some customers\n        end as customer_id,\n        \n        -- Phone type\n        case \n            when series_value <= {{ var('num_customers') }} then 'MOBILE'\n            when series_value % 4 = 1 then 'HOME'\n            when series_value % 4 = 2 then 'WORK'\n            else 'FAX'\n        end as phone_type,\n        \n        -- Phone number components\n        case \n            when series_value % 8 = 1 then '555'\n            when series_value % 8 = 2 then '444'\n            when series_value % 8 = 3 then '333'\n            else '555'\n        end as area_code,\n        \n        lpad(((series_value * 123) % 900 + 100)::text, 3, '0') as exchange,\n        lpad(((series_value * 456) % 10000)::text, 4, '0') as line_number,\n        \n        -- Communication preferences\n        case when series_value % 3 != 1 then true else false end as is_verified,\n        case when series_value % 5 != 1 then true else false end as sms_enabled,\n        case when series_value % 7 != 1 then true else false end as marketing_opt_in,\n        case when series_value % 10 = 1 then true else false end as do_not_call,\n        \n        -- Phone status\n        case \n            when series_value % 25 = 1 then 'INACTIVE'\n            when series_value % 15 = 1 then 'UNVERIFIED'\n            else 'ACTIVE'\n        end as phone_status,\n        \n        -- Primary phone indicator\n        case \n            when series_value <= {{ var('num_customers') }} then true  -- Primary phones are preferred\n            else series_value % 4 = 1\n        end as is_primary,\n        \n        -- Contact windows\n        case \n            when series_value % 3 = 1 then '08:00:00'::time\n            when series_value % 3 = 2 then '09:00:00'::time\n            else '10:00:00'::time\n        end as preferred_contact_start,\n        \n        case \n            when series_value % 3 = 1 then '20:00:00'::time\n            when series_value % 3 = 2 then '18:00:00'::time\n            else '19:00:00'::time\n        end as preferred_contact_end,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * {{ var('num_phones_multiplier') }})::int) as series_value\n),\n\nbase_phones as (\n    select\n        phone_id,\n        customer_id,\n        upper(phone_type) as phone_type,\n        \n        -- Standardized phone number\n        area_code,\n        exchange,\n        line_number,\n        concat(area_code, '-', exchange, '-', line_number) as formatted_phone,\n        concat(area_code, exchange, line_number) as phone_digits_only,\n        \n        -- Phone validation\n        case \n            when area_code in ('000', '111', '999') then false\n            when exchange in ('000', '111', '999') then false\n            when line_number in ('0000', '1111', '9999') then false\n            else true\n        end as is_valid_format,\n        \n        -- Communication settings\n        is_verified,\n        sms_enabled,\n        marketing_opt_in,\n        do_not_call,\n        upper(phone_status) as phone_status,\n        is_primary,\n        \n        -- Contact timing\n        preferred_contact_start,\n        preferred_contact_end,\n        extract(hour from preferred_contact_end - preferred_contact_start) as contact_window_hours,\n        \n        -- Communication eligibility (moved here from enriched_phones)\n        case \n            when is_verified and upper(phone_status) = 'ACTIVE' and not do_not_call then true \n            else false \n        end as call_eligible,\n        \n        case \n            when sms_enabled and upper(phone_type) = 'MOBILE' and upper(phone_status) = 'ACTIVE' then true \n            else false \n        end as sms_eligible,\n        \n        last_updated,\n        current_timestamp as dbt_created_at\n        \n    from mock_phones\n    where phone_status != 'INVALID'\n),\n\nenriched_phones as (\n    select\n        bp.*,\n        \n        -- Phone type classifications\n        case \n            when bp.phone_type = 'MOBILE' then true \n            else false \n        end as is_mobile,\n        \n        case \n            when bp.phone_type in ('HOME', 'WORK') then true \n            else false \n        end as is_landline,\n        \n        -- Marketing eligibility (now can reference bp.call_eligible and bp.sms_eligible)\n        case \n            when bp.marketing_opt_in and bp.call_eligible then true \n            else false \n        end as marketing_call_eligible,\n        \n        case \n            when bp.marketing_opt_in and bp.sms_eligible then true \n            else false \n        end as marketing_sms_eligible,\n        \n        -- Quality scoring\n        case \n            when bp.is_verified and bp.is_valid_format and bp.phone_status = 'ACTIVE' then 95\n            when bp.is_valid_format and bp.phone_status = 'ACTIVE' then 80\n            when bp.is_valid_format then 60\n            else 30\n        end as phone_quality_score,\n        \n        -- Contact channel preferences\n        case \n            when bp.phone_type = 'MOBILE' and bp.sms_enabled then 'SMS_PREFERRED'\n            when bp.phone_type = 'MOBILE' then 'MOBILE_CALL'\n            when bp.phone_type = 'HOME' then 'HOME_CALL'\n            when bp.phone_type = 'WORK' then 'WORK_CALL'\n            else 'NO_CONTACT'\n        end as preferred_contact_method,\n        \n        -- Risk indicators\n        case \n            when bp.area_code in ('555', '800', '888', '877', '866') then true \n            else false \n        end as is_special_number,\n        \n        case \n            when not bp.is_verified and bp.phone_status = 'ACTIVE' then true \n            else false \n        end as verification_required\n        \n    from base_phones bp\n)\n\nselect * from enriched_phones", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["phone_id"], "time_spine": null}, "model.customer_360.stg_digital_activity": {"database": "cosmos", "schema": "cosmos", "name": "stg_digital_activity", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_digital_activity.sql", "original_file_path": "models/staging/stg_digital_activity.sql", "unique_id": "model.customer_360.stg_digital_activity", "fqn": ["customer_360", "staging", "stg_digital_activity"], "alias": "stg_digital_activity", "checksum": {"name": "sha256", "checksum": "1a4636f6efc21510459e4386bffb02e9aa1192a0ca4423217290420abfb50144"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "digital"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "digital"], "description": "Staging model for digital banking activity", "columns": {"activity_id": {"name": "activity_id", "description": "Primary key for activity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "digital"]}, "created_at": 1755857463.387784, "relation_name": "\"cosmos\".\"cosmos\".\"stg_digital_activity\"", "raw_code": "{{ config(materialized='view', tags=['bronze', 'staging', 'digital']) }}\n\nwith mock_digital as (\n    select\n        series_value as activity_id,\n        ((series_value - 1) % {{ var('num_customers') }}) + 1 as customer_id,\n        \n        case \n            when series_value % 6 = 1 then 'LOGIN'\n            when series_value % 6 = 2 then 'BALANCE_CHECK'\n            when series_value % 6 = 3 then 'TRANSFER'\n            when series_value % 6 = 4 then 'BILL_PAY'\n            when series_value % 6 = 5 then 'MOBILE_DEPOSIT'\n            else 'ACCOUNT_SETTINGS'\n        end as activity_type,\n        \n        case \n            when series_value % 2 = 1 then 'MOBILE_APP'\n            else 'WEB_PORTAL'\n        end as platform,\n        \n        '2024-01-01'::timestamp + (series_value % 365) * interval '1 day' + \n        (series_value % 1440) * interval '1 minute' as activity_timestamp,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * 30)::int) as series_value\n)\n\nselect *, current_timestamp as dbt_created_at from mock_digital", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["activity_id"], "time_spine": null}, "model.customer_360.stg_loans": {"database": "cosmos", "schema": "cosmos", "name": "stg_loans", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_loans.sql", "original_file_path": "models/staging/stg_loans.sql", "unique_id": "model.customer_360.stg_loans", "fqn": ["customer_360", "staging", "stg_loans"], "alias": "stg_loans", "checksum": {"name": "sha256", "checksum": "aa8e0fddc932589012ef1dbc1c3bf3652b6e1644308ba168a9eba0c87ded8948"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "loans", "credit"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "loans", "credit"], "description": "Staging model for loan products", "columns": {"loan_id": {"name": "loan_id", "description": "Primary key for loan", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "loans", "credit"]}, "created_at": 1755857463.385556, "relation_name": "\"cosmos\".\"cosmos\".\"stg_loans\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['bronze', 'staging', 'loans', 'credit']\n) }}\n\n/*\n    Staging model for loan products\n    \n    Covers mortgages, personal loans, auto loans with\n    payment history and risk assessment metrics.\n*/\n\nwith mock_loans as (\n    select\n        series_value as loan_id,\n        'LOAN' || lpad(series_value::text, 8, '0') as loan_number,\n        \n        -- Link to customers (subset of customers have loans)\n        ((series_value - 1) % {{ var('num_customers') }}) + 1 as customer_id,\n        \n        -- Loan types\n        case \n            when series_value % 4 = 1 then 'MORTGAGE'\n            when series_value % 4 = 2 then 'PERSONAL'\n            when series_value % 4 = 3 then 'AUTO'\n            else 'HOME_EQUITY'\n        end as loan_type,\n        \n        -- Loan amounts based on type\n        case \n            when series_value % 4 = 1 then (250000 + (series_value % 750000))::numeric(12,2)  -- Mortgage\n            when series_value % 4 = 2 then (5000 + (series_value % 45000))::numeric(12,2)    -- Personal\n            when series_value % 4 = 3 then (15000 + (series_value % 70000))::numeric(12,2)   -- Auto\n            else (50000 + (series_value % 200000))::numeric(12,2)                             -- Home equity\n        end as original_amount,\n        \n        -- Current balances (reduced from original)\n        case \n            when series_value % 4 = 1 then (200000 + (series_value % 600000))::numeric(12,2)  -- Mortgage\n            when series_value % 4 = 2 then (2000 + (series_value % 30000))::numeric(12,2)     -- Personal\n            when series_value % 4 = 3 then (8000 + (series_value % 50000))::numeric(12,2)     -- Auto\n            else (30000 + (series_value % 150000))::numeric(12,2)                              -- Home equity\n        end as current_balance,\n        \n        -- Interest rates based on type\n        case \n            when series_value % 4 = 1 then 3.5 + (series_value % 30) / 10.0  -- Mortgage: 3.5-6.4%\n            when series_value % 4 = 2 then 8.0 + (series_value % 80) / 10.0  -- Personal: 8.0-15.9%\n            when series_value % 4 = 3 then 4.0 + (series_value % 60) / 10.0  -- Auto: 4.0-9.9%\n            else 5.0 + (series_value % 50) / 10.0                            -- Home equity: 5.0-9.9%\n        end as interest_rate,\n        \n        -- Loan terms (months)\n        case \n            when series_value % 4 = 1 then 360  -- Mortgage: 30 years\n            when series_value % 4 = 2 then 60   -- Personal: 5 years\n            when series_value % 4 = 3 then 72   -- Auto: 6 years\n            else 180                             -- Home equity: 15 years\n        end as term_months,\n        \n        -- Loan status\n        case \n            when series_value % 50 = 1 then 'DELINQUENT'\n            when series_value % 30 = 1 then 'DEFAULT'\n            when series_value % 20 = 1 then 'PAID_OFF'\n            when series_value % 15 = 1 then 'CHARGED_OFF'\n            else 'CURRENT'\n        end as loan_status,\n        \n        -- Dates\n        '2018-01-01'::date + (series_value % 2190) * interval '1 day' as origination_date,\n        case \n            when series_value % 20 = 1 then '2018-01-01'::date + (series_value % 2190) * interval '1 day' + interval '3 years'\n            else null\n        end as maturity_date,\n        \n        -- Payment info\n        case \n            when series_value % 10 = 1 then (series_value % 30) + 1  -- Days past due\n            else 0\n        end as days_past_due,\n        \n        case when series_value % 5 = 1 then true else false end as has_collateral,\n        case when series_value % 8 = 1 then true else false end as is_secured,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * 0.6)::int) as series_value\n),\n\nbase_loans as (\n    select\n        loan_id,\n        loan_number,\n        customer_id,\n        \n        -- Loan details\n        upper(loan_type) as loan_type,\n        original_amount,\n        current_balance,\n        original_amount - current_balance as principal_paid,\n        \n        -- Terms\n        round(interest_rate::numeric, 2) as interest_rate,\n        term_months,\n        \n        -- Status\n        upper(loan_status) as loan_status,\n        days_past_due,\n        \n        -- Dates\n        origination_date,\n        maturity_date,\n        date_part('year', age(current_date, origination_date))::int as loan_age_years,\n        \n        -- Security\n        has_collateral,\n        is_secured,\n        \n        -- Calculated fields\n        case \n            when current_balance > 0 and original_amount > 0 then \n                round(((original_amount - current_balance) / original_amount * 100)::numeric, 2)\n            else 100\n        end as percent_paid,\n        \n        last_updated,\n        current_timestamp as dbt_created_at\n        \n    from mock_loans\n    where loan_status != 'INVALID'\n),\n\nenriched_loans as (\n    select\n        bl.*,\n        \n        -- Payment status categories\n        case \n            when bl.days_past_due = 0 then 'CURRENT'\n            when bl.days_past_due <= 30 then 'LATE_1_30'\n            when bl.days_past_due <= 60 then 'LATE_31_60'\n            when bl.days_past_due <= 90 then 'LATE_61_90'\n            else 'LATE_90_PLUS'\n        end as delinquency_bucket,\n        \n        -- Risk scoring\n        case \n            when bl.loan_status = 'CHARGED_OFF' then 100\n            when bl.loan_status = 'DEFAULT' then 95\n            when bl.days_past_due > 90 then 85\n            when bl.days_past_due > 60 then 70\n            when bl.days_past_due > 30 then 55\n            when bl.days_past_due > 0 then 40\n            else 20\n        end as risk_score,\n        \n        -- Loan performance\n        case \n            when bl.percent_paid >= 80 then 'EXCELLENT'\n            when bl.percent_paid >= 60 then 'GOOD'\n            when bl.percent_paid >= 40 then 'FAIR'\n            when bl.percent_paid >= 20 then 'POOR'\n            else 'NEW'\n        end as payment_performance,\n        \n        -- Loan size categorization\n        case \n            when bl.original_amount >= 500000 then 'JUMBO'\n            when bl.original_amount >= 200000 then 'LARGE'\n            when bl.original_amount >= 50000 then 'MEDIUM'\n            when bl.original_amount >= 10000 then 'SMALL'\n            else 'MICRO'\n        end as loan_size_category,\n        \n        -- Rate competitiveness\n        case \n            when bl.loan_type = 'MORTGAGE' and bl.interest_rate < 4.0 then 'EXCELLENT_RATE'\n            when bl.loan_type = 'MORTGAGE' and bl.interest_rate < 5.0 then 'GOOD_RATE'\n            when bl.loan_type = 'PERSONAL' and bl.interest_rate < 10.0 then 'EXCELLENT_RATE'\n            when bl.loan_type = 'PERSONAL' and bl.interest_rate < 12.0 then 'GOOD_RATE'\n            when bl.loan_type = 'AUTO' and bl.interest_rate < 5.0 then 'EXCELLENT_RATE'\n            when bl.loan_type = 'AUTO' and bl.interest_rate < 7.0 then 'GOOD_RATE'\n            else 'MARKET_RATE'\n        end as rate_competitiveness,\n        \n        -- Remaining term estimation\n        case \n            when bl.maturity_date is not null then \n                date_part('month', age(bl.maturity_date, current_date))::int\n            else bl.term_months - (bl.loan_age_years * 12)\n        end as estimated_months_remaining,\n        \n        -- Flags\n        case \n            when bl.loan_status in ('CURRENT', 'PAID_OFF') and bl.days_past_due = 0 then true \n            else false \n        end as is_performing,\n        \n        case \n            when bl.loan_age_years >= 10 then 'LONG_TERM'\n            when bl.loan_age_years >= 5 then 'ESTABLISHED'\n            when bl.loan_age_years >= 2 then 'MATURE'\n            else 'NEW'\n        end as tenure_category\n        \n    from base_loans bl\n)\n\nselect * from enriched_loans", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["loan_id"], "time_spine": null}, "model.customer_360.stg_accounts": {"database": "cosmos", "schema": "cosmos", "name": "stg_accounts", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_accounts.sql", "original_file_path": "models/staging/stg_accounts.sql", "unique_id": "model.customer_360.stg_accounts", "fqn": ["customer_360", "staging", "stg_accounts"], "alias": "stg_accounts", "checksum": {"name": "sha256", "checksum": "b0dab25b4dbc242e8b13e7e64b8c7d19723e5a6daaf3275b4d65478e1cc609d4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "financial_products", "accounts"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "financial_products", "accounts"], "description": "Staging model for customer accounts", "columns": {"account_id": {"name": "account_id", "description": "Primary key for account", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_id": {"name": "customer_id", "description": "Foreign key to customers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_type": {"name": "product_type", "description": "Type of account product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_status": {"name": "account_status", "description": "Current account status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "financial_products", "accounts"]}, "created_at": 1755857463.382339, "relation_name": "\"cosmos\".\"cosmos\".\"stg_accounts\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['bronze', 'staging', 'financial_products', 'accounts']\n) }}\n\n/*\n    Staging model for customer accounts (checking, savings, investment)\n    \n    Standardizes account information across product types and\n    enriches with product-specific business rules and risk indicators.\n*/\n\nwith mock_accounts as (\n    select\n        series_value as account_id,\n        'ACC' || lpad(series_value::text, 8, '0') as account_number,\n        \n        -- Link to customers (some customers have multiple accounts)\n        case \n            when series_value <= {{ var('num_customers') }} then series_value  -- First account per customer\n            when series_value <= ({{ var('num_customers') }} * 1.6)::int then (series_value % {{ var('num_customers') }}) + 1  -- Second accounts\n            else (series_value % {{ var('num_customers') }}) + 1  -- Third accounts for active customers\n        end as customer_id,\n        \n        -- Account product mapping\n        case \n            when series_value % 6 = 1 then 'CHCK001'  -- Basic Checking\n            when series_value % 6 = 2 then 'SAVE001'  -- High Yield Savings\n            when series_value % 6 = 3 then 'CD001'    -- 12-Month CD\n            when series_value % 6 = 4 then 'INVT001'  -- Brokerage Account\n            when series_value % 6 = 5 then 'BUSI001'  -- Business Checking\n            else 'CHCK001'  -- Default to checking\n        end as product_id,\n        \n        -- Account balances (realistic distribution)\n        case \n            when series_value % 10 = 1 then 100000 + (series_value % 500000)::numeric  -- High balance\n            when series_value % 5 = 1 then 25000 + (series_value % 75000)::numeric    -- Medium balance\n            else 500 + (series_value % 25000)::numeric  -- Standard balance\n        end as current_balance,\n        \n        case \n            when series_value % 15 = 1 then 150000 + (series_value % 300000)::numeric  -- High average\n            else 2000 + (series_value % 50000)::numeric  -- Standard average\n        end as average_balance,\n        \n        -- Account status and dates\n        case \n            when series_value % 50 = 1 then 'CLOSED'\n            when series_value % 25 = 1 then 'DORMANT'\n            when series_value % 20 = 1 then 'RESTRICTED'\n            else 'ACTIVE'\n        end as account_status,\n        \n        '2020-01-01'::date + (series_value * interval '2.5 days') as opened_date,\n        case \n            when series_value % 50 = 1 then '2024-01-01'::date + (series_value * interval '1 day')\n            else null\n        end as closed_date,\n        \n        -- Interest and fees\n        case \n            when series_value % 6 = 2 then 2.5  -- Savings rate\n            when series_value % 6 = 3 then 4.25 -- CD rate\n            when series_value % 6 = 5 then 0.5  -- Business rate\n            else 0.01  -- Checking rate\n        end as interest_rate,\n        \n        case \n            when series_value % 6 = 1 then 5.00   -- Checking fee\n            when series_value % 6 = 5 then 15.00  -- Business fee\n            else 0.00\n        end as monthly_fee,\n        \n        -- Account features\n        case when series_value % 3 != 1 then true else false end as online_banking_enabled,\n        case when series_value % 4 != 1 then true else false end as mobile_banking_enabled,\n        case when series_value % 5 != 1 then true else false end as overdraft_protection,\n        case when series_value % 8 = 1 then true else false end as is_joint_account,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }})::int) as series_value\n),\n\nbase_accounts as (\n    select\n        account_id,\n        account_number,\n        customer_id,\n        product_id,\n        \n        -- Financial information\n        current_balance,\n        average_balance,\n        interest_rate / 100.0 as annual_interest_rate,  -- Convert percentage to decimal\n        monthly_fee,\n        \n        -- Account lifecycle\n        upper(account_status) as account_status,\n        opened_date,\n        closed_date,\n        case \n            when closed_date is null then true \n            else false \n        end as is_active,\n        \n        coalesce(\n            date_part('year', age(coalesce(closed_date, current_date), opened_date))::int,\n            0\n        ) as account_age_years,\n        \n        -- Account features\n        online_banking_enabled,\n        mobile_banking_enabled,\n        overdraft_protection,\n        is_joint_account,\n        \n        last_updated,\n        current_timestamp as dbt_created_at\n        \n    from mock_accounts\n    where account_status != 'INVALID'\n),\n\nenriched_accounts as (\n    select\n        ba.*,\n        \n        -- Product enrichment\n        pc.product_name,\n        pc.product_type,\n        pc.category as product_category,\n        pc.min_balance as product_min_balance,\n        pc.risk_level as product_risk_level,\n        \n        -- Balance analysis\n        case \n            when ba.current_balance >= 100000 then 'High Balance'\n            when ba.current_balance >= 25000 then 'Medium Balance'\n            when ba.current_balance >= 5000 then 'Standard Balance'\n            else 'Low Balance'\n        end as balance_tier,\n        \n        case \n            when ba.current_balance < pc.min_balance then true \n            else false \n        end as below_minimum_balance,\n        \n        -- Revenue calculations\n        (ba.average_balance * ba.annual_interest_rate / 12) as monthly_interest_expense,\n        ba.monthly_fee as monthly_fee_revenue,\n        (ba.monthly_fee - (ba.average_balance * ba.annual_interest_rate / 12)) as monthly_net_revenue,\n        \n        -- Account relationship indicators\n        case \n            when ba.account_age_years >= 10 then 'Long Term'\n            when ba.account_age_years >= 5 then 'Established'\n            when ba.account_age_years >= 2 then 'Mature'\n            else 'New'\n        end as relationship_tenure,\n        \n        -- Digital adoption\n        case \n            when ba.online_banking_enabled and ba.mobile_banking_enabled then 'Full Digital'\n            when ba.online_banking_enabled or ba.mobile_banking_enabled then 'Partial Digital'\n            else 'Traditional'\n        end as digital_adoption_level,\n        \n        -- Risk indicators\n        case \n            when ba.current_balance <= 0 then 'Negative Balance'\n            when ba.current_balance < pc.min_balance then 'Below Minimum'\n            when ba.account_status = 'RESTRICTED' then 'Restricted'\n            when ba.account_status = 'DORMANT' then 'Dormant'\n            else 'Normal'\n        end as risk_status,\n        \n        -- Service level indicators\n        case \n            when ba.current_balance >= 250000 then 'Private Banking'\n            when ba.current_balance >= 100000 then 'Premium'\n            when ba.current_balance >= 25000 then 'Preferred'\n            else 'Standard'\n        end as service_tier,\n        \n        -- Fee waiver eligibility\n        case \n            when ba.current_balance >= pc.min_balance and ba.monthly_fee > 0 then true \n            else false \n        end as fee_waiver_eligible,\n        \n        -- Account scoring for cross-sell\n        case \n            when ba.current_balance >= 50000 and ba.account_age_years >= 2 then 90\n            when ba.current_balance >= 25000 and ba.account_age_years >= 1 then 75\n            when ba.current_balance >= 10000 then 60\n            when ba.account_status = 'ACTIVE' then 45\n            else 20\n        end as cross_sell_score\n        \n    from base_accounts ba\n    left join {{ ref('product_catalog') }} pc on ba.product_id = pc.product_id\n)\n\nselect * from enriched_accounts", "doc_blocks": [], "language": "sql", "refs": [{"name": "product_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.customer_360.product_catalog"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["account_id"], "time_spine": null}, "model.customer_360.stg_risk_assessments": {"database": "cosmos", "schema": "cosmos", "name": "stg_risk_assessments", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_risk_assessments.sql", "original_file_path": "models/staging/stg_risk_assessments.sql", "unique_id": "model.customer_360.stg_risk_assessments", "fqn": ["customer_360", "staging", "stg_risk_assessments"], "alias": "stg_risk_assessments", "checksum": {"name": "sha256", "checksum": "34cc29a53f62f6719e6852a2dfd02401c527970d59c1ad0594c4714ef6dcbfa5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "risk", "compliance"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "risk", "compliance"], "description": "Staging model for risk assessments", "columns": {"assessment_id": {"name": "assessment_id", "description": "Primary key for assessment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "risk", "compliance"]}, "created_at": 1755857463.389185, "relation_name": "\"cosmos\".\"cosmos\".\"stg_risk_assessments\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['bronze', 'staging', 'risk', 'compliance']\n) }}\n\nwith mock_assessments as (\n    select\n        series_value as assessment_id,\n        'RISK' || lpad(series_value::text, 8, '0') as assessment_number,\n        ((series_value - 1) % {{ var('num_customers') }}) + 1 as customer_id,\n        \n        case \n            when series_value % 4 = 1 then 'CREDIT_RISK'\n            when series_value % 4 = 2 then 'FRAUD_RISK' \n            when series_value % 4 = 3 then 'OPERATIONAL_RISK'\n            else 'MARKET_RISK'\n        end as risk_type,\n        \n        (300 + (series_value % 550)) as risk_score,\n        \n        case \n            when (300 + (series_value % 550)) >= 750 then 'LOW'\n            when (300 + (series_value % 550)) >= 650 then 'MEDIUM'\n            when (300 + (series_value % 550)) >= 550 then 'HIGH'\n            else 'VERY_HIGH'\n        end as risk_rating,\n        \n        '2024-01-01'::date + (series_value % 365) * interval '1 day' as assessment_date,\n        \n        case when series_value % 10 = 1 then true else false end as requires_review,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * 4)::int) as series_value\n),\n\nenriched_assessments as (\n    select\n        ma.*,\n        \n        case \n            when ma.risk_score >= 800 then 'EXCELLENT'\n            when ma.risk_score >= 740 then 'VERY_GOOD'\n            when ma.risk_score >= 670 then 'GOOD'\n            when ma.risk_score >= 580 then 'FAIR'\n            else 'POOR'\n        end as score_category,\n        \n        current_timestamp as dbt_created_at\n        \n    from mock_assessments ma\n)\n\nselect * from enriched_assessments", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["assessment_id"], "time_spine": null}, "model.customer_360.stg_cards": {"database": "cosmos", "schema": "cosmos", "name": "stg_cards", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_cards.sql", "original_file_path": "models/staging/stg_cards.sql", "unique_id": "model.customer_360.stg_cards", "fqn": ["customer_360", "staging", "stg_cards"], "alias": "stg_cards", "checksum": {"name": "sha256", "checksum": "48915f95896d138b1f6ca3b0ae887fddba89c0c9e5dcc22930432c36488981ec"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "cards", "credit"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "cards", "credit"], "description": "Staging model for credit and debit cards", "columns": {"card_id": {"name": "card_id", "description": "Primary key for card", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "cards", "credit"]}, "created_at": 1755857463.385231, "relation_name": "\"cosmos\".\"cosmos\".\"stg_cards\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['bronze', 'staging', 'cards', 'credit']\n) }}\n\n/*\n    Staging model for credit and debit cards\n    \n    Manages card lifecycle, limits, and usage analytics\n    for risk management and customer insights.\n*/\n\nwith mock_cards as (\n    select\n        series_value as card_id,\n        'CARD' || lpad(series_value::text, 8, '0') as card_number_masked,\n        \n        -- Link to customers (some customers have multiple cards)\n        case \n            when series_value <= {{ var('num_customers') }} then series_value  -- Primary cards\n            when series_value <= ({{ var('num_customers') }} * 1.8)::int then (series_value % {{ var('num_customers') }}) + 1\n            else (series_value % {{ var('num_customers') }}) + 1\n        end as customer_id,\n        \n        -- Link to accounts for debit cards\n        case \n            when series_value % 3 = 1 then ((series_value - 1) % ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }})::int) + 1\n            else null  -- Credit cards don't link to deposit accounts\n        end as linked_account_id,\n        \n        -- Card types\n        case \n            when series_value % 3 = 1 then 'DEBIT'\n            when series_value % 3 = 2 then 'CREDIT'\n            else 'PREPAID'\n        end as card_type,\n        \n        -- Card brands\n        case \n            when series_value % 4 = 1 then 'VISA'\n            when series_value % 4 = 2 then 'MASTERCARD'\n            when series_value % 4 = 3 then 'AMEX'\n            else 'DISCOVER'\n        end as card_brand,\n        \n        -- Card status\n        case \n            when series_value % 20 = 1 then 'BLOCKED'\n            when series_value % 15 = 1 then 'EXPIRED'\n            when series_value % 10 = 1 then 'INACTIVE'\n            else 'ACTIVE'\n        end as card_status,\n        \n        -- Credit limits (for credit cards)\n        case \n            when series_value % 3 = 2 then  -- Credit cards only\n                case \n                    when series_value % 10 = 1 then 50000\n                    when series_value % 5 = 1 then 25000\n                    when series_value % 3 = 1 then 10000\n                    else 5000\n                end\n            else null\n        end as credit_limit,\n        \n        -- Current balances\n        case \n            when series_value % 3 = 2 then  -- Credit cards\n                (series_value % 5000)::numeric(10,2)\n            when series_value % 3 = 0 then  -- Prepaid cards\n                (100 + (series_value % 2000))::numeric(10,2)\n            else 0  -- Debit cards\n        end as current_balance,\n        \n        -- Issue and expiry dates\n        '2020-01-01'::date + (series_value % 1460) * interval '1 day' as issue_date,\n        '2020-01-01'::date + (series_value % 1460) * interval '1 day' + interval '4 years' as expiry_date,\n        \n        -- Usage flags\n        case when series_value % 3 != 1 then true else false end as contactless_enabled,\n        case when series_value % 4 != 1 then true else false end as online_enabled,\n        case when series_value % 5 != 1 then true else false end as international_enabled,\n        case when series_value % 8 = 1 then true else false end as is_business_card,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * 1.8)::int) as series_value\n),\n\nbase_cards as (\n    select\n        card_id,\n        card_number_masked,\n        customer_id,\n        linked_account_id,\n        \n        -- Card details\n        upper(card_type) as card_type,\n        upper(card_brand) as card_brand,\n        upper(card_status) as card_status,\n        \n        -- Financial details\n        credit_limit,\n        current_balance,\n        case \n            when credit_limit > 0 and current_balance > 0 then \n                round((current_balance / credit_limit * 100)::numeric, 2)\n            else 0\n        end as utilization_rate,\n        \n        -- Dates\n        issue_date,\n        expiry_date,\n        case \n            when expiry_date < current_date then true \n            else false \n        end as is_expired,\n        \n        date_part('year', age(current_date, issue_date))::int as card_age_years,\n        \n        -- Features\n        contactless_enabled,\n        online_enabled,\n        international_enabled,\n        is_business_card,\n        \n        last_updated,\n        current_timestamp as dbt_created_at\n        \n    from mock_cards\n    where card_status != 'INVALID'\n),\n\nenriched_cards as (\n    select\n        bc.*,\n        \n        -- Credit scoring\n        case \n            when bc.utilization_rate > 90 then 'HIGH_UTILIZATION'\n            when bc.utilization_rate > 70 then 'MEDIUM_UTILIZATION'\n            when bc.utilization_rate > 30 then 'LOW_UTILIZATION'\n            else 'MINIMAL_UTILIZATION'\n        end as utilization_category,\n        \n        -- Available credit\n        case \n            when bc.credit_limit > 0 then bc.credit_limit - bc.current_balance\n            else null\n        end as available_credit,\n        \n        -- Risk indicators\n        case \n            when bc.utilization_rate > 85 then 90\n            when bc.utilization_rate > 70 then 70\n            when bc.utilization_rate > 50 then 50\n            when bc.card_status = 'BLOCKED' then 95\n            else 20\n        end as risk_score,\n        \n        -- Digital features\n        case \n            when bc.contactless_enabled and bc.online_enabled then 'FULL_DIGITAL'\n            when bc.contactless_enabled or bc.online_enabled then 'PARTIAL_DIGITAL'\n            else 'TRADITIONAL'\n        end as digital_feature_level,\n        \n        -- Card tier (based on limits)\n        case \n            when bc.credit_limit >= 50000 then 'PREMIUM'\n            when bc.credit_limit >= 25000 then 'GOLD'\n            when bc.credit_limit >= 10000 then 'SILVER'\n            when bc.credit_limit > 0 then 'STANDARD'\n            else 'N/A'\n        end as card_tier,\n        \n        -- Status flags\n        case \n            when bc.card_status = 'ACTIVE' and not bc.is_expired then true \n            else false \n        end as is_usable,\n        \n        case \n            when bc.card_age_years >= 5 then 'LONG_TERM'\n            when bc.card_age_years >= 2 then 'ESTABLISHED'\n            when bc.card_age_years >= 1 then 'MATURE'\n            else 'NEW'\n        end as tenure_category\n        \n    from base_cards bc\n)\n\nselect * from enriched_cards", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["card_id"], "time_spine": null}, "model.customer_360.stg_customer_addresses": {"database": "cosmos", "schema": "cosmos", "name": "stg_customer_addresses", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_customer_addresses.sql", "original_file_path": "models/staging/stg_customer_addresses.sql", "unique_id": "model.customer_360.stg_customer_addresses", "fqn": ["customer_360", "staging", "stg_customer_addresses"], "alias": "stg_customer_addresses", "checksum": {"name": "sha256", "checksum": "8a98615d398f793a3edfbb8779d72352537d66a7231f9ed35b9c7ebc39eaf472"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "customers", "addresses"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "customers", "addresses"], "description": "Staging model for customer address information", "columns": {"address_id": {"name": "address_id", "description": "Primary key for address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_id": {"name": "customer_id", "description": "Foreign key to customers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "customers", "addresses"]}, "created_at": 1755857463.381355, "relation_name": "\"cosmos\".\"cosmos\".\"stg_customer_addresses\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['bronze', 'staging', 'customers', 'addresses']\n) }}\n\n/*\n    Staging model for customer address information\n    \n    Handles address standardization, geocoding, and geographic\n    classification for risk and marketing purposes.\n*/\n\nwith mock_addresses as (\n    select\n        -- Link to customers\n        series_value as address_id,\n        case \n            when series_value <= {{ var('num_customers') }} then series_value  -- Primary addresses\n            else (series_value % {{ var('num_customers') }}) + 1  -- Some customers have multiple addresses\n        end as customer_id,\n        \n        -- Address type\n        case \n            when series_value <= {{ var('num_customers') }} then 'PRIMARY'\n            when series_value % 4 = 1 then 'MAILING'\n            when series_value % 4 = 2 then 'BUSINESS'\n            else 'PREVIOUS'\n        end as address_type,\n        \n        -- Street address\n        case \n            when series_value % 5 = 1 then (100 + (series_value % 9900))::text || ' Main Street'\n            when series_value % 5 = 2 then (200 + (series_value % 9800))::text || ' Oak Avenue'\n            when series_value % 5 = 3 then (300 + (series_value % 9700))::text || ' Pine Road'\n            when series_value % 5 = 4 then (400 + (series_value % 9600))::text || ' Elm Drive'\n            else (500 + (series_value % 9500))::text || ' Maple Lane'\n        end as street_address,\n        \n        -- Unit/Apartment\n        case \n            when series_value % 8 = 1 then 'Apt ' || ((series_value % 50) + 1)::text\n            when series_value % 8 = 2 then 'Unit ' || ((series_value % 20) + 1)::text\n            else null\n        end as unit_number,\n        \n        -- City\n        case \n            when series_value % 10 = 1 then 'New York'\n            when series_value % 10 = 2 then 'Los Angeles'\n            when series_value % 10 = 3 then 'Chicago'\n            when series_value % 10 = 4 then 'Houston'\n            when series_value % 10 = 5 then 'Phoenix'\n            when series_value % 10 = 6 then 'Philadelphia'\n            when series_value % 10 = 7 then 'San Antonio'\n            when series_value % 10 = 8 then 'San Diego'\n            when series_value % 10 = 9 then 'Dallas'\n            else 'Austin'\n        end as city,\n        \n        -- State mapping\n        case \n            when series_value % 10 = 1 then 'NY'\n            when series_value % 10 = 2 then 'CA'\n            when series_value % 10 = 3 then 'IL'\n            when series_value % 10 = 4 then 'TX'\n            when series_value % 10 = 5 then 'AZ'\n            when series_value % 10 = 6 then 'PA'\n            when series_value % 10 = 7 then 'TX'\n            when series_value % 10 = 8 then 'CA'\n            when series_value % 10 = 9 then 'TX'\n            else 'TX'\n        end as state_code,\n        \n        -- ZIP codes\n        case \n            when series_value % 10 = 1 then (10000 + (series_value % 1000))::text\n            when series_value % 10 = 2 then (90000 + (series_value % 1000))::text\n            when series_value % 10 = 3 then (60000 + (series_value % 1000))::text\n            when series_value % 10 = 4 then (77000 + (series_value % 1000))::text\n            when series_value % 10 = 5 then (85000 + (series_value % 1000))::text\n            when series_value % 10 = 6 then (19000 + (series_value % 1000))::text\n            when series_value % 10 = 7 then (78000 + (series_value % 1000))::text\n            when series_value % 10 = 8 then (92000 + (series_value % 1000))::text\n            when series_value % 10 = 9 then (75000 + (series_value % 1000))::text\n            else (73000 + (series_value % 1000))::text\n        end as postal_code,\n        \n        -- Address status\n        case \n            when series_value % 20 = 1 then 'INVALID'\n            when series_value % 15 = 1 then 'UNVERIFIED'\n            else 'VERIFIED'\n        end as address_status,\n        \n        -- Dates\n        '2020-01-01'::date + (series_value * interval '1 day') as address_since,\n        case \n            when series_value % 10 = 1 then '2023-01-01'::date + (series_value * interval '3 days')\n            else null\n        end as address_until,\n        \n        -- Address validation\n        case when series_value % 15 != 1 then true else false end as is_deliverable,\n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * {{ var('num_addresses_multiplier') }})::int) as series_value\n),\n\nbase_addresses as (\n    select\n        address_id,\n        customer_id,\n        upper(address_type) as address_type,\n        \n        -- Standardized address components\n        initcap(street_address) as street_address,\n        case when unit_number is not null then initcap(unit_number) else null end as unit_number,\n        initcap(city) as city,\n        upper(state_code) as state_code,\n        postal_code,\n        \n        -- Full formatted address\n        concat_ws(', ',\n            concat_ws(' ', street_address, unit_number),\n            city,\n            concat(state_code, ' ', postal_code)\n        ) as full_address,\n        \n        -- Address quality indicators\n        upper(address_status) as address_status,\n        is_deliverable,\n        \n        -- Date information\n        address_since,\n        address_until,\n        case \n            when address_until is null then true \n            else false \n        end as is_current,\n        \n        coalesce(\n            date_part('year', age(coalesce(address_until, current_date), address_since))::int,\n            0\n        ) as years_at_address,\n        \n        last_updated,\n        current_timestamp as dbt_created_at\n        \n    from mock_addresses\n    where address_status != 'INVALID'\n),\n\nenriched_addresses as (\n    select\n        ba.*,\n        \n        -- Geographic enrichment\n        gr.state_name,\n        gr.region_name,\n        gr.market_type,\n        gr.cost_of_living_index,\n        gr.population_density,\n        \n        -- Regional risk assessment\n        case \n            when gr.cost_of_living_index > 130 then 'High Cost Area'\n            when gr.cost_of_living_index > 110 then 'Medium Cost Area'\n            else 'Low Cost Area'\n        end as cost_of_living_category,\n        \n        -- Address stability indicators\n        case \n            when ba.years_at_address >= 5 then 'Stable'\n            when ba.years_at_address >= 2 then 'Moderate'\n            else 'New'\n        end as address_stability,\n        \n        -- Delivery and service flags\n        case \n            when ba.is_deliverable and ba.address_status = 'VERIFIED' then true \n            else false \n        end as service_deliverable,\n        \n        case \n            when gr.population_density = 'High' then true \n            else false \n        end as urban_area,\n        \n        -- Address scoring for fraud detection\n        case \n            when ba.address_status = 'VERIFIED' and ba.years_at_address >= 2 then 90\n            when ba.address_status = 'VERIFIED' and ba.years_at_address >= 1 then 75\n            when ba.address_status = 'VERIFIED' then 60\n            when ba.address_status = 'UNVERIFIED' then 40\n            else 20\n        end as address_quality_score\n        \n    from base_addresses ba\n    left join {{ ref('geographic_regions') }} gr on ba.state_code = gr.state_code\n)\n\nselect * from enriched_addresses", "doc_blocks": [], "language": "sql", "refs": [{"name": "geographic_regions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.customer_360.geographic_regions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["address_id"], "time_spine": null}, "model.customer_360.stg_credit_scores": {"database": "cosmos", "schema": "cosmos", "name": "stg_credit_scores", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_credit_scores.sql", "original_file_path": "models/staging/stg_credit_scores.sql", "unique_id": "model.customer_360.stg_credit_scores", "fqn": ["customer_360", "staging", "stg_credit_scores"], "alias": "stg_credit_scores", "checksum": {"name": "sha256", "checksum": "59d7b6d012e73a92b452811e3bce1f0a0be21b6c1e6d61d59314fe743e022480"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "credit", "history"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "credit", "history"], "description": "Staging model for credit score history", "columns": {"score_id": {"name": "score_id", "description": "Primary key for score", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "credit_score": {"name": "credit_score", "description": "Credit score value", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "credit", "history"]}, "created_at": 1755857463.3859122, "relation_name": "\"cosmos\".\"cosmos\".\"stg_credit_scores\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['bronze', 'staging', 'credit', 'history']\n) }}\n\nwith mock_credit_scores as (\n    select\n        series_value as score_id,\n        ((series_value - 1) % {{ var('num_customers') }}) + 1 as customer_id,\n        \n        (300 + (series_value % 550)) as credit_score,\n        \n        '2024-01-01'::date - (series_value % 1095) * interval '1 day' as score_date,\n        \n        case \n            when series_value % 3 = 1 then 'EXPERIAN'\n            when series_value % 3 = 2 then 'EQUIFAX'\n            else 'TRANSUNION'\n        end as bureau,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * 12)::int) as series_value\n),\n\nenriched_scores as (\n    select\n        mcs.*,\n        \n        case \n            when mcs.credit_score >= 800 then 'EXCEPTIONAL'\n            when mcs.credit_score >= 740 then 'VERY_GOOD'\n            when mcs.credit_score >= 670 then 'GOOD'\n            when mcs.credit_score >= 580 then 'FAIR'\n            else 'POOR'\n        end as score_category,\n        \n        current_timestamp as dbt_created_at\n        \n    from mock_credit_scores mcs\n)\n\nselect * from enriched_scores", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["score_id"], "time_spine": null}, "model.customer_360.stg_product_usage": {"database": "cosmos", "schema": "cosmos", "name": "stg_product_usage", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_product_usage.sql", "original_file_path": "models/staging/stg_product_usage.sql", "unique_id": "model.customer_360.stg_product_usage", "fqn": ["customer_360", "staging", "stg_product_usage"], "alias": "stg_product_usage", "checksum": {"name": "sha256", "checksum": "c5ebef1693269041d886762512f0ddf472018e1a5a427320ef3d26f8e725f446"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "products"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "products"], "description": "Staging model for product usage metrics", "columns": {"usage_id": {"name": "usage_id", "description": "Primary key for usage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "products"]}, "created_at": 1755857463.3883252, "relation_name": "\"cosmos\".\"cosmos\".\"stg_product_usage\"", "raw_code": "{{ config(materialized='view', tags=['bronze', 'staging', 'products']) }}\n\nwith mock_product_usage as (\n    select\n        series_value as usage_id,\n        ((series_value - 1) % {{ var('num_customers') }}) + 1 as customer_id,\n        \n        case \n            when series_value % 8 = 1 then 'CHECKING'\n            when series_value % 8 = 2 then 'SAVINGS'\n            when series_value % 8 = 3 then 'CREDIT_CARD'\n            when series_value % 8 = 4 then 'MORTGAGE'\n            when series_value % 8 = 5 then 'INVESTMENTS'\n            when series_value % 8 = 6 then 'INSURANCE'\n            when series_value % 8 = 7 then 'LOANS'\n            else 'MOBILE_BANKING'\n        end as product_type,\n        \n        (1 + (series_value % 100)) as usage_frequency,\n        '2024-01-01'::date + (series_value % 365) * interval '1 day' as usage_date,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * 8)::int) as series_value\n)\n\nselect *, current_timestamp as dbt_created_at from mock_product_usage", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["usage_id"], "time_spine": null}, "model.customer_360.stg_payments": {"database": "cosmos", "schema": "cosmos", "name": "stg_payments", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_payments.sql", "original_file_path": "models/staging/stg_payments.sql", "unique_id": "model.customer_360.stg_payments", "fqn": ["customer_360", "staging", "stg_payments"], "alias": "stg_payments", "checksum": {"name": "sha256", "checksum": "b94a71d194e2a3681c4bac8860ef29f71ba4b33ecf998daadffd2860fb173c59"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "payments"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "payments"], "description": "Staging model for payment transactions", "columns": {"payment_id": {"name": "payment_id", "description": "Primary key for payment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "payments"]}, "created_at": 1755857463.384046, "relation_name": "\"cosmos\".\"cosmos\".\"stg_payments\"", "raw_code": "{{ config(materialized='view', tags=['bronze', 'staging', 'payments']) }}\n\nwith mock_payments as (\n    select\n        series_value as payment_id,\n        'PAY' || lpad(series_value::text, 10, '0') as payment_number,\n        ((series_value - 1) % ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }})::int) + 1 as account_id,\n        \n        case \n            when series_value % 5 = 1 then 'BILL_PAY'\n            when series_value % 5 = 2 then 'PERSON_TO_PERSON'\n            when series_value % 5 = 3 then 'MERCHANT_PAYMENT'\n            when series_value % 5 = 4 then 'LOAN_PAYMENT'\n            else 'TAX_PAYMENT'\n        end as payment_type,\n        \n        (25 + (series_value % 2975))::numeric(10,2) as payment_amount,\n        '2024-01-01'::date + (series_value % 365) * interval '1 day' as payment_date,\n        \n        case \n            when series_value % 50 = 1 then 'FAILED'\n            when series_value % 25 = 1 then 'PENDING'\n            else 'COMPLETED'\n        end as payment_status,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }} * 25)::int) as series_value\n)\n\nselect *, current_timestamp as dbt_created_at from mock_payments", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["payment_id"], "time_spine": null}, "model.customer_360.stg_marketing_campaigns": {"database": "cosmos", "schema": "cosmos", "name": "stg_marketing_campaigns", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_marketing_campaigns.sql", "original_file_path": "models/staging/stg_marketing_campaigns.sql", "unique_id": "model.customer_360.stg_marketing_campaigns", "fqn": ["customer_360", "staging", "stg_marketing_campaigns"], "alias": "stg_marketing_campaigns", "checksum": {"name": "sha256", "checksum": "b790853576f7f5150833a5eb05329c77491ce37c39a9672b8fb84302abf3670a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "marketing", "campaigns"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "marketing", "campaigns"], "description": "Staging model for marketing campaigns", "columns": {"campaign_response_id": {"name": "campaign_response_id", "description": "Primary key for campaign response", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "marketing", "campaigns"]}, "created_at": 1755857463.3874612, "relation_name": "\"cosmos\".\"cosmos\".\"stg_marketing_campaigns\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['bronze', 'staging', 'marketing', 'campaigns']\n) }}\n\nwith mock_campaigns as (\n    select\n        series_value as campaign_response_id,\n        'CAMP' || lpad(((series_value - 1) / {{ var('num_customers') }} + 1)::text, 6, '0') as campaign_id,\n        ((series_value - 1) % {{ var('num_customers') }}) + 1 as customer_id,\n        \n        case \n            when ((series_value - 1) / {{ var('num_customers') }}) % 6 = 0 then 'CREDIT_CARD_OFFER'\n            when ((series_value - 1) / {{ var('num_customers') }}) % 6 = 1 then 'SAVINGS_PROMOTION'\n            when ((series_value - 1) / {{ var('num_customers') }}) % 6 = 2 then 'LOAN_OFFER'\n            when ((series_value - 1) / {{ var('num_customers') }}) % 6 = 3 then 'INVESTMENT_SEMINAR'\n            when ((series_value - 1) / {{ var('num_customers') }}) % 6 = 4 then 'INSURANCE_QUOTE'\n            else 'DIGITAL_BANKING'\n        end as campaign_type,\n        \n        case \n            when series_value % 4 = 1 then 'EMAIL'\n            when series_value % 4 = 2 then 'DIRECT_MAIL'\n            when series_value % 4 = 3 then 'PHONE'\n            else 'DIGITAL_AD'\n        end as channel,\n        \n        '2024-01-01'::date + (series_value % 365) * interval '1 day' as sent_date,\n        \n        case \n            when series_value % 3 = 1 then 'OPENED'\n            when series_value % 5 = 1 then 'CLICKED'\n            when series_value % 10 = 1 then 'CONVERTED'\n            else 'NO_RESPONSE'\n        end as response_type,\n        \n        case when series_value % 20 = 1 then true else false end as resulted_in_sale,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * 6)::int) as series_value\n),\n\nenriched_campaigns as (\n    select\n        mc.*,\n        \n        case \n            when mc.response_type = 'CONVERTED' then 'HIGH_ENGAGEMENT'\n            when mc.response_type = 'CLICKED' then 'MEDIUM_ENGAGEMENT'\n            when mc.response_type = 'OPENED' then 'LOW_ENGAGEMENT'\n            else 'NO_ENGAGEMENT'\n        end as engagement_level,\n        \n        case \n            when mc.channel in ('EMAIL', 'DIGITAL_AD') then 'DIGITAL'\n            else 'TRADITIONAL'\n        end as channel_type,\n        \n        current_timestamp as dbt_created_at\n        \n    from mock_campaigns mc\n)\n\nselect * from enriched_campaigns", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["campaign_response_id"], "time_spine": null}, "model.customer_360.stg_transfers": {"database": "cosmos", "schema": "cosmos", "name": "stg_transfers", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_transfers.sql", "original_file_path": "models/staging/stg_transfers.sql", "unique_id": "model.customer_360.stg_transfers", "fqn": ["customer_360", "staging", "stg_transfers"], "alias": "stg_transfers", "checksum": {"name": "sha256", "checksum": "e6b9698038412808a7d9f0d9d84a558a1ea57763dbc65d115f7c06afbfb65004"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "transfers"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "transfers"], "description": "Staging model for transfer transactions", "columns": {"transfer_id": {"name": "transfer_id", "description": "Primary key for transfer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "transfers"]}, "created_at": 1755857463.38371, "relation_name": "\"cosmos\".\"cosmos\".\"stg_transfers\"", "raw_code": "{{ config(materialized='view', tags=['bronze', 'staging', 'transfers']) }}\n\nwith mock_transfers as (\n    select\n        series_value as transfer_id,\n        ((series_value - 1) % ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }})::int) + 1 as from_account_id,\n        (((series_value + 3) - 1) % ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }})::int) + 1 as to_account_id,\n        \n        (50 + (series_value % 4950))::numeric(10,2) as transfer_amount,\n        '2024-01-01'::date + (series_value % 365) * interval '1 day' as transfer_date,\n        \n        case \n            when series_value % 30 = 1 then 'FAILED'\n            else 'COMPLETED'\n        end as transfer_status,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }} * 5)::int) as series_value\n)\n\nselect *, current_timestamp as dbt_created_at from mock_transfers", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["transfer_id"], "time_spine": null}, "model.customer_360.stg_compliance_records": {"database": "cosmos", "schema": "cosmos", "name": "stg_compliance_records", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_compliance_records.sql", "original_file_path": "models/staging/stg_compliance_records.sql", "unique_id": "model.customer_360.stg_compliance_records", "fqn": ["customer_360", "staging", "stg_compliance_records"], "alias": "stg_compliance_records", "checksum": {"name": "sha256", "checksum": "14f8462faab6c919dbb0e8f5f8eb826ef166368f486a26035b2c08a18c02cfc7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "compliance"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "compliance"], "description": "Staging model for compliance tracking", "columns": {"compliance_id": {"name": "compliance_id", "description": "Primary key for compliance record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "compliance"]}, "created_at": 1755857463.389857, "relation_name": "\"cosmos\".\"cosmos\".\"stg_compliance_records\"", "raw_code": "{{ config(materialized='view', tags=['bronze', 'staging', 'compliance']) }}\n\nwith mock_compliance as (\n    select\n        series_value as compliance_id,\n        ((series_value - 1) % {{ var('num_customers') }}) + 1 as customer_id,\n        \n        case \n            when series_value % 4 = 1 then 'AML_SCREENING'\n            when series_value % 4 = 2 then 'SANCTIONS_CHECK'\n            when series_value % 4 = 3 then 'PEP_SCREENING'\n            else 'ADVERSE_MEDIA'\n        end as compliance_type,\n        \n        '2024-01-01'::date - (series_value % 730) * interval '1 day' as check_date,\n        \n        case \n            when series_value % 50 = 1 then 'FLAGGED'\n            else 'CLEAR'\n        end as compliance_status,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * 4)::int) as series_value\n)\n\nselect *, current_timestamp as dbt_created_at from mock_compliance", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["compliance_id"], "time_spine": null}, "model.customer_360.stg_account_alerts": {"database": "cosmos", "schema": "cosmos", "name": "stg_account_alerts", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_account_alerts.sql", "original_file_path": "models/staging/stg_account_alerts.sql", "unique_id": "model.customer_360.stg_account_alerts", "fqn": ["customer_360", "staging", "stg_account_alerts"], "alias": "stg_account_alerts", "checksum": {"name": "sha256", "checksum": "ae0a0ee9f9cba45e59eb5916710e3fc6485c2ab8db100aee945fef6df1b22acb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "alerts"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "alerts"], "description": "Staging model for account alerts", "columns": {"alert_id": {"name": "alert_id", "description": "Primary key for alert", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "alerts"]}, "created_at": 1755857463.390412, "relation_name": "\"cosmos\".\"cosmos\".\"stg_account_alerts\"", "raw_code": "{{ config(materialized='view', tags=['bronze', 'staging', 'alerts']) }}\n\nwith mock_alerts as (\n    select\n        series_value as alert_id,\n        ((series_value - 1) % ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }})::int) + 1 as account_id,\n        \n        case \n            when series_value % 5 = 1 then 'LOW_BALANCE'\n            when series_value % 5 = 2 then 'LARGE_DEPOSIT'\n            when series_value % 5 = 3 then 'UNUSUAL_ACTIVITY'\n            when series_value % 5 = 4 then 'PAYMENT_DUE'\n            else 'RATE_CHANGE'\n        end as alert_type,\n        \n        '2024-01-01'::timestamp + (series_value % 365) * interval '1 day' as alert_timestamp,\n        \n        case \n            when series_value % 10 = 1 then 'DISMISSED'\n            when series_value % 20 = 1 then 'ACTIONED'\n            else 'PENDING'\n        end as alert_status,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }} * 6)::int) as series_value\n)\n\nselect *, current_timestamp as dbt_created_at from mock_alerts", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["alert_id"], "time_spine": null}, "model.customer_360.stg_channel_usage": {"database": "cosmos", "schema": "cosmos", "name": "stg_channel_usage", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_channel_usage.sql", "original_file_path": "models/staging/stg_channel_usage.sql", "unique_id": "model.customer_360.stg_channel_usage", "fqn": ["customer_360", "staging", "stg_channel_usage"], "alias": "stg_channel_usage", "checksum": {"name": "sha256", "checksum": "010684878bce9834b2b43f212265a912f9bd3b875fa3dc41f1c403b394890dea"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "channels"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "channels"], "description": "Staging model for channel usage metrics", "columns": {"usage_id": {"name": "usage_id", "description": "Primary key for usage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "channels"]}, "created_at": 1755857463.388108, "relation_name": "\"cosmos\".\"cosmos\".\"stg_channel_usage\"", "raw_code": "{{ config(materialized='view', tags=['bronze', 'staging', 'channels']) }}\n\nwith mock_usage as (\n    select\n        series_value as usage_id,\n        ((series_value - 1) % {{ var('num_customers') }}) + 1 as customer_id,\n        \n        case \n            when series_value % 5 = 1 then 'ONLINE'\n            when series_value % 5 = 2 then 'MOBILE'\n            when series_value % 5 = 3 then 'ATM'\n            when series_value % 5 = 4 then 'BRANCH'\n            else 'PHONE'\n        end as channel_type,\n        \n        (1 + (series_value % 50)) as usage_count,\n        '2024-01-01'::date + (series_value % 365) * interval '1 day' as usage_date,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * 10)::int) as series_value\n)\n\nselect *, current_timestamp as dbt_created_at from mock_usage", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["usage_id"], "time_spine": null}, "model.customer_360.stg_customer_segments": {"database": "cosmos", "schema": "cosmos", "name": "stg_customer_segments", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_customer_segments.sql", "original_file_path": "models/staging/stg_customer_segments.sql", "unique_id": "model.customer_360.stg_customer_segments", "fqn": ["customer_360", "staging", "stg_customer_segments"], "alias": "stg_customer_segments", "checksum": {"name": "sha256", "checksum": "9ee4dc8fdd93c5eb5616fc0582aec6eba1a6f11201ee70e416930b5239a8fd5d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "segments"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "segments"], "description": "Staging model for customer segmentation", "columns": {"segment_id": {"name": "segment_id", "description": "Primary key for segment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "segments"]}, "created_at": 1755857463.3885372, "relation_name": "\"cosmos\".\"cosmos\".\"stg_customer_segments\"", "raw_code": "{{ config(materialized='view', tags=['bronze', 'staging', 'segments']) }}\n\nwith mock_segments as (\n    select\n        series_value as segment_id,\n        ((series_value - 1) % {{ var('num_customers') }}) + 1 as customer_id,\n        \n        case \n            when series_value % 6 = 1 then 'PREMIUM'\n            when series_value % 6 = 2 then 'MASS_AFFLUENT'\n            when series_value % 6 = 3 then 'EMERGING_AFFLUENT'\n            when series_value % 6 = 4 then 'MASS_MARKET'\n            when series_value % 6 = 5 then 'YOUNG_PROFESSIONAL'\n            else 'STUDENT'\n        end as segment_name,\n        \n        '2024-01-01'::date + (series_value % 365) * interval '1 day' as segment_date,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * 2)::int) as series_value\n)\n\nselect *, current_timestamp as dbt_created_at from mock_segments", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["segment_id"], "time_spine": null}, "model.customer_360.stg_investments": {"database": "cosmos", "schema": "cosmos", "name": "stg_investments", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_investments.sql", "original_file_path": "models/staging/stg_investments.sql", "unique_id": "model.customer_360.stg_investments", "fqn": ["customer_360", "staging", "stg_investments"], "alias": "stg_investments", "checksum": {"name": "sha256", "checksum": "270b3b122287ba5ff214c671cb7775879d362709f6283b8eeefecf191ffe59b9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "investments", "wealth"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "investments", "wealth"], "description": "Staging model for investment holdings", "columns": {"holding_id": {"name": "holding_id", "description": "Primary key for holding", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "investments", "wealth"]}, "created_at": 1755857463.386477, "relation_name": "\"cosmos\".\"cosmos\".\"stg_investments\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['bronze', 'staging', 'investments', 'wealth']\n) }}\n\n/*\n    Staging model for investment holdings\n    \n    Tracks portfolio holdings across asset classes\n    with performance and risk analytics.\n*/\n\nwith mock_investments as (\n    select\n        series_value as holding_id,\n        'INV' || lpad(series_value::text, 8, '0') as holding_number,\n        \n        -- Link to customers (subset have investments)\n        ((series_value - 1) % ({{ var('num_customers') }} * 0.4)::int) + 1 as customer_id,\n        \n        -- Investment types\n        case \n            when series_value % 6 = 1 then 'STOCK'\n            when series_value % 6 = 2 then 'BOND'\n            when series_value % 6 = 3 then 'MUTUAL_FUND'\n            when series_value % 6 = 4 then 'ETF'\n            when series_value % 6 = 5 then 'CD'\n            else 'MONEY_MARKET'\n        end as investment_type,\n        \n        -- Asset symbols/names\n        case \n            when series_value % 6 = 1 then  -- Stocks\n                case \n                    when series_value % 10 = 1 then 'AAPL'\n                    when series_value % 10 = 2 then 'MSFT'\n                    when series_value % 10 = 3 then 'GOOGL'\n                    when series_value % 10 = 4 then 'AMZN'\n                    when series_value % 10 = 5 then 'TSLA'\n                    else 'SPY'\n                end\n            when series_value % 6 = 2 then 'US_TREASURY_10YR'  -- Bonds\n            when series_value % 6 = 3 then 'VANGUARD_500'      -- Mutual funds\n            when series_value % 6 = 4 then 'VTI'               -- ETFs\n            when series_value % 6 = 5 then 'BANK_CD_5YR'       -- CDs\n            else 'MONEY_MARKET_FUND'                            -- Money market\n        end as symbol,\n        \n        -- Holdings\n        case \n            when series_value % 6 in (1, 4) then (series_value % 1000) + 1     -- Shares for stocks/ETFs\n            when series_value % 6 = 2 then (series_value % 100000) + 1000      -- Bond face value\n            when series_value % 6 = 3 then round((series_value % 50000 + 1000)::numeric, 2)  -- Mutual fund shares\n            when series_value % 6 = 5 then (series_value % 100000) + 5000      -- CD amounts\n            else round((series_value % 50000 + 1000)::numeric, 2)              -- Money market shares\n        end as quantity,\n        \n        -- Purchase info\n        case \n            when series_value % 6 = 1 then round((100 + (series_value % 900))::numeric, 2)     -- Stock prices\n            when series_value % 6 = 2 then round((95 + (series_value % 10))::numeric, 2)       -- Bond prices\n            when series_value % 6 = 3 then round((15 + (series_value % 85))::numeric, 2)       -- Mutual fund NAV\n            when series_value % 6 = 4 then round((50 + (series_value % 450))::numeric, 2)      -- ETF prices\n            when series_value % 6 = 5 then 1.0                                                  -- CD (par value)\n            else 1.0                                                                             -- Money market\n        end as purchase_price,\n        \n        -- Current market values\n        case \n            when series_value % 6 = 1 then round((90 + (series_value % 920))::numeric, 2)      -- Stock current\n            when series_value % 6 = 2 then round((93 + (series_value % 15))::numeric, 2)       -- Bond current\n            when series_value % 6 = 3 then round((14 + (series_value % 90))::numeric, 2)       -- Mutual fund current\n            when series_value % 6 = 4 then round((48 + (series_value % 460))::numeric, 2)      -- ETF current\n            when series_value % 6 = 5 then 1.0                                                  -- CD (stable)\n            else 1.0                                                                             -- Money market\n        end as current_price,\n        \n        -- Purchase date\n        '2020-01-01'::date + (series_value % 1460) * interval '1 day' as purchase_date,\n        \n        -- Account types\n        case \n            when series_value % 4 = 1 then 'TAXABLE'\n            when series_value % 4 = 2 then 'IRA'\n            when series_value % 4 = 3 then 'ROTH_IRA'\n            else '401K'\n        end as account_type,\n        \n        -- Risk ratings\n        case \n            when series_value % 6 = 1 then  -- Stocks\n                case when series_value % 3 = 1 then 'HIGH' else 'MEDIUM' end\n            when series_value % 6 = 2 then 'LOW'        -- Bonds\n            when series_value % 6 = 3 then 'MEDIUM'     -- Mutual funds\n            when series_value % 6 = 4 then 'MEDIUM'     -- ETFs\n            else 'LOW'                                   -- CDs/Money market\n        end as risk_rating,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * 0.4 * 12)::int) as series_value\n),\n\nbase_investments as (\n    select\n        holding_id,\n        holding_number,\n        customer_id,\n        \n        -- Investment details\n        upper(investment_type) as investment_type,\n        upper(symbol) as symbol,\n        quantity,\n        purchase_price,\n        current_price,\n        purchase_date,\n        upper(account_type) as account_type,\n        upper(risk_rating) as risk_rating,\n        \n        -- Calculated values\n        round((quantity * purchase_price)::numeric, 2) as purchase_value,\n        round((quantity * current_price)::numeric, 2) as current_value,\n        round((quantity * current_price - quantity * purchase_price)::numeric, 2) as unrealized_gain_loss,\n        \n        -- Performance calculations\n        case \n            when purchase_price > 0 then \n                round(((current_price - purchase_price) / purchase_price * 100)::numeric, 2)\n            else 0\n        end as return_percent,\n        \n        -- Time calculations\n        date_part('year', age(current_date, purchase_date))::int as holding_years,\n        \n        last_updated,\n        current_timestamp as dbt_created_at\n        \n    from mock_investments\n),\n\nenriched_investments as (\n    select\n        bi.*,\n        \n        -- Asset classification\n        case \n            when bi.investment_type in ('STOCK', 'ETF') then 'EQUITY'\n            when bi.investment_type = 'BOND' then 'FIXED_INCOME'\n            when bi.investment_type = 'MUTUAL_FUND' then 'POOLED_INVESTMENT'\n            when bi.investment_type in ('CD', 'MONEY_MARKET') then 'CASH_EQUIVALENT'\n            else 'OTHER'\n        end as asset_class,\n        \n        -- Performance categories\n        case \n            when bi.return_percent >= 20 then 'STRONG_PERFORMER'\n            when bi.return_percent >= 10 then 'GOOD_PERFORMER'\n            when bi.return_percent >= 0 then 'MODERATE_PERFORMER'\n            when bi.return_percent >= -10 then 'POOR_PERFORMER'\n            else 'SIGNIFICANT_LOSS'\n        end as performance_category,\n        \n        -- Size categories\n        case \n            when bi.current_value >= 100000 then 'LARGE_HOLDING'\n            when bi.current_value >= 25000 then 'MEDIUM_HOLDING'\n            when bi.current_value >= 5000 then 'SMALL_HOLDING'\n            else 'MINIMAL_HOLDING'\n        end as holding_size,\n        \n        -- Tax implications\n        case \n            when bi.account_type = 'TAXABLE' and bi.unrealized_gain_loss > 0 then 'TAXABLE_GAIN'\n            when bi.account_type = 'TAXABLE' and bi.unrealized_gain_loss < 0 then 'TAX_LOSS_HARVEST'\n            when bi.account_type in ('IRA', 'ROTH_IRA', '401K') then 'TAX_DEFERRED'\n            else 'NO_TAX_IMPACT'\n        end as tax_status,\n        \n        -- Risk-adjusted metrics\n        case \n            when bi.risk_rating = 'HIGH' and bi.return_percent > 15 then 'HIGH_RISK_HIGH_RETURN'\n            when bi.risk_rating = 'HIGH' and bi.return_percent < 0 then 'HIGH_RISK_POOR_RETURN'\n            when bi.risk_rating = 'LOW' and bi.return_percent > 5 then 'LOW_RISK_GOOD_RETURN'\n            when bi.risk_rating = 'LOW' and bi.return_percent < 0 then 'LOW_RISK_POOR_RETURN'\n            else 'MODERATE_RISK_RETURN'\n        end as risk_return_profile,\n        \n        -- Liquidity assessment\n        case \n            when bi.investment_type in ('STOCK', 'ETF') then 'HIGH_LIQUIDITY'\n            when bi.investment_type = 'MUTUAL_FUND' then 'MEDIUM_LIQUIDITY'\n            when bi.investment_type = 'BOND' then 'MEDIUM_LIQUIDITY'\n            when bi.investment_type = 'CD' then 'LOW_LIQUIDITY'\n            else 'HIGH_LIQUIDITY'\n        end as liquidity_level,\n        \n        -- Investment tenure\n        case \n            when bi.holding_years >= 5 then 'LONG_TERM'\n            when bi.holding_years >= 2 then 'MEDIUM_TERM'\n            when bi.holding_years >= 1 then 'SHORT_TERM'\n            else 'VERY_SHORT_TERM'\n        end as tenure_category,\n        \n        -- Portfolio flags\n        case \n            when bi.current_value >= 50000 then true \n            else false \n        end as is_major_holding,\n        \n        case \n            when bi.return_percent < -20 then true \n            else false \n        end as requires_review\n        \n    from base_investments bi\n)\n\nselect * from enriched_investments", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["holding_id"], "time_spine": null}, "model.customer_360.stg_fraud_alerts": {"database": "cosmos", "schema": "cosmos", "name": "stg_fraud_alerts", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_fraud_alerts.sql", "original_file_path": "models/staging/stg_fraud_alerts.sql", "unique_id": "model.customer_360.stg_fraud_alerts", "fqn": ["customer_360", "staging", "stg_fraud_alerts"], "alias": "stg_fraud_alerts", "checksum": {"name": "sha256", "checksum": "eaa93b409e6b59ff96ed1c749f1b306d9388f46956a818ce0a189baa6e598a79"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "fraud"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "fraud"], "description": "Staging model for fraud detection alerts", "columns": {"alert_id": {"name": "alert_id", "description": "Primary key for alert", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "fraud"]}, "created_at": 1755857463.390193, "relation_name": "\"cosmos\".\"cosmos\".\"stg_fraud_alerts\"", "raw_code": "{{ config(materialized='view', tags=['bronze', 'staging', 'fraud']) }}\n\nwith mock_fraud as (\n    select\n        series_value as alert_id,\n        ((series_value - 1) % {{ var('num_customers') }}) + 1 as customer_id,\n        \n        case \n            when series_value % 5 = 1 then 'UNUSUAL_TRANSACTION'\n            when series_value % 5 = 2 then 'LOCATION_ANOMALY'\n            when series_value % 5 = 3 then 'VELOCITY_CHECK'\n            when series_value % 5 = 4 then 'MERCHANT_RISK'\n            else 'BEHAVIORAL_PATTERN'\n        end as alert_type,\n        \n        (1 + (series_value % 100)) as risk_score,\n        '2024-01-01'::timestamp + (series_value % 365) * interval '1 day' as alert_timestamp,\n        \n        case \n            when series_value % 20 = 1 then 'CONFIRMED_FRAUD'\n            when series_value % 10 = 1 then 'FALSE_POSITIVE'\n            else 'UNDER_REVIEW'\n        end as alert_status,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * 3)::int) as series_value\n)\n\nselect *, current_timestamp as dbt_created_at from mock_fraud", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["alert_id"], "time_spine": null}, "model.customer_360.stg_insurance_policies": {"database": "cosmos", "schema": "cosmos", "name": "stg_insurance_policies", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_insurance_policies.sql", "original_file_path": "models/staging/stg_insurance_policies.sql", "unique_id": "model.customer_360.stg_insurance_policies", "fqn": ["customer_360", "staging", "stg_insurance_policies"], "alias": "stg_insurance_policies", "checksum": {"name": "sha256", "checksum": "c7b0463808a68cc3c2ff989a258cb97ba50ae6f7ced1ac283b44a22a61a5930c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "insurance", "coverage"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "insurance", "coverage"], "description": "Staging model for insurance policies", "columns": {"policy_id": {"name": "policy_id", "description": "Primary key for policy", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "insurance", "coverage"]}, "created_at": 1755857463.3868082, "relation_name": "\"cosmos\".\"cosmos\".\"stg_insurance_policies\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['bronze', 'staging', 'insurance', 'coverage']\n) }}\n\nwith mock_policies as (\n    select\n        series_value as policy_id,\n        'POL' || lpad(series_value::text, 8, '0') as policy_number,\n        ((series_value - 1) % {{ var('num_customers') }}) + 1 as customer_id,\n        \n        case \n            when series_value % 4 = 1 then 'LIFE'\n            when series_value % 4 = 2 then 'AUTO'\n            when series_value % 4 = 3 then 'HOME'\n            else 'HEALTH'\n        end as policy_type,\n        \n        case \n            when series_value % 4 = 1 then (50000 + (series_value % 950000))::numeric(12,2)  -- Life coverage\n            when series_value % 4 = 2 then (25000 + (series_value % 75000))::numeric(12,2)   -- Auto coverage\n            when series_value % 4 = 3 then (200000 + (series_value % 800000))::numeric(12,2) -- Home coverage\n            else (5000 + (series_value % 45000))::numeric(12,2)                              -- Health coverage\n        end as coverage_amount,\n        \n        case \n            when series_value % 4 = 1 then (200 + (series_value % 1800))::numeric(8,2)  -- Life premium\n            when series_value % 4 = 2 then (800 + (series_value % 2200))::numeric(8,2)  -- Auto premium\n            when series_value % 4 = 3 then (1200 + (series_value % 2800))::numeric(8,2) -- Home premium\n            else (400 + (series_value % 1600))::numeric(8,2)                             -- Health premium\n        end as annual_premium,\n        \n        '2020-01-01'::date + (series_value % 1460) * interval '1 day' as policy_start_date,\n        \n        case \n            when series_value % 20 = 1 then 'CANCELLED'\n            when series_value % 15 = 1 then 'LAPSED'\n            when series_value % 10 = 1 then 'SUSPENDED'\n            else 'ACTIVE'\n        end as policy_status,\n        \n        (series_value % 5) as claims_count,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * 0.8)::int) as series_value\n),\n\nenriched_policies as (\n    select\n        mp.*,\n        mp.policy_start_date + interval '1 year' as policy_end_date,\n        date_part('year', age(current_date, mp.policy_start_date))::int as policy_age_years,\n        \n        case \n            when mp.claims_count = 0 then 'NO_CLAIMS'\n            when mp.claims_count <= 2 then 'LOW_CLAIMS'\n            when mp.claims_count <= 4 then 'MODERATE_CLAIMS'\n            else 'HIGH_CLAIMS'\n        end as claims_category,\n        \n        case \n            when mp.annual_premium > 0 and mp.coverage_amount > 0 then \n                round((mp.annual_premium / mp.coverage_amount * 100)::numeric, 4)\n            else 0\n        end as premium_rate_percent,\n        \n        current_timestamp as dbt_created_at\n        \n    from mock_policies mp\n)\n\nselect * from enriched_policies", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["policy_id"], "time_spine": null}, "model.customer_360.stg_account_balances": {"database": "cosmos", "schema": "cosmos", "name": "stg_account_balances", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_account_balances.sql", "original_file_path": "models/staging/stg_account_balances.sql", "unique_id": "model.customer_360.stg_account_balances", "fqn": ["customer_360", "staging", "stg_account_balances"], "alias": "stg_account_balances", "checksum": {"name": "sha256", "checksum": "fe47a5ab0131dd3c5022227a94cc15ef4d7a33984da189f02e363f269f1e7220"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "balances"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "balances"], "description": "Staging model for account balances", "columns": {"balance_id": {"name": "balance_id", "description": "Primary key for balance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "balances"]}, "created_at": 1755857463.384911, "relation_name": "\"cosmos\".\"cosmos\".\"stg_account_balances\"", "raw_code": "{{ config(materialized='view', tags=['bronze', 'staging', 'balances']) }}\n\nwith mock_balances as (\n    select\n        series_value as balance_id,\n        ((series_value - 1) % ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }})::int) + 1 as account_id,\n        \n        (1000 + (series_value % 49000))::numeric(12,2) as balance_amount,\n        (500 + (series_value % 2500))::numeric(12,2) as available_balance,\n        \n        '2024-01-01'::date + (series_value % 365) * interval '1 day' as balance_date,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }} * 30)::int) as series_value\n)\n\nselect \n    *,\n    case \n        when balance_amount >= 50000 then 'HIGH_BALANCE'\n        when balance_amount >= 10000 then 'MEDIUM_BALANCE'\n        else 'LOW_BALANCE'\n    end as balance_category,\n    current_timestamp as dbt_created_at\nfrom mock_balances", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["balance_id"], "time_spine": null}, "model.customer_360.stg_interest_accruals": {"database": "cosmos", "schema": "cosmos", "name": "stg_interest_accruals", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_interest_accruals.sql", "original_file_path": "models/staging/stg_interest_accruals.sql", "unique_id": "model.customer_360.stg_interest_accruals", "fqn": ["customer_360", "staging", "stg_interest_accruals"], "alias": "stg_interest_accruals", "checksum": {"name": "sha256", "checksum": "c3df2f7275516b0c23b8c5c5f3f17da1af886f76a79ffa60d2355f13a52fca66"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "interest"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "interest"], "description": "Staging model for interest accruals", "columns": {"accrual_id": {"name": "accrual_id", "description": "Primary key for accrual", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "interest"]}, "created_at": 1755857463.384588, "relation_name": "\"cosmos\".\"cosmos\".\"stg_interest_accruals\"", "raw_code": "{{ config(materialized='view', tags=['bronze', 'staging', 'interest']) }}\n\nwith mock_interest as (\n    select\n        series_value as accrual_id,\n        ((series_value - 1) % ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }})::int) + 1 as account_id,\n        \n        (1 + (series_value % 500))::numeric(8,2) as interest_amount,\n        (1.5 + (series_value % 35) / 10.0) as interest_rate,\n        \n        '2024-01-01'::date + (series_value % 365) * interval '1 day' as accrual_date,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * {{ var('num_accounts_multiplier') }} * 12)::int) as series_value\n)\n\nselect *, current_timestamp as dbt_created_at from mock_interest", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["accrual_id"], "time_spine": null}, "model.customer_360.stg_customer_interactions": {"database": "cosmos", "schema": "cosmos", "name": "stg_customer_interactions", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_customer_interactions.sql", "original_file_path": "models/staging/stg_customer_interactions.sql", "unique_id": "model.customer_360.stg_customer_interactions", "fqn": ["customer_360", "staging", "stg_customer_interactions"], "alias": "stg_customer_interactions", "checksum": {"name": "sha256", "checksum": "9c93874314e75505065bcc91ca54399c6f7faf02f518b9ed5e396cc502099822"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "customer_service", "interactions"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "customer_service", "interactions"], "description": "Staging model for customer service interactions", "columns": {"interaction_id": {"name": "interaction_id", "description": "Primary key for interaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "customer_service", "interactions"]}, "created_at": 1755857463.387137, "relation_name": "\"cosmos\".\"cosmos\".\"stg_customer_interactions\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['bronze', 'staging', 'customer_service', 'interactions']\n) }}\n\n/*\n    Staging model for customer service interactions\n    \n    Tracks all customer touchpoints across channels\n    with resolution metrics and satisfaction scoring.\n*/\n\nwith mock_interactions as (\n    select\n        series_value as interaction_id,\n        'INT' || lpad(series_value::text, 8, '0') as interaction_number,\n        \n        -- Link to customers \n        ((series_value - 1) % {{ var('num_customers') }}) + 1 as customer_id,\n        \n        -- Interaction types\n        case \n            when series_value % 5 = 1 then 'PHONE_CALL'\n            when series_value % 5 = 2 then 'EMAIL'\n            when series_value % 5 = 3 then 'CHAT'\n            when series_value % 5 = 4 then 'BRANCH_VISIT'\n            else 'SOCIAL_MEDIA'\n        end as interaction_type,\n        \n        -- Reason codes\n        case \n            when series_value % 8 = 1 then 'ACCOUNT_INQUIRY'\n            when series_value % 8 = 2 then 'TRANSACTION_DISPUTE'\n            when series_value % 8 = 3 then 'CARD_ISSUE'\n            when series_value % 8 = 4 then 'LOAN_QUESTION'\n            when series_value % 8 = 5 then 'FEES_COMPLAINT'\n            when series_value % 8 = 6 then 'TECHNICAL_SUPPORT'\n            when series_value % 8 = 7 then 'PRODUCT_INFORMATION'\n            else 'GENERAL_INQUIRY'\n        end as reason_code,\n        \n        -- Status\n        case \n            when series_value % 20 = 1 then 'ESCALATED'\n            when series_value % 15 = 1 then 'PENDING'\n            when series_value % 10 = 1 then 'REOPENED'\n            else 'RESOLVED'\n        end as status,\n        \n        -- Priority\n        case \n            when series_value % 20 = 1 then 'URGENT'\n            when series_value % 10 = 1 then 'HIGH'\n            when series_value % 5 = 1 then 'MEDIUM'\n            else 'LOW'\n        end as priority,\n        \n        -- Timing (distributed over last year)\n        '2024-01-01'::timestamp + (series_value % 365) * interval '1 day' + \n        ((series_value % 8) + 8) * interval '1 hour' + \n        (series_value % 60) * interval '1 minute' as interaction_datetime,\n        \n        -- Duration in minutes\n        case \n            when series_value % 5 = 1 then (series_value % 45) + 5    -- Phone: 5-50 mins\n            when series_value % 5 = 2 then (series_value % 1440) + 60 -- Email: 1-24 hours response\n            when series_value % 5 = 3 then (series_value % 30) + 5    -- Chat: 5-35 mins\n            when series_value % 5 = 4 then (series_value % 60) + 15   -- Branch: 15-75 mins\n            else (series_value % 120) + 30                            -- Social: 30-150 mins\n        end as duration_minutes,\n        \n        -- Agent info\n        'AGENT' || lpad(((series_value % 25) + 1)::text, 3, '0') as agent_id,\n        case \n            when series_value % 4 = 1 then 'TIER_1'\n            when series_value % 4 = 2 then 'TIER_2'\n            when series_value % 4 = 3 then 'SPECIALIST'\n            else 'SUPERVISOR'\n        end as agent_tier,\n        \n        -- Resolution info\n        case \n            when series_value % 10 = 1 then (series_value % 5) + 1  -- Multiple contacts\n            else 1\n        end as contact_count,\n        \n        -- Satisfaction (1-5 scale, not always provided)\n        case \n            when series_value % 3 = 1 then (series_value % 5) + 1\n            else null\n        end as satisfaction_score,\n        \n        -- Flags\n        case when series_value % 15 = 1 then true else false end as was_escalated,\n        case when series_value % 12 = 1 then true else false end as required_followup,\n        case when series_value % 8 = 1 then true else false end as resulted_in_retention,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * 8)::int) as series_value\n),\n\nbase_interactions as (\n    select\n        interaction_id,\n        interaction_number,\n        customer_id,\n        \n        -- Interaction details\n        upper(interaction_type) as interaction_type,\n        upper(reason_code) as reason_code,\n        upper(status) as status,\n        upper(priority) as priority,\n        \n        -- Timing\n        interaction_datetime,\n        interaction_datetime::date as interaction_date,\n        extract(hour from interaction_datetime) as interaction_hour,\n        extract(dow from interaction_datetime) as day_of_week,\n        duration_minutes,\n        \n        -- Agent info\n        agent_id,\n        upper(agent_tier) as agent_tier,\n        \n        -- Resolution metrics\n        contact_count,\n        satisfaction_score,\n        \n        -- Flags\n        was_escalated,\n        required_followup,\n        resulted_in_retention,\n        \n        -- Calculated fields\n        case \n            when duration_minutes <= 15 then 'QUICK'\n            when duration_minutes <= 60 then 'STANDARD'\n            when duration_minutes <= 120 then 'EXTENDED'\n            else 'LENGTHY'\n        end as duration_category,\n        \n        last_updated,\n        current_timestamp as dbt_created_at\n        \n    from mock_interactions\n    where status != 'INVALID'\n),\n\nenriched_interactions as (\n    select\n        bi.*,\n        \n        -- Channel analysis\n        case \n            when bi.interaction_type in ('EMAIL', 'CHAT', 'SOCIAL_MEDIA') then 'DIGITAL'\n            when bi.interaction_type = 'PHONE_CALL' then 'VOICE'\n            when bi.interaction_type = 'BRANCH_VISIT' then 'IN_PERSON'\n            else 'OTHER'\n        end as channel_category,\n        \n        -- Time-based patterns\n        case \n            when bi.interaction_hour between 9 and 17 then 'BUSINESS_HOURS'\n            when bi.interaction_hour between 18 and 22 then 'EVENING'\n            when bi.interaction_hour between 6 and 8 then 'MORNING'\n            else 'OFF_HOURS'\n        end as time_category,\n        \n        case \n            when bi.day_of_week in (1, 7) then 'WEEKEND'\n            else 'WEEKDAY'\n        end as day_category,\n        \n        -- Effort scoring\n        case \n            when bi.contact_count > 3 then 'HIGH_EFFORT'\n            when bi.contact_count > 1 then 'MEDIUM_EFFORT'\n            else 'LOW_EFFORT'\n        end as customer_effort,\n        \n        -- Service quality indicators\n        case \n            when bi.satisfaction_score >= 4 then 'SATISFIED'\n            when bi.satisfaction_score >= 3 then 'NEUTRAL'\n            when bi.satisfaction_score >= 1 then 'DISSATISFIED'\n            else 'NOT_RATED'\n        end as satisfaction_category,\n        \n        -- Resolution efficiency\n        case \n            when bi.status = 'RESOLVED' and bi.contact_count = 1 and not bi.was_escalated then 'FIRST_CONTACT_RESOLUTION'\n            when bi.status = 'RESOLVED' and not bi.was_escalated then 'RESOLVED_NO_ESCALATION'\n            when bi.status = 'RESOLVED' and bi.was_escalated then 'RESOLVED_WITH_ESCALATION'\n            when bi.status = 'ESCALATED' then 'UNRESOLVED_ESCALATED'\n            else 'UNRESOLVED_PENDING'\n        end as resolution_type,\n        \n        -- Issue complexity\n        case \n            when bi.reason_code in ('TRANSACTION_DISPUTE', 'LOAN_QUESTION') and bi.was_escalated then 'COMPLEX'\n            when bi.agent_tier in ('SPECIALIST', 'SUPERVISOR') then 'MODERATE'\n            else 'SIMPLE'\n        end as complexity_level,\n        \n        -- Digital adoption indicator\n        case \n            when bi.interaction_type in ('EMAIL', 'CHAT', 'SOCIAL_MEDIA') then true \n            else false \n        end as is_digital_interaction,\n        \n        -- Business impact flags\n        case \n            when bi.reason_code = 'FEES_COMPLAINT' and bi.satisfaction_score <= 2 then true\n            when bi.priority = 'URGENT' and bi.status != 'RESOLVED' then true\n            else false\n        end as high_risk_interaction\n        \n    from base_interactions bi\n)\n\nselect * from enriched_interactions", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["interaction_id"], "time_spine": null}, "model.customer_360.stg_kyc_records": {"database": "cosmos", "schema": "cosmos", "name": "stg_kyc_records", "resource_type": "model", "package_name": "customer_360", "path": "staging/stg_kyc_records.sql", "original_file_path": "models/staging/stg_kyc_records.sql", "unique_id": "model.customer_360.stg_kyc_records", "fqn": ["customer_360", "staging", "stg_kyc_records"], "alias": "stg_kyc_records", "checksum": {"name": "sha256", "checksum": "6f52d038bec01b404d62ee8b6e95f9edc2ab8c6c26ae2bce8d24d735170e1bdf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze", "staging", "bronze", "staging", "kyc"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["bronze", "staging", "kyc"], "description": "Staging model for KYC compliance records", "columns": {"kyc_id": {"name": "kyc_id", "description": "Primary key for KYC record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/staging/staging_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["bronze", "staging", "kyc"]}, "created_at": 1755857463.389525, "relation_name": "\"cosmos\".\"cosmos\".\"stg_kyc_records\"", "raw_code": "{{ config(materialized='view', tags=['bronze', 'staging', 'kyc']) }}\n\nwith mock_kyc as (\n    select\n        series_value as kyc_id,\n        ((series_value - 1) % {{ var('num_customers') }}) + 1 as customer_id,\n        \n        case \n            when series_value % 3 = 1 then 'INITIAL'\n            when series_value % 3 = 2 then 'PERIODIC_REVIEW'\n            else 'ENHANCED_DD'\n        end as kyc_type,\n        \n        '2024-01-01'::date - (series_value % 730) * interval '1 day' as review_date,\n        \n        case \n            when series_value % 20 = 1 then 'FAILED'\n            else 'PASSED'\n        end as status,\n        \n        current_timestamp as last_updated\n        \n    from generate_series(1, ({{ var('num_customers') }} * 3)::int) as series_value\n)\n\nselect *, current_timestamp as dbt_created_at from mock_kyc", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["kyc_id"], "time_spine": null}, "model.customer_360.product_performance_analytics": {"database": "cosmos", "schema": "cosmos", "name": "product_performance_analytics", "resource_type": "model", "package_name": "customer_360", "path": "marts/product_revenue/product_performance_analytics.sql", "original_file_path": "models/marts/product_revenue/product_performance_analytics.sql", "unique_id": "model.customer_360.product_performance_analytics", "fqn": ["customer_360", "marts", "product_revenue", "product_performance_analytics"], "alias": "product_performance_analytics", "checksum": {"name": "sha256", "checksum": "82eeb917f58bbd6b9b7814ba0ed334accb4b4a38826c117075e24497798a257f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["gold", "mart", "gold", "mart", "product_revenue", "gold", "mart", "product", "revenue"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["gold", "mart", "product_revenue", "product", "revenue"], "description": "Comprehensive product performance and revenue analysis for Chief Product Officer. Includes product adoption rates, cross-sell opportunities, product profitability, customer lifecycle product journeys, and channel effectiveness for product sales.\n", "columns": {"analytics_section": {"name": "analytics_section", "description": "Analytics section identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_customers": {"name": "total_customers", "description": "Total customers or product name for next best product analysis", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "deposit_penetration_rate": {"name": "deposit_penetration_rate", "description": "Deposit product penetration rate percentage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cross_sell_performance_status": {"name": "cross_sell_performance_status", "description": "Cross-sell performance assessment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "digital_product_maturity": {"name": "digital_product_maturity", "description": "Digital product adoption maturity level", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recommended_product_strategy": {"name": "recommended_product_strategy", "description": "Recommended product strategy based on analysis", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/marts/marts_schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["gold", "mart", "product", "revenue"]}, "created_at": 1755857463.460882, "relation_name": "\"cosmos\".\"cosmos\".\"product_performance_analytics\"", "raw_code": "{{ config(\n    materialized='table',\n    tags=['gold', 'mart', 'product', 'revenue']\n) }}\n\n/*\n    Product Performance Analytics\n    \n    Comprehensive product performance and revenue analysis:\n    - Product adoption rates and penetration metrics\n    - Cross-sell and upsell opportunity analysis\n    - Product profitability and revenue contribution\n    - Customer lifecycle product journey mapping\n    - Channel effectiveness for product sales\n    \n    Provides Chief Product Officer/Head of Products insights for\n    product strategy, development priorities, and revenue optimization.\n*/\n\nwith product_customer_analysis as (\n    select\n        ppa.customer_id,\n        ppa.product_penetration_score,\n        ppa.digital_adoption_level,\n        ppa.marketing_responsiveness,\n        ppa.cross_sell_opportunity_score,\n        ppa.product_stickiness_score,\n        ppa.next_best_product,\n        \n        -- Customer context\n        cp.customer_value_segment,\n        cp.lifecycle_stage_name,\n        cp.engagement_level,\n        cp.digital_preference,\n        cp.relationship_years,\n        cp.age,\n        \n        -- Financial context\n        cfs.total_relationship_value,\n        cfs.wealth_tier,\n        cfs.total_deposit_accounts,\n        cfs.total_cards,\n        cfs.total_loans,\n        cfs.total_investments,\n        cfs.net_worth_with_bank,\n        \n        -- Account performance\n        apd.account_profitability_score,\n        apd.account_health_score,\n        apd.product_type as primary_product_type,\n        apd.account_service_tier,\n        \n        -- Channel effectiveness\n        ce.digital_adoption_score,\n        ce.channel_preference,\n        ce.service_satisfaction_score,\n        \n        -- Retention context\n        cra.churn_risk_score,\n        cra.retention_opportunity_score\n        \n    from {{ ref('int_product_penetration_analysis') }} ppa\n    left join {{ ref('int_customer_profile') }} cp on ppa.customer_id = cp.customer_id\n    left join {{ ref('int_customer_financial_summary') }} cfs on ppa.customer_id = cfs.customer_id\n    left join {{ ref('int_account_performance_dashboard') }} apd on ppa.customer_id = apd.customer_id\n    left join {{ ref('int_channel_effectiveness') }} ce on ppa.customer_id = ce.customer_id\n    left join {{ ref('int_customer_retention_analytics') }} cra on ppa.customer_id = cra.customer_id\n),\n\nproduct_portfolio_metrics as (\n    select\n        -- Customer Base Analysis\n        count(*) as total_customers,\n        count(case when total_deposit_accounts > 0 then 1 end) as deposit_account_customers,\n        count(case when total_cards > 0 then 1 end) as card_customers,\n        count(case when total_loans > 0 then 1 end) as loan_customers,\n        count(case when total_investments > 0 then 1 end) as investment_customers,\n        \n        -- Product Penetration Rates\n        round(count(case when total_deposit_accounts > 0 then 1 end)::numeric / count(*) * 100, 1) as deposit_penetration_rate,\n        round(count(case when total_cards > 0 then 1 end)::numeric / count(*) * 100, 1) as card_penetration_rate,\n        round(count(case when total_loans > 0 then 1 end)::numeric / count(*) * 100, 1) as loan_penetration_rate,\n        round(count(case when total_investments > 0 then 1 end)::numeric / count(*) * 100, 1) as investment_penetration_rate,\n        \n        -- Multi-Product Customers\n        count(case when (case when total_deposit_accounts > 0 then 1 else 0 end) + \n                       (case when total_cards > 0 then 1 else 0 end) + \n                       (case when total_loans > 0 then 1 else 0 end) + \n                       (case when total_investments > 0 then 1 else 0 end) >= 2 then 1 end) as multi_product_customers,\n        count(case when (case when total_deposit_accounts > 0 then 1 else 0 end) + \n                       (case when total_cards > 0 then 1 else 0 end) + \n                       (case when total_loans > 0 then 1 else 0 end) + \n                       (case when total_investments > 0 then 1 else 0 end) >= 3 then 1 end) as premium_product_customers,\n        \n        -- Product Performance Scores\n        avg(product_penetration_score) as avg_product_penetration_score,\n        avg(cross_sell_opportunity_score) as avg_cross_sell_opportunity,\n        avg(product_stickiness_score) as avg_product_stickiness,\n        avg(account_profitability_score) as avg_account_profitability,\n        \n        -- Digital Product Adoption\n        count(case when digital_adoption_level = 'DIGITAL_NATIVE' then 1 end) as digital_native_customers,\n        count(case when digital_adoption_level = 'DIGITAL_ADOPTER' then 1 end) as digital_adopter_customers,\n        count(case when digital_preference in ('DIGITAL_FIRST', 'DIGITAL_PREFERRED') then 1 end) as digital_preferred_customers,\n        round(count(case when digital_preference in ('DIGITAL_FIRST', 'DIGITAL_PREFERRED') then 1 end)::numeric / count(*) * 100, 1) as digital_adoption_rate,\n        \n        -- Cross-sell Opportunities\n        count(case when cross_sell_opportunity_score >= 75 then 1 end) as high_cross_sell_opportunity,\n        count(case when cross_sell_opportunity_score >= 50 then 1 end) as medium_cross_sell_opportunity,\n        \n        -- Customer Value Analysis\n        sum(total_relationship_value) as total_product_portfolio_value,\n        avg(total_relationship_value) as avg_customer_relationship_value\n        \n    from product_customer_analysis\n),\n\nproduct_segment_analysis as (\n    select\n        customer_value_segment,\n        count(*) as segment_customers,\n        \n        -- Product Adoption by Segment\n        avg(product_penetration_score) as avg_penetration_score,\n        round(count(case when total_deposit_accounts > 0 then 1 end)::numeric / count(*) * 100, 1) as deposit_adoption_rate,\n        round(count(case when total_cards > 0 then 1 end)::numeric / count(*) * 100, 1) as card_adoption_rate,\n        round(count(case when total_loans > 0 then 1 end)::numeric / count(*) * 100, 1) as loan_adoption_rate,\n        round(count(case when total_investments > 0 then 1 end)::numeric / count(*) * 100, 1) as investment_adoption_rate,\n        \n        -- Multi-product adoption\n        round(count(case when (case when total_deposit_accounts > 0 then 1 else 0 end) + \n                           (case when total_cards > 0 then 1 else 0 end) + \n                           (case when total_loans > 0 then 1 else 0 end) + \n                           (case when total_investments > 0 then 1 else 0 end) >= 2 then 1 end)::numeric / count(*) * 100, 1) as multi_product_rate,\n        \n        -- Cross-sell potential\n        avg(cross_sell_opportunity_score) as avg_cross_sell_score,\n        count(case when cross_sell_opportunity_score >= 75 then 1 end) as high_cross_sell_count,\n        \n        -- Digital adoption\n        round(count(case when digital_adoption_level in ('DIGITAL_NATIVE', 'DIGITAL_ADOPTER') then 1 end)::numeric / count(*) * 100, 1) as digital_adoption_rate,\n        \n        -- Product stickiness and profitability\n        avg(product_stickiness_score) as avg_stickiness_score,\n        avg(account_profitability_score) as avg_profitability_score,\n        sum(total_relationship_value) as segment_total_value\n        \n    from product_customer_analysis\n    where customer_value_segment is not null\n    group by customer_value_segment\n),\n\nnext_best_product_analysis as (\n    select\n        next_best_product,\n        count(*) as opportunity_count,\n        avg(cross_sell_opportunity_score) as avg_opportunity_score,\n        sum(total_relationship_value) as potential_customer_value,\n        avg(total_relationship_value) as avg_customer_value,\n        round(count(case when digital_adoption_level in ('DIGITAL_NATIVE', 'DIGITAL_ADOPTER') then 1 end)::numeric / count(*) * 100, 1) as digital_ready_rate,\n        count(case when customer_value_segment = 'High Value' then 1 end) as high_value_opportunities\n    from product_customer_analysis\n    where next_best_product is not null\n    group by next_best_product\n),\n\nchannel_product_effectiveness as (\n    select\n        channel_preference,\n        count(*) as customer_count,\n        avg(product_penetration_score) as avg_penetration_score,\n        avg(cross_sell_opportunity_score) as avg_cross_sell_score,\n        avg(service_satisfaction_score) as avg_satisfaction_score,\n        sum(total_relationship_value) as channel_total_value,\n        count(case when cross_sell_opportunity_score >= 75 then 1 end) as high_cross_sell_customers\n    from product_customer_analysis\n    where channel_preference is not null\n    group by channel_preference\n)\n\nselect\n    'PRODUCT_PORTFOLIO_OVERVIEW' as analytics_section,\n    current_date as report_date,\n    \n    -- Portfolio Scale\n    ppm.total_customers,\n    ppm.deposit_account_customers,\n    ppm.card_customers,\n    ppm.loan_customers,\n    ppm.investment_customers,\n    \n    -- Product Penetration Performance\n    ppm.deposit_penetration_rate,\n    ppm.card_penetration_rate,\n    ppm.loan_penetration_rate,\n    ppm.investment_penetration_rate,\n    \n    -- Multi-Product Success\n    ppm.multi_product_customers,\n    round(ppm.multi_product_customers::numeric / ppm.total_customers * 100, 1) as multi_product_rate,\n    ppm.premium_product_customers,\n    round(ppm.premium_product_customers::numeric / ppm.total_customers * 100, 1) as premium_product_rate,\n    \n    -- Product Performance Metrics\n    round(ppm.avg_product_penetration_score::numeric, 1) as avg_product_penetration_score,\n    round(ppm.avg_cross_sell_opportunity::numeric, 1) as avg_cross_sell_opportunity_score,\n    round(ppm.avg_product_stickiness::numeric, 1) as avg_product_stickiness_score,\n    round(ppm.avg_account_profitability::numeric, 1) as avg_account_profitability_score,\n    \n    -- Digital Product Adoption\n    ppm.digital_native_customers,\n    ppm.digital_adopter_customers,\n    ppm.digital_preferred_customers,\n    ppm.digital_adoption_rate,\n    \n    -- Cross-sell Opportunity Pipeline\n    ppm.high_cross_sell_opportunity,\n    ppm.medium_cross_sell_opportunity,\n    round(ppm.high_cross_sell_opportunity::numeric / ppm.total_customers * 100, 1) as high_cross_sell_rate,\n    \n    -- Financial Performance\n    ppm.total_product_portfolio_value,\n    round(ppm.avg_customer_relationship_value::numeric, 0) as avg_customer_relationship_value,\n    \n    -- Strategic Insights\n    case \n        when ppm.total_customers = 0 or ppm.total_customers is null then 'CROSS_SELL_IMPROVEMENT_NEEDED'\n        when ppm.multi_product_customers::numeric / ppm.total_customers >= 0.6 then 'EXCELLENT_CROSS_SELL_PERFORMANCE'\n        when ppm.multi_product_customers::numeric / ppm.total_customers >= 0.4 then 'STRONG_CROSS_SELL_PERFORMANCE'\n        when ppm.multi_product_customers::numeric / ppm.total_customers >= 0.25 then 'MODERATE_CROSS_SELL_PERFORMANCE'\n        else 'CROSS_SELL_IMPROVEMENT_NEEDED'\n    end as cross_sell_performance_status,\n    \n    case \n        when ppm.total_customers = 0 or ppm.total_customers is null then 'DIGITAL_TRANSFORMATION_NEEDED'\n        when ppm.digital_preferred_customers::numeric / ppm.total_customers >= 0.7 then 'DIGITAL_PRODUCT_LEADER'\n        when ppm.digital_preferred_customers::numeric / ppm.total_customers >= 0.5 then 'DIGITAL_PROGRESSIVE'\n        when ppm.digital_preferred_customers::numeric / ppm.total_customers >= 0.3 then 'DIGITAL_DEVELOPING'\n        else 'DIGITAL_TRANSFORMATION_NEEDED'\n    end as digital_product_maturity,\n    \n    case \n        when ppm.investment_penetration_rate >= 25 then 'STRONG_WEALTH_PRODUCTS'\n        when ppm.investment_penetration_rate >= 15 then 'DEVELOPING_WEALTH_PRODUCTS'\n        when ppm.investment_penetration_rate >= 5 then 'EMERGING_WEALTH_PRODUCTS'\n        else 'WEALTH_PRODUCT_OPPORTUNITY'\n    end as wealth_product_performance,\n    \n    -- Recommended Actions\n    case \n        when ppm.total_customers = 0 or ppm.total_customers is null then 'OPTIMIZE_CURRENT_PORTFOLIO'\n        when ppm.high_cross_sell_opportunity >= ppm.total_customers * 0.3 then 'AGGRESSIVE_CROSS_SELL_CAMPAIGN'\n        when ppm.investment_penetration_rate < 15 and ppm.avg_customer_relationship_value > 50000 then 'WEALTH_PRODUCT_FOCUS'\n        when ppm.digital_adoption_rate < 50 then 'DIGITAL_PRODUCT_ENHANCEMENT'\n        when ppm.multi_product_customers::numeric / ppm.total_customers * 100 < 40 then 'PRODUCT_BUNDLING_STRATEGY'\n        else 'OPTIMIZE_CURRENT_PORTFOLIO'\n    end as recommended_product_strategy,\n    \n    -- Priority Product Initiatives\n    case \n        when ppm.loan_penetration_rate < ppm.deposit_penetration_rate * 0.3 then 'LENDING_PRODUCT_EXPANSION'\n        when ppm.card_penetration_rate < 60 then 'PAYMENT_PRODUCT_GROWTH'\n        when ppm.investment_penetration_rate < 20 then 'WEALTH_MANAGEMENT_DEVELOPMENT'\n        else 'PRODUCT_OPTIMIZATION'\n    end as priority_product_focus,\n    \n    current_timestamp as last_updated\n\nfrom product_portfolio_metrics ppm\n\nunion all\n\nselect\n    'SEGMENT_PRODUCT_PERFORMANCE' as analytics_section,\n    current_date as report_date,\n    \n    -- Segment Performance (separate rows for each segment)\n    psa.segment_customers as total_customers,\n    psa.segment_customers as deposit_account_customers,\n    null as card_customers,\n    null as loan_customers,\n    null as investment_customers,\n    \n    psa.deposit_adoption_rate as deposit_penetration_rate,\n    psa.card_adoption_rate as card_penetration_rate,\n    psa.loan_adoption_rate as loan_penetration_rate,\n    psa.investment_adoption_rate as investment_penetration_rate,\n    \n    null as multi_product_customers,\n    psa.multi_product_rate,\n    null as premium_product_customers,\n    null as premium_product_rate,\n    \n    round(psa.avg_penetration_score::numeric, 1) as avg_product_penetration_score,\n    round(psa.avg_cross_sell_score::numeric, 1) as avg_cross_sell_opportunity_score,\n    round(psa.avg_stickiness_score::numeric, 1) as avg_product_stickiness_score,\n    round(psa.avg_profitability_score::numeric, 1) as avg_account_profitability_score,\n    \n    null as digital_native_customers,\n    null as digital_adopter_customers,\n    null as digital_preferred_customers,\n    psa.digital_adoption_rate,\n    \n    psa.high_cross_sell_count as high_cross_sell_opportunity,\n    null as medium_cross_sell_opportunity,\n    round(psa.high_cross_sell_count::numeric / psa.segment_customers * 100, 1) as high_cross_sell_rate,\n    \n    psa.segment_total_value as total_product_portfolio_value,\n    round(psa.segment_total_value / psa.segment_customers::numeric, 0) as avg_customer_relationship_value,\n    \n    case \n        when psa.customer_value_segment = 'High Value' then 'EXCELLENT_CROSS_SELL_PERFORMANCE'\n        when psa.customer_value_segment = 'Medium Value' then 'STRONG_CROSS_SELL_PERFORMANCE'\n        when psa.customer_value_segment = 'Standard Value' then 'MODERATE_CROSS_SELL_PERFORMANCE'\n        when psa.customer_value_segment is null then 'CROSS_SELL_IMPROVEMENT_NEEDED'\n        else 'CROSS_SELL_IMPROVEMENT_NEEDED'\n    end as cross_sell_performance_status,\n    null as digital_product_maturity,\n    null as wealth_product_performance,\n    null as recommended_product_strategy,\n    null as priority_product_focus,\n    \n    current_timestamp as last_updated\n\nfrom product_segment_analysis psa\n\nunion all\n\nselect\n    'NEXT_BEST_PRODUCT_OPPORTUNITIES' as analytics_section,\n    current_date as report_date,\n    \n    -- Next Best Product Analysis (separate rows for each product)\n    nbpa.opportunity_count as total_customers,\n    nbpa.opportunity_count as deposit_account_customers,\n    null as card_customers,\n    null as loan_customers,\n    null as investment_customers,\n    \n    null as deposit_penetration_rate,\n    null as card_penetration_rate,\n    null as loan_penetration_rate,\n    null as investment_penetration_rate,\n    \n    null as multi_product_customers,\n    null as multi_product_rate,\n    null as premium_product_customers,\n    null as premium_product_rate,\n    \n    null as avg_product_penetration_score,\n    round(nbpa.avg_opportunity_score::numeric, 1) as avg_cross_sell_opportunity_score,\n    null as avg_product_stickiness_score,\n    null as avg_account_profitability_score,\n    \n    null as digital_native_customers,\n    null as digital_adopter_customers,\n    null as digital_preferred_customers,\n    nbpa.digital_ready_rate as digital_adoption_rate,\n    \n    nbpa.high_value_opportunities as high_cross_sell_opportunity,\n    null as medium_cross_sell_opportunity,\n    null as high_cross_sell_rate,\n    \n    nbpa.potential_customer_value as total_product_portfolio_value,\n    round(nbpa.avg_customer_value::numeric, 0) as avg_customer_relationship_value,\n    \n    'NEXT_BEST_PRODUCT' as cross_sell_performance_status,\n    null as digital_product_maturity,\n    null as wealth_product_performance,\n    null as recommended_product_strategy,\n    null as priority_product_focus,\n    \n    current_timestamp as last_updated\n\nfrom next_best_product_analysis nbpa\n\norder by analytics_section, deposit_penetration_rate desc nulls last", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_product_penetration_analysis", "package": null, "version": null}, {"name": "int_customer_profile", "package": null, "version": null}, {"name": "int_customer_financial_summary", "package": null, "version": null}, {"name": "int_account_performance_dashboard", "package": null, "version": null}, {"name": "int_channel_effectiveness", "package": null, "version": null}, {"name": "int_customer_retention_analytics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.customer_360.int_product_penetration_analysis", "model.customer_360.int_customer_profile", "model.customer_360.int_customer_financial_summary", "model.customer_360.int_account_performance_dashboard", "model.customer_360.int_channel_effectiveness", "model.customer_360.int_customer_retention_analytics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.customer_360.risk_management_dashboard": {"database": "cosmos", "schema": "cosmos", "name": "risk_management_dashboard", "resource_type": "model", "package_name": "customer_360", "path": "marts/risk_operations/risk_management_dashboard.sql", "original_file_path": "models/marts/risk_operations/risk_management_dashboard.sql", "unique_id": "model.customer_360.risk_management_dashboard", "fqn": ["customer_360", "marts", "risk_operations", "risk_management_dashboard"], "alias": "risk_management_dashboard", "checksum": {"name": "sha256", "checksum": "53eca90960a72f907c96f72ba958851e120a473eaea03c5515b0416c8929b4e8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["gold", "mart", "gold", "mart", "risk_operations", "gold", "mart", "risk", "compliance"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["gold", "mart", "risk_operations", "risk", "compliance"], "description": "Comprehensive risk monitoring dashboard for CRO/Chief Compliance Officer. Provides risk portfolio analysis, compliance status, fraud monitoring, and regulatory reporting metrics with wealth tier risk breakdowns.\n", "columns": {"dashboard_section": {"name": "dashboard_section", "description": "Dashboard section (RISK_OVERVIEW, WEALTH_TIER_RISK_BREAKDOWN)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_customers": {"name": "total_customers", "description": "Total customers in risk portfolio", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "critical_risk_customers": {"name": "critical_risk_customers", "description": "Count of customers in critical risk category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "portfolio_risk_status": {"name": "portfolio_risk_status", "description": "Overall portfolio risk assessment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "compliance_health_status": {"name": "compliance_health_status", "description": "Regulatory compliance health status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recommended_action": {"name": "recommended_action", "description": "Risk management recommended action", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/marts/marts_schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["gold", "mart", "risk", "compliance"]}, "created_at": 1755857463.458951, "relation_name": "\"cosmos\".\"cosmos\".\"risk_management_dashboard\"", "raw_code": "{{ config(\n    materialized='table',\n    tags=['gold', 'mart', 'risk', 'compliance']\n) }}\n\n/*\n    Risk Management Dashboard\n    \n    Comprehensive risk monitoring and compliance dashboard combining:\n    - Customer risk profiles and assessments\n    - Fraud detection and alert management\n    - Regulatory compliance status and monitoring\n    - Portfolio risk concentration analysis\n    - Operational risk indicators\n    \n    Provides CRO/Chief Compliance Officer level insights for risk governance\n    and regulatory management.\n*/\n\nwith customer_risk_portfolio as (\n    select\n        crp.customer_id,\n        crp.overall_risk_level,\n        crp.compliance_status,\n        crp.composite_risk_score,\n        crp.current_credit_risk_score,\n        crp.current_fraud_risk_score,\n        crp.total_fraud_alerts,\n        crp.requires_enhanced_monitoring,\n        crp.requires_immediate_review,\n        crp.risk_trend,\n        \n        -- Customer context\n        cp.customer_value_segment,\n        cp.relationship_years,\n        cp.engagement_level,\n        cp.at_risk_customer,\n        \n        -- Financial context\n        cfs.total_relationship_value,\n        cfs.wealth_tier,\n        cfs.financial_risk_level,\n        cfs.net_worth_with_bank,\n        \n        -- Retention context\n        cra.churn_risk_score,\n        cra.retention_priority,\n        cra.retention_lifecycle_stage\n        \n    from {{ ref('int_comprehensive_risk_profile') }} crp\n    left join {{ ref('int_customer_profile') }} cp on crp.customer_id = cp.customer_id\n    left join {{ ref('int_customer_financial_summary') }} cfs on crp.customer_id = cfs.customer_id\n    left join {{ ref('int_customer_retention_analytics') }} cra on crp.customer_id = cra.customer_id\n),\n\nrisk_portfolio_summary as (\n    select\n        -- Portfolio Size\n        count(*) as total_customers,\n        count(case when total_relationship_value > 0 then 1 end) as active_customers,\n        sum(total_relationship_value) as total_portfolio_value,\n        \n        -- Risk Level Distribution\n        count(case when overall_risk_level = 'CRITICAL_RISK' then 1 end) as critical_risk_customers,\n        count(case when overall_risk_level = 'HIGH_RISK' then 1 end) as high_risk_customers,\n        count(case when overall_risk_level = 'ELEVATED_RISK' then 1 end) as elevated_risk_customers,\n        count(case when overall_risk_level = 'MODERATE_RISK' then 1 end) as moderate_risk_customers,\n        count(case when overall_risk_level = 'LOW_RISK' then 1 end) as low_risk_customers,\n        \n        -- Assets at Risk\n        sum(case when overall_risk_level = 'CRITICAL_RISK' then total_relationship_value else 0 end) as critical_risk_assets,\n        sum(case when overall_risk_level = 'HIGH_RISK' then total_relationship_value else 0 end) as high_risk_assets,\n        sum(case when overall_risk_level in ('CRITICAL_RISK', 'HIGH_RISK') then total_relationship_value else 0 end) as high_risk_portfolio_value,\n        \n        -- Compliance Status\n        count(case when compliance_status = 'NON_COMPLIANT' then 1 end) as non_compliant_customers,\n        count(case when compliance_status = 'REVIEW_REQUIRED' then 1 end) as compliance_review_required,\n        count(case when compliance_status = 'PENDING_VERIFICATION' then 1 end) as pending_verification,\n        count(case when compliance_status = 'COMPLIANT' then 1 end) as compliant_customers,\n        \n        -- Action Required\n        count(case when requires_immediate_review then 1 end) as immediate_review_required,\n        count(case when requires_enhanced_monitoring then 1 end) as enhanced_monitoring_required,\n        \n        -- Fraud Indicators\n        sum(total_fraud_alerts) as total_fraud_alerts,\n        count(case when total_fraud_alerts > 0 then 1 end) as customers_with_fraud_alerts,\n        count(case when total_fraud_alerts >= 3 then 1 end) as high_fraud_alert_customers,\n        \n        -- Risk Trend Analysis\n        count(case when risk_trend = 'VOLATILE' then 1 end) as volatile_risk_customers,\n        count(case when risk_trend = 'DETERIORATING' then 1 end) as deteriorating_risk_customers,\n        count(case when risk_trend = 'UNSTABLE' then 1 end) as unstable_risk_customers,\n        count(case when risk_trend = 'STABLE' then 1 end) as stable_risk_customers,\n        \n        -- Risk Scores\n        avg(composite_risk_score) as avg_composite_risk_score,\n        avg(current_credit_risk_score) as avg_credit_risk_score,\n        avg(current_fraud_risk_score) as avg_fraud_risk_score,\n        \n        -- High Value Customer Risk\n        count(case when customer_value_segment = 'High Value' and overall_risk_level in ('HIGH_RISK', 'CRITICAL_RISK') then 1 end) as high_value_high_risk,\n        sum(case when customer_value_segment = 'High Value' and overall_risk_level in ('HIGH_RISK', 'CRITICAL_RISK') then total_relationship_value else 0 end) as high_value_high_risk_assets\n        \n    from customer_risk_portfolio\n),\n\nwealth_tier_risk_analysis as (\n    select\n        wealth_tier,\n        count(*) as customer_count,\n        sum(total_relationship_value) as tier_assets,\n        count(case when overall_risk_level in ('HIGH_RISK', 'CRITICAL_RISK') then 1 end) as high_risk_count,\n        sum(case when overall_risk_level in ('HIGH_RISK', 'CRITICAL_RISK') then total_relationship_value else 0 end) as high_risk_assets,\n        avg(composite_risk_score) as avg_risk_score,\n        count(case when requires_immediate_review then 1 end) as immediate_actions,\n        count(case when compliance_status != 'COMPLIANT' then 1 end) as compliance_issues\n    from customer_risk_portfolio\n    where wealth_tier is not null\n    group by wealth_tier\n),\n\noperational_risk_metrics as (\n    select\n        rps.immediate_review_required + rps.enhanced_monitoring_required as total_risk_actions_required,\n        rps.non_compliant_customers + rps.compliance_review_required as total_compliance_actions,\n        rps.high_fraud_alert_customers as fraud_investigation_required,\n        \n        -- Risk concentration\n        rps.high_risk_portfolio_value / nullif(rps.total_portfolio_value, 0) * 100 as high_risk_concentration_pct,\n        rps.critical_risk_customers / nullif(rps.total_customers, 0) * 100 as critical_risk_customer_pct,\n        rps.non_compliant_customers / nullif(rps.total_customers, 0) * 100 as non_compliance_rate,\n        \n        -- Risk velocity\n        rps.deteriorating_risk_customers / nullif(rps.total_customers, 0) * 100 as deteriorating_risk_rate,\n        rps.volatile_risk_customers / nullif(rps.total_customers, 0) * 100 as volatile_risk_rate,\n        \n        -- Fraud metrics\n        rps.total_fraud_alerts / nullif(rps.total_customers, 0) as fraud_alerts_per_customer,\n        rps.customers_with_fraud_alerts / nullif(rps.total_customers, 0) * 100 as customers_with_fraud_pct,\n        \n        -- High value risk exposure\n        rps.high_value_high_risk_assets / nullif(rps.total_portfolio_value, 0) * 100 as high_value_risk_exposure_pct\n        \n    from risk_portfolio_summary rps\n)\n\nselect\n    'RISK_OVERVIEW' as dashboard_section,\n    current_date as report_date,\n    \n    -- Portfolio Risk Profile\n    rps.total_customers,\n    rps.total_portfolio_value,\n    rps.critical_risk_customers,\n    rps.high_risk_customers,\n    round(orm.critical_risk_customer_pct::numeric, 1) as critical_risk_customer_percentage,\n    round(orm.high_risk_concentration_pct::numeric, 1) as high_risk_asset_concentration_pct,\n    \n    -- Risk Assets\n    rps.critical_risk_assets,\n    rps.high_risk_assets,\n    rps.high_risk_portfolio_value,\n    rps.high_value_high_risk_assets as high_value_customers_at_risk_assets,\n    \n    -- Compliance Status\n    rps.non_compliant_customers,\n    rps.compliance_review_required,\n    rps.pending_verification,\n    rps.compliant_customers,\n    round(orm.non_compliance_rate::numeric, 1) as non_compliance_rate_pct,\n    \n    -- Immediate Actions Required\n    rps.immediate_review_required,\n    rps.enhanced_monitoring_required,\n    orm.total_risk_actions_required,\n    orm.total_compliance_actions,\n    \n    -- Fraud Risk\n    rps.total_fraud_alerts,\n    rps.customers_with_fraud_alerts,\n    rps.high_fraud_alert_customers,\n    round(orm.fraud_alerts_per_customer::numeric, 2) as avg_fraud_alerts_per_customer,\n    round(orm.customers_with_fraud_pct::numeric, 1) as customers_with_fraud_percentage,\n    \n    -- Risk Dynamics\n    rps.deteriorating_risk_customers,\n    rps.volatile_risk_customers,\n    round(orm.deteriorating_risk_rate::numeric, 1) as deteriorating_risk_rate_pct,\n    round(orm.volatile_risk_rate::numeric, 1) as volatile_risk_rate_pct,\n    \n    -- Risk Scores\n    round(rps.avg_composite_risk_score::numeric, 0) as avg_composite_risk_score,\n    round(rps.avg_credit_risk_score::numeric, 0) as avg_credit_risk_score,\n    round(rps.avg_fraud_risk_score::numeric, 0) as avg_fraud_risk_score,\n    \n    -- Risk Assessment\n    case \n        when orm.critical_risk_customer_pct > 10 then 'CRITICAL_RISK_PORTFOLIO'\n        when orm.high_risk_concentration_pct > 25 then 'HIGH_RISK_CONCENTRATION'\n        when orm.non_compliance_rate > 5 then 'COMPLIANCE_ISSUES'\n        when orm.deteriorating_risk_rate > 15 then 'RISK_DETERIORATION'\n        else 'MANAGED_RISK_PROFILE'\n    end as portfolio_risk_status,\n    \n    case \n        when orm.non_compliance_rate > 10 then 'COMPLIANCE_CRISIS'\n        when orm.non_compliance_rate > 5 then 'COMPLIANCE_ATTENTION_NEEDED'\n        when orm.non_compliance_rate > 2 then 'COMPLIANCE_MONITORING_REQUIRED'\n        else 'COMPLIANCE_HEALTHY'\n    end as compliance_health_status,\n    \n    case \n        when orm.customers_with_fraud_pct > 20 then 'HIGH_FRAUD_ENVIRONMENT'\n        when orm.customers_with_fraud_pct > 10 then 'ELEVATED_FRAUD_RISK'\n        when orm.customers_with_fraud_pct > 5 then 'MODERATE_FRAUD_ACTIVITY'\n        else 'LOW_FRAUD_ENVIRONMENT'\n    end as fraud_risk_environment,\n    \n    -- Priority Actions\n    case \n        when orm.total_risk_actions_required > 100 then 'IMMEDIATE_RISK_COMMITTEE_MEETING'\n        when orm.total_compliance_actions > 50 then 'COMPLIANCE_REMEDIATION_PLAN'\n        when rps.high_fraud_alert_customers > 20 then 'FRAUD_INVESTIGATION_SURGE'\n        when orm.high_value_risk_exposure_pct > 15 then 'HIGH_VALUE_CUSTOMER_REVIEW'\n        else 'STANDARD_RISK_MONITORING'\n    end as recommended_action,\n    \n    -- Regulatory Alerts\n    case \n        when orm.non_compliance_rate > 5 or orm.total_compliance_actions > 25 then 'REGULATORY_REPORTING_REQUIRED'\n        else 'NO_REGULATORY_ALERTS'\n    end as regulatory_status,\n    \n    current_timestamp as last_updated\n\nfrom risk_portfolio_summary rps\ncross join operational_risk_metrics orm\n\nunion all\n\nselect\n    'WEALTH_TIER_RISK_BREAKDOWN' as dashboard_section,\n    current_date as report_date,\n    \n    -- Wealth Tier Metrics (will create separate rows for each tier)\n    wtra.customer_count as total_customers,\n    wtra.tier_assets as total_portfolio_value,\n    wtra.high_risk_count as critical_risk_customers,\n    null as high_risk_customers,\n    round(wtra.high_risk_count::numeric / wtra.customer_count * 100, 1) as critical_risk_customer_percentage,\n    round(wtra.high_risk_assets / nullif(wtra.tier_assets, 0) * 100, 1) as high_risk_asset_concentration_pct,\n    \n    null as critical_risk_assets,\n    wtra.high_risk_assets,\n    null as high_risk_portfolio_value,\n    null as high_value_customers_at_risk_assets,\n    \n    wtra.compliance_issues as non_compliant_customers,\n    null as compliance_review_required,\n    null as pending_verification,\n    null as compliant_customers,\n    round(wtra.compliance_issues::numeric / wtra.customer_count * 100, 1) as non_compliance_rate_pct,\n    \n    wtra.immediate_actions as immediate_review_required,\n    null as enhanced_monitoring_required,\n    null as total_risk_actions_required,\n    null as total_compliance_actions,\n    \n    null as total_fraud_alerts,\n    null as customers_with_fraud_alerts,\n    null as high_fraud_alert_customers,\n    null as avg_fraud_alerts_per_customer,\n    null as customers_with_fraud_percentage,\n    \n    null as deteriorating_risk_customers,\n    null as volatile_risk_customers,\n    null as deteriorating_risk_rate_pct,\n    null as volatile_risk_rate_pct,\n    \n    round(wtra.avg_risk_score::numeric, 0) as avg_composite_risk_score,\n    null as avg_credit_risk_score,\n    null as avg_fraud_risk_score,\n    \n    case \n        when wtra.customer_count = 0 or wtra.customer_count is null then 'MANAGED_RISK_PROFILE'\n        when wtra.high_risk_count::numeric / wtra.customer_count > 0.1 then 'HIGH_RISK_CONCENTRATION'\n        when wtra.compliance_issues::numeric / wtra.customer_count > 0.05 then 'COMPLIANCE_ISSUES'\n        when wtra.avg_risk_score > 70 then 'RISK_DETERIORATION'\n        else 'MANAGED_RISK_PROFILE'\n    end as portfolio_risk_status,\n    null as compliance_health_status,\n    null as fraud_risk_environment,\n    null as recommended_action,\n    null as regulatory_status,\n    \n    current_timestamp as last_updated\n\nfrom wealth_tier_risk_analysis wtra\n\norder by dashboard_section, critical_risk_customer_percentage desc nulls last", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_comprehensive_risk_profile", "package": null, "version": null}, {"name": "int_customer_profile", "package": null, "version": null}, {"name": "int_customer_financial_summary", "package": null, "version": null}, {"name": "int_customer_retention_analytics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.customer_360.int_comprehensive_risk_profile", "model.customer_360.int_customer_profile", "model.customer_360.int_customer_financial_summary", "model.customer_360.int_customer_retention_analytics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.customer_360.customer_segmentation_analysis": {"database": "cosmos", "schema": "cosmos", "name": "customer_segmentation_analysis", "resource_type": "model", "package_name": "customer_360", "path": "marts/customer_marketing/customer_segmentation_analysis.sql", "original_file_path": "models/marts/customer_marketing/customer_segmentation_analysis.sql", "unique_id": "model.customer_360.customer_segmentation_analysis", "fqn": ["customer_360", "marts", "customer_marketing", "customer_segmentation_analysis"], "alias": "customer_segmentation_analysis", "checksum": {"name": "sha256", "checksum": "fc117d5f48eafffc4124c9611e4faa409c91399c349bef6c9811a3f44d2cd29b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["gold", "mart", "gold", "mart", "customer_marketing", "gold", "mart", "marketing", "segmentation"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["gold", "mart", "customer_marketing", "marketing", "segmentation"], "description": "Comprehensive customer segmentation and marketing effectiveness analysis for CMO/Marketing Director. Includes segment performance, digital adoption, product penetration, marketing responsiveness, and retention patterns.\n", "columns": {"analysis_section": {"name": "analysis_section", "description": "Analysis section (SEGMENT_OVERVIEW, LIFECYCLE_ANALYSIS)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_value_segment": {"name": "customer_value_segment", "description": "Customer value segment or lifecycle stage name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "segment_customer_count": {"name": "segment_customer_count", "description": "Number of customers in the segment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "segment_strategic_importance": {"name": "segment_strategic_importance", "description": "Strategic importance classification of the segment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "marketing_effectiveness": {"name": "marketing_effectiveness", "description": "Marketing campaign effectiveness for the segment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "digital_strategy_classification": {"name": "digital_strategy_classification", "description": "Digital strategy classification for the segment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/marts/marts_schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["gold", "mart", "marketing", "segmentation"]}, "created_at": 1755857463.459981, "relation_name": "\"cosmos\".\"cosmos\".\"customer_segmentation_analysis\"", "raw_code": "{{ config(\n    materialized='table',\n    tags=['gold', 'mart', 'marketing', 'segmentation']\n) }}\n\n/*\n    Customer Segmentation Analysis\n    \n    Comprehensive customer segmentation and marketing effectiveness analysis:\n    - Customer value segment performance and characteristics\n    - Digital adoption and channel preferences by segment\n    - Product penetration and cross-sell opportunities\n    - Marketing campaign effectiveness and ROI\n    - Retention and engagement patterns by segment\n    \n    Provides CMO/Marketing Director insights for customer strategy,\n    targeting, and marketing optimization.\n*/\n\nwith customer_segment_metrics as (\n    select\n        cp.customer_id,\n        cp.customer_value_segment,\n        cp.lifecycle_stage_name,\n        cp.engagement_level,\n        cp.digital_preference,\n        cp.age,\n        cp.relationship_years,\n        \n        -- Financial metrics\n        cfs.total_relationship_value,\n        cfs.wealth_tier,\n        cfs.product_penetration_score,\n        cfs.net_worth_with_bank,\n        \n        -- Digital and channel effectiveness\n        ce.digital_adoption_score,\n        ce.channel_preference,\n        ce.channel_diversity_score,\n        ce.service_satisfaction_score,\n        \n        -- Product analytics\n        ppa.cross_sell_opportunity_score,\n        ppa.product_stickiness_score,\n        ppa.digital_adoption_level,\n        ppa.marketing_responsiveness,\n        ppa.next_best_product,\n        \n        -- Retention insights\n        cra.churn_risk_score,\n        cra.retention_opportunity_score,\n        cra.retention_lifecycle_stage,\n        cra.retention_priority,\n        \n        -- Risk context\n        crp.overall_risk_level,\n        crp.compliance_status\n        \n    from {{ ref('int_customer_profile') }} cp\n    left join {{ ref('int_customer_financial_summary') }} cfs on cp.customer_id = cfs.customer_id\n    left join {{ ref('int_channel_effectiveness') }} ce on cp.customer_id = ce.customer_id\n    left join {{ ref('int_product_penetration_analysis') }} ppa on cp.customer_id = ppa.customer_id\n    left join {{ ref('int_customer_retention_analytics') }} cra on cp.customer_id = cra.customer_id\n    left join {{ ref('int_comprehensive_risk_profile') }} crp on cp.customer_id = crp.customer_id\n),\n\nsegment_portfolio_analysis as (\n    select\n        customer_value_segment,\n        \n        -- Portfolio Size\n        count(*) as segment_customer_count,\n        round(count(*)::numeric / sum(count(*)) over () * 100, 1) as segment_share_percentage,\n        \n        -- Financial Performance\n        sum(total_relationship_value) as segment_total_value,\n        avg(total_relationship_value) as segment_avg_customer_value,\n        round(sum(total_relationship_value) / sum(sum(total_relationship_value)) over () * 100, 1) as segment_value_share_pct,\n        \n        -- Demographics\n        avg(age) as avg_age,\n        avg(relationship_years) as avg_relationship_tenure,\n        \n        -- Engagement Patterns\n        count(case when engagement_level = 'HIGHLY_ENGAGED' then 1 end) as highly_engaged_count,\n        round(count(case when engagement_level = 'HIGHLY_ENGAGED' then 1 end)::numeric / count(*) * 100, 1) as engagement_rate_pct,\n        avg(service_satisfaction_score) as avg_satisfaction_score,\n        \n        -- Digital Adoption\n        avg(digital_adoption_score) as avg_digital_adoption,\n        count(case when digital_preference in ('DIGITAL_FIRST', 'DIGITAL_PREFERRED') then 1 end) as digital_preferred_customers,\n        round(count(case when digital_preference in ('DIGITAL_FIRST', 'DIGITAL_PREFERRED') then 1 end)::numeric / count(*) * 100, 1) as digital_adoption_rate_pct,\n        \n        -- Product Performance\n        avg(product_penetration_score) as avg_product_penetration,\n        avg(cross_sell_opportunity_score) as avg_cross_sell_opportunity,\n        count(case when cross_sell_opportunity_score >= 75 then 1 end) as high_cross_sell_customers,\n        avg(product_stickiness_score) as avg_product_stickiness,\n        \n        -- Marketing Responsiveness\n        count(case when marketing_responsiveness = 'HIGHLY_RESPONSIVE' then 1 end) as highly_responsive_customers,\n        count(case when marketing_responsiveness = 'MODERATELY_RESPONSIVE' then 1 end) as moderately_responsive_customers,\n        count(case when marketing_responsiveness = 'UNRESPONSIVE' then 1 end) as unresponsive_customers,\n        round(count(case when marketing_responsiveness in ('HIGHLY_RESPONSIVE', 'MODERATELY_RESPONSIVE') then 1 end)::numeric / count(*) * 100, 1) as marketing_responsiveness_rate,\n        \n        -- Retention Metrics\n        avg(churn_risk_score) as avg_churn_risk,\n        avg(retention_opportunity_score) as avg_retention_opportunity,\n        count(case when retention_priority in ('CRITICAL', 'WIN_BACK') then 1 end) as critical_retention_cases,\n        count(case when churn_risk_score >= 70 then 1 end) as high_churn_risk_customers,\n        \n        -- Risk Profile\n        count(case when overall_risk_level in ('HIGH_RISK', 'CRITICAL_RISK') then 1 end) as high_risk_customers,\n        count(case when compliance_status != 'COMPLIANT' then 1 end) as non_compliant_customers\n        \n    from customer_segment_metrics\n    where customer_value_segment is not null\n    group by customer_value_segment\n),\n\nlifecycle_stage_analysis as (\n    select\n        lifecycle_stage_name,\n        count(*) as lifecycle_customer_count,\n        avg(total_relationship_value) as avg_customer_value,\n        avg(product_penetration_score) as avg_product_penetration,\n        avg(digital_adoption_score) as avg_digital_adoption,\n        avg(churn_risk_score) as avg_churn_risk,\n        count(case when cross_sell_opportunity_score >= 75 then 1 end) as cross_sell_opportunities,\n        round(count(case when engagement_level = 'HIGHLY_ENGAGED' then 1 end)::numeric / count(*) * 100, 1) as engagement_rate_pct\n    from customer_segment_metrics\n    where lifecycle_stage_name is not null\n    group by lifecycle_stage_name\n),\n\ndigital_preference_segments as (\n    select\n        digital_preference,\n        channel_preference,\n        count(*) as customer_count,\n        avg(digital_adoption_score) as avg_digital_score,\n        avg(channel_diversity_score) as avg_channel_diversity,\n        avg(service_satisfaction_score) as avg_satisfaction,\n        avg(total_relationship_value) as avg_customer_value,\n        round(count(case when marketing_responsiveness in ('HIGHLY_RESPONSIVE', 'MODERATELY_RESPONSIVE') then 1 end)::numeric / count(*) * 100, 1) as marketing_response_rate\n    from customer_segment_metrics\n    where digital_preference is not null and channel_preference is not null\n    group by digital_preference, channel_preference\n),\n\nsegment_profitability_analysis as (\n    select\n        spa.customer_value_segment,\n        spa.segment_customer_count,\n        spa.segment_total_value,\n        spa.segment_avg_customer_value,\n        \n        -- ROI Calculations (using engagement and satisfaction as proxies)\n        spa.avg_satisfaction_score * spa.segment_total_value / 1000000 as customer_satisfaction_value_index,\n        spa.avg_cross_sell_opportunity * spa.segment_customer_count / 100 as growth_potential_index,\n        spa.avg_retention_opportunity * spa.segment_total_value / 10000000 as retention_value_index,\n        \n        -- Marketing Efficiency\n        spa.marketing_responsiveness_rate / 100 * spa.segment_customer_count as responsive_customer_base,\n        spa.digital_adoption_rate_pct / 100 * spa.segment_customer_count as digital_ready_customers,\n        \n        -- Risk Adjusted Value\n        (100 - coalesce(spa.avg_churn_risk, 0)) / 100 * spa.segment_total_value as retention_adjusted_value\n        \n    from segment_portfolio_analysis spa\n)\n\nselect\n    'SEGMENT_OVERVIEW' as analysis_section,\n    current_date as report_date,\n    \n    -- Segment Portfolio Performance\n    spa.customer_value_segment,\n    spa.segment_customer_count,\n    spa.segment_share_percentage,\n    spa.segment_total_value,\n    round(spa.segment_avg_customer_value::numeric, 0) as avg_customer_value,\n    spa.segment_value_share_pct,\n    \n    -- Customer Characteristics\n    round(spa.avg_age::numeric, 1) as avg_customer_age,\n    round(spa.avg_relationship_tenure::numeric, 1) as avg_relationship_years,\n    spa.highly_engaged_count,\n    spa.engagement_rate_pct,\n    round(spa.avg_satisfaction_score::numeric, 2) as avg_satisfaction_score,\n    \n    -- Digital & Channel Performance\n    round(spa.avg_digital_adoption::numeric, 1) as avg_digital_adoption_score,\n    spa.digital_preferred_customers,\n    spa.digital_adoption_rate_pct,\n    round(spa.avg_product_penetration::numeric, 1) as avg_product_penetration_score,\n    \n    -- Marketing & Growth Opportunities\n    spa.highly_responsive_customers,\n    spa.moderately_responsive_customers,\n    spa.marketing_responsiveness_rate as marketing_response_rate_pct,\n    spa.high_cross_sell_customers,\n    round(spa.avg_cross_sell_opportunity::numeric, 1) as avg_cross_sell_score,\n    round(spa.avg_product_stickiness::numeric, 1) as avg_product_stickiness_score,\n    \n    -- Retention & Risk\n    round(spa.avg_churn_risk::numeric, 1) as avg_churn_risk_score,\n    spa.high_churn_risk_customers,\n    spa.critical_retention_cases,\n    round(spa.avg_retention_opportunity::numeric, 1) as avg_retention_opportunity_score,\n    spa.high_risk_customers,\n    \n    -- Strategic Insights\n    case \n        when spa.segment_value_share_pct >= 40 then 'PRIMARY_VALUE_DRIVER'\n        when spa.segment_value_share_pct >= 20 then 'MAJOR_CONTRIBUTOR'\n        when spa.segment_value_share_pct >= 10 then 'SIGNIFICANT_SEGMENT'\n        else 'NICHE_SEGMENT'\n    end as segment_strategic_importance,\n    \n    case \n        when spa.marketing_responsiveness_rate >= 70 then 'HIGHLY_MARKETABLE'\n        when spa.marketing_responsiveness_rate >= 50 then 'MODERATELY_MARKETABLE'\n        when spa.marketing_responsiveness_rate >= 30 then 'SELECTIVE_MARKETING'\n        else 'MARKETING_CHALLENGE'\n    end as marketing_effectiveness,\n    \n    case \n        when spa.digital_adoption_rate_pct >= 70 then 'DIGITAL_NATIVE'\n        when spa.digital_adoption_rate_pct >= 50 then 'DIGITAL_ADOPTER'\n        when spa.digital_adoption_rate_pct >= 30 then 'DIGITAL_OPPORTUNITY'\n        else 'TRADITIONAL_PREFERRED'\n    end as digital_strategy_classification,\n    \n    case \n        when spa.avg_churn_risk <= 30 and spa.avg_retention_opportunity >= 70 then 'LOYALTY_CHAMPIONS'\n        when spa.avg_churn_risk <= 50 and spa.avg_retention_opportunity >= 50 then 'STABLE_RELATIONSHIPS'\n        when spa.avg_churn_risk >= 70 then 'RETENTION_CRITICAL'\n        else 'STANDARD_RETENTION'\n    end as retention_strategy_classification,\n    \n    -- Recommended Actions\n    case \n        when spa.high_cross_sell_customers >= spa.segment_customer_count * 0.5 then 'AGGRESSIVE_CROSS_SELL_CAMPAIGN'\n        when spa.digital_adoption_rate_pct < 40 and spa.customer_value_segment = 'High Value' then 'DIGITAL_TRANSFORMATION_FOCUS'\n        when spa.marketing_responsiveness_rate < 30 then 'MESSAGING_STRATEGY_REVIEW'\n        when spa.critical_retention_cases >= spa.segment_customer_count * 0.1 then 'RETENTION_PROGRAM_PRIORITY'\n        else 'MAINTAIN_CURRENT_STRATEGY'\n    end as recommended_marketing_action,\n    \n    -- Performance Indicators\n    round(spfa.customer_satisfaction_value_index::numeric, 2) as satisfaction_value_index,\n    round(spfa.growth_potential_index::numeric, 0) as growth_potential_index,\n    round(spfa.retention_value_index::numeric, 2) as retention_value_index,\n    round(spfa.responsive_customer_base::numeric, 0) as marketing_responsive_base,\n    round(spfa.retention_adjusted_value::numeric, 0) as risk_adjusted_segment_value,\n    \n    current_timestamp as last_updated\n\nfrom segment_portfolio_analysis spa\nleft join segment_profitability_analysis spfa on spa.customer_value_segment = spfa.customer_value_segment\n\nunion all\n\nselect\n    'LIFECYCLE_ANALYSIS' as analysis_section,\n    current_date as report_date,\n    \n    -- Lifecycle Stage Metrics (separate rows for each stage)\n    lsa.lifecycle_stage_name as customer_value_segment,\n    lsa.lifecycle_customer_count as segment_customer_count,\n    null as segment_share_percentage,\n    null as segment_total_value,\n    round(lsa.avg_customer_value::numeric, 0) as avg_customer_value,\n    null as segment_value_share_pct,\n    \n    null as avg_customer_age,\n    null as avg_relationship_years,\n    null as highly_engaged_count,\n    lsa.engagement_rate_pct,\n    null as avg_satisfaction_score,\n    \n    round(lsa.avg_digital_adoption::numeric, 1) as avg_digital_adoption_score,\n    null as digital_preferred_customers,\n    null as digital_adoption_rate_pct,\n    round(lsa.avg_product_penetration::numeric, 1) as avg_product_penetration_score,\n    \n    null as highly_responsive_customers,\n    null as moderately_responsive_customers,\n    null as marketing_response_rate_pct,\n    lsa.cross_sell_opportunities as high_cross_sell_customers,\n    null as avg_cross_sell_score,\n    null as avg_product_stickiness_score,\n    \n    round(lsa.avg_churn_risk::numeric, 1) as avg_churn_risk_score,\n    null as high_churn_risk_customers,\n    null as critical_retention_cases,\n    null as avg_retention_opportunity_score,\n    null as high_risk_customers,\n    \n    'LIFECYCLE_STAGE' as segment_strategic_importance,\n    null as marketing_effectiveness,\n    null as digital_strategy_classification,\n    null as retention_strategy_classification,\n    null as recommended_marketing_action,\n    \n    null as satisfaction_value_index,\n    null as growth_potential_index,\n    null as retention_value_index,\n    null as marketing_responsive_base,\n    null as risk_adjusted_segment_value,\n    \n    current_timestamp as last_updated\n\nfrom lifecycle_stage_analysis lsa\n\norder by analysis_section, segment_share_percentage desc nulls last, avg_customer_value desc nulls last", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_profile", "package": null, "version": null}, {"name": "int_customer_financial_summary", "package": null, "version": null}, {"name": "int_channel_effectiveness", "package": null, "version": null}, {"name": "int_product_penetration_analysis", "package": null, "version": null}, {"name": "int_customer_retention_analytics", "package": null, "version": null}, {"name": "int_comprehensive_risk_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.customer_360.int_customer_profile", "model.customer_360.int_customer_financial_summary", "model.customer_360.int_channel_effectiveness", "model.customer_360.int_product_penetration_analysis", "model.customer_360.int_customer_retention_analytics", "model.customer_360.int_comprehensive_risk_profile"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.customer_360.financial_performance_summary": {"database": "cosmos", "schema": "cosmos", "name": "financial_performance_summary", "resource_type": "model", "package_name": "customer_360", "path": "marts/executive/financial_performance_summary.sql", "original_file_path": "models/marts/executive/financial_performance_summary.sql", "unique_id": "model.customer_360.financial_performance_summary", "fqn": ["customer_360", "marts", "executive", "financial_performance_summary"], "alias": "financial_performance_summary", "checksum": {"name": "sha256", "checksum": "7a4d8055c2f1ffc4527de1768a4b299a982613f8a18409c88d166f5522a309fe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["gold", "mart", "gold", "mart", "executive", "gold", "mart", "executive", "financial"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["gold", "mart", "executive", "financial"], "description": "Executive-level financial performance dashboard for CFO/CRO insights. Combines account profitability, customer financial relationships, transaction volumes, product penetration, and risk-adjusted returns.\n", "columns": {"total_customers": {"name": "total_customers", "description": "Total customer count in financial portfolio", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_aum": {"name": "total_aum", "description": "Total assets under management", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "annual_net_revenue": {"name": "annual_net_revenue", "description": "Total annual net revenue from portfolio", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "portfolio_yield_assessment": {"name": "portfolio_yield_assessment", "description": "Portfolio yield performance classification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/marts/marts_schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["gold", "mart", "executive", "financial"]}, "created_at": 1755857463.458113, "relation_name": "\"cosmos\".\"cosmos\".\"financial_performance_summary\"", "raw_code": "{{ config(\n    materialized='table',\n    tags=['gold', 'mart', 'executive', 'financial']\n) }}\n\n/*\n    Financial Performance Summary\n    \n    Executive-level financial performance dashboard combining:\n    - Account profitability and performance metrics\n    - Customer financial relationships and value\n    - Transaction volumes and revenue streams\n    - Product penetration and cross-sell performance\n    - Risk-adjusted returns and portfolio health\n    \n    Provides CFO/CRO level insights for financial strategy and performance management.\n*/\n\nwith account_financial_performance as (\n    select\n        apd.account_id,\n        apd.customer_id,\n        apd.product_type,\n        apd.account_age_years,\n        apd.current_balance,\n        apd.annual_interest_rate,\n        apd.monthly_fee,\n        apd.account_profitability_score,\n        apd.account_health_score,\n        apd.total_transactions,\n        apd.total_transaction_volume,\n        apd.net_cash_flow,\n        apd.total_fees_paid,\n        apd.customer_relationship_value,\n        apd.customer_wealth_tier,\n        apd.overall_risk_level,\n        apd.account_service_tier,\n        \n        -- Calculate revenue metrics\n        (apd.monthly_fee * 12) as annual_fee_revenue,\n        (apd.current_balance * apd.annual_interest_rate) as annual_interest_expense,\n        ((apd.monthly_fee * 12) - (apd.current_balance * apd.annual_interest_rate)) as annual_net_revenue,\n        apd.total_fees_paid as fee_income_generated,\n        \n        -- Risk-adjusted metrics\n        case \n            when apd.overall_risk_level = 'LOW_RISK' then 1.0\n            when apd.overall_risk_level = 'MODERATE_RISK' then 0.8\n            when apd.overall_risk_level = 'ELEVATED_RISK' then 0.6\n            when apd.overall_risk_level = 'HIGH_RISK' then 0.3\n            else 0.1\n        end as risk_adjustment_factor\n        \n    from {{ ref('int_account_performance_dashboard') }} apd\n),\n\ncustomer_financial_metrics as (\n    select\n        cfs.customer_id,\n        cfs.total_relationship_value,\n        cfs.net_worth_with_bank,\n        cfs.product_penetration_score,\n        cfs.wealth_tier,\n        cfs.financial_risk_level,\n        cfs.total_deposit_accounts,\n        cfs.total_deposit_balances,\n        cfs.total_cards,\n        cfs.total_credit_limit,\n        cfs.total_loans,\n        cfs.total_loan_balance,\n        cfs.total_investments,\n        cfs.total_investment_value,\n        \n        -- Cross-sell opportunities\n        ppa.cross_sell_opportunity_score,\n        ppa.product_stickiness_score,\n        ppa.next_best_product,\n        \n        -- Customer profile context\n        cp.relationship_years,\n        cp.customer_value_segment,\n        cp.engagement_level\n        \n    from {{ ref('int_customer_financial_summary') }} cfs\n    left join {{ ref('int_product_penetration_analysis') }} ppa on cfs.customer_id = ppa.customer_id\n    left join {{ ref('int_customer_profile') }} cp on cfs.customer_id = cp.customer_id\n),\n\nfinancial_portfolio_summary as (\n    select\n        -- Portfolio Metrics\n        count(distinct afp.account_id) as total_accounts,\n        count(distinct afp.customer_id) as total_customers,\n        count(distinct case when afp.account_service_tier = 'PRIVATE_BANKING' then afp.customer_id end) as private_banking_customers,\n        count(distinct case when afp.customer_wealth_tier = 'WEALTH_MANAGEMENT' then afp.customer_id end) as wealth_management_customers,\n        \n        -- Asset Metrics\n        sum(afp.current_balance) as total_assets_under_management,\n        avg(afp.current_balance) as avg_account_balance,\n        sum(case when afp.customer_wealth_tier = 'PRIVATE_BANKING' then afp.current_balance else 0 end) as private_banking_assets,\n        sum(case when afp.product_type = 'INVESTMENT' then afp.current_balance else 0 end) as investment_assets,\n        \n        -- Revenue Metrics\n        sum(afp.annual_fee_revenue) as total_annual_fee_revenue,\n        sum(afp.annual_interest_expense) as total_annual_interest_expense,\n        sum(afp.annual_net_revenue) as total_annual_net_revenue,\n        sum(afp.fee_income_generated) as total_fee_income,\n        avg(afp.account_profitability_score) as avg_account_profitability,\n        \n        -- Performance Metrics\n        sum(afp.total_transaction_volume) as total_transaction_volume,\n        avg(afp.account_health_score) as avg_account_health,\n        sum(case when afp.account_health_score >= 80 then afp.current_balance else 0 end) as healthy_account_assets,\n        \n        -- Risk Metrics\n        sum(afp.current_balance * afp.risk_adjustment_factor) as risk_adjusted_assets,\n        sum(case when afp.overall_risk_level in ('HIGH_RISK', 'CRITICAL_RISK') then afp.current_balance else 0 end) as high_risk_assets,\n        avg(afp.risk_adjustment_factor) as avg_risk_adjustment,\n        \n        -- Activity Metrics\n        sum(afp.total_transactions) as total_transactions,\n        sum(case when afp.total_transactions > 0 then 1 else 0 end) as active_accounts,\n        sum(case when afp.total_transactions = 0 and afp.account_age_years > 1 then 1 else 0 end) as dormant_accounts\n        \n    from account_financial_performance afp\n),\n\ncustomer_portfolio_analysis as (\n    select\n        -- Customer Value Distribution\n        count(*) as total_customers,\n        count(case when cfm.customer_value_segment = 'High Value' then 1 end) as high_value_customers,\n        sum(cfm.total_relationship_value) as total_customer_value,\n        avg(cfm.total_relationship_value) as avg_customer_value,\n        \n        -- Wealth Tier Analysis\n        sum(case when cfm.wealth_tier = 'PRIVATE_BANKING' then cfm.total_relationship_value else 0 end) as private_banking_value,\n        sum(case when cfm.wealth_tier = 'WEALTH_MANAGEMENT' then cfm.total_relationship_value else 0 end) as wealth_management_value,\n        sum(case when cfm.wealth_tier = 'PREFERRED' then cfm.total_relationship_value else 0 end) as preferred_value,\n        \n        -- Product Penetration\n        avg(cfm.product_penetration_score) as avg_product_penetration,\n        avg(cfm.total_deposit_accounts) as avg_deposit_accounts_per_customer,\n        sum(cfm.total_deposit_balances) as total_deposit_balances,\n        sum(cfm.total_loan_balance) as total_loan_balances,\n        sum(cfm.total_investment_value) as total_investment_value,\n        \n        -- Cross-sell Potential\n        count(case when cfm.cross_sell_opportunity_score >= 75 then 1 end) as high_cross_sell_potential,\n        avg(cfm.cross_sell_opportunity_score) as avg_cross_sell_score,\n        avg(cfm.product_stickiness_score) as avg_product_stickiness,\n        \n        -- Relationship Metrics\n        avg(cfm.relationship_years) as avg_relationship_tenure,\n        count(case when cfm.engagement_level = 'HIGHLY_ENGAGED' then 1 end) as highly_engaged_customers\n        \n    from customer_financial_metrics cfm\n),\n\nprofitability_analysis as (\n    select\n        fps.total_annual_net_revenue / nullif(fps.total_customers, 0) as revenue_per_customer,\n        fps.total_annual_fee_revenue / nullif(fps.total_accounts, 0) as fee_revenue_per_account,\n        fps.total_assets_under_management / nullif(fps.total_customers, 0) as assets_per_customer,\n        fps.healthy_account_assets / nullif(fps.total_assets_under_management, 0) * 100 as healthy_assets_percentage,\n        fps.risk_adjusted_assets / nullif(fps.total_assets_under_management, 0) * 100 as risk_adjusted_assets_percentage,\n        fps.active_accounts / nullif(fps.total_accounts, 0) * 100 as account_activation_rate,\n        fps.private_banking_assets / nullif(fps.total_assets_under_management, 0) * 100 as private_banking_share,\n        \n        -- Performance ratios\n        fps.total_annual_net_revenue / nullif(fps.total_assets_under_management, 0) * 100 as net_revenue_yield,\n        fps.total_fee_income / nullif(fps.total_transaction_volume, 0) * 100 as fee_rate_on_volume,\n        fps.dormant_accounts / nullif(fps.total_accounts, 0) * 100 as dormancy_rate\n        \n    from financial_portfolio_summary fps\n)\n\nselect\n    'FINANCIAL_OVERVIEW' as dashboard_section,\n    current_date as report_date,\n    \n    -- Portfolio Size & Scale\n    fps.total_customers,\n    fps.total_accounts,\n    round(fps.total_assets_under_management::numeric, 0) as total_aum,\n    round(fps.avg_account_balance::numeric, 0) as avg_account_balance,\n    round(fps.private_banking_assets::numeric, 0) as private_banking_aum,\n    round(fps.investment_assets::numeric, 0) as investment_aum,\n    \n    -- Revenue Performance\n    round(fps.total_annual_net_revenue::numeric, 0) as annual_net_revenue,\n    round(fps.total_annual_fee_revenue::numeric, 0) as annual_fee_revenue,\n    round(fps.total_fee_income::numeric, 0) as transaction_fee_income,\n    round(pa.revenue_per_customer::numeric, 0) as revenue_per_customer,\n    round(pa.fee_revenue_per_account::numeric, 0) as fee_revenue_per_account,\n    \n    -- Performance Metrics\n    round(fps.avg_account_profitability::numeric, 1) as avg_account_profitability_score,\n    round(fps.avg_account_health::numeric, 1) as avg_account_health_score,\n    round(pa.healthy_assets_percentage::numeric, 1) as healthy_assets_percentage,\n    round(pa.account_activation_rate::numeric, 1) as account_activation_rate,\n    \n    -- Risk & Quality\n    round(pa.risk_adjusted_assets_percentage::numeric, 1) as risk_adjusted_assets_pct,\n    round(fps.avg_risk_adjustment::numeric, 2) as avg_risk_adjustment_factor,\n    round(pa.dormancy_rate::numeric, 1) as account_dormancy_rate,\n    fps.dormant_accounts as dormant_accounts_count,\n    \n    -- Customer Value\n    round(cpa.avg_customer_value::numeric, 0) as avg_customer_relationship_value,\n    round(cpa.private_banking_value::numeric, 0) as private_banking_customer_value,\n    round(cpa.wealth_management_value::numeric, 0) as wealth_management_customer_value,\n    cpa.high_value_customers,\n    cpa.highly_engaged_customers,\n    \n    -- Product Performance\n    round(cpa.avg_product_penetration::numeric, 1) as avg_product_penetration_score,\n    round(cpa.avg_deposit_accounts_per_customer::numeric, 1) as avg_accounts_per_customer,\n    cpa.high_cross_sell_potential as high_cross_sell_customers,\n    round(cpa.avg_cross_sell_score::numeric, 1) as avg_cross_sell_opportunity_score,\n    \n    -- Growth Indicators\n    round(pa.net_revenue_yield::numeric, 2) as net_revenue_yield_pct,\n    round(pa.fee_rate_on_volume::numeric, 4) as fee_rate_on_transaction_volume,\n    round(pa.private_banking_share::numeric, 1) as private_banking_share_pct,\n    round(cpa.avg_relationship_tenure::numeric, 1) as avg_relationship_years,\n    \n    -- Strategic Insights\n    case \n        when pa.net_revenue_yield >= 3.0 then 'HIGH_YIELD_PORTFOLIO'\n        when pa.net_revenue_yield >= 2.0 then 'STRONG_YIELD'\n        when pa.net_revenue_yield >= 1.0 then 'MODERATE_YIELD'\n        else 'YIELD_IMPROVEMENT_NEEDED'\n    end as portfolio_yield_assessment,\n    \n    case \n        when pa.healthy_assets_percentage >= 80 then 'EXCELLENT_PORTFOLIO_HEALTH'\n        when pa.healthy_assets_percentage >= 60 then 'GOOD_PORTFOLIO_HEALTH'\n        when pa.healthy_assets_percentage >= 40 then 'FAIR_PORTFOLIO_HEALTH'\n        else 'PORTFOLIO_HEALTH_ATTENTION_NEEDED'\n    end as portfolio_health_status,\n    \n    case \n        when cpa.avg_product_penetration >= 75 then 'EXCELLENT_CROSS_SELL'\n        when cpa.avg_product_penetration >= 50 then 'GOOD_CROSS_SELL_PERFORMANCE'\n        when cpa.avg_product_penetration >= 30 then 'MODERATE_CROSS_SELL'\n        else 'CROSS_SELL_OPPORTUNITY'\n    end as cross_sell_performance,\n    \n    -- Priority Actions\n    fps.dormant_accounts as dormant_accounts_requiring_attention,\n    cpa.high_cross_sell_potential as cross_sell_opportunities_available,\n    case \n        when pa.dormancy_rate > 15 then 'ACTIVATION_CAMPAIGN_NEEDED'\n        when pa.account_activation_rate < 85 then 'ENGAGEMENT_IMPROVEMENT_NEEDED'\n        else 'MAINTAIN_CURRENT_STRATEGY'\n    end as recommended_action,\n    \n    current_timestamp as last_updated\n\nfrom financial_portfolio_summary fps\ncross join customer_portfolio_analysis cpa  \ncross join profitability_analysis pa", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_account_performance_dashboard", "package": null, "version": null}, {"name": "int_customer_financial_summary", "package": null, "version": null}, {"name": "int_product_penetration_analysis", "package": null, "version": null}, {"name": "int_customer_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.customer_360.int_account_performance_dashboard", "model.customer_360.int_customer_financial_summary", "model.customer_360.int_product_penetration_analysis", "model.customer_360.int_customer_profile"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.customer_360.executive_customer_dashboard": {"database": "cosmos", "schema": "cosmos", "name": "executive_customer_dashboard", "resource_type": "model", "package_name": "customer_360", "path": "marts/executive/executive_customer_dashboard.sql", "original_file_path": "models/marts/executive/executive_customer_dashboard.sql", "unique_id": "model.customer_360.executive_customer_dashboard", "fqn": ["customer_360", "marts", "executive", "executive_customer_dashboard"], "alias": "executive_customer_dashboard", "checksum": {"name": "sha256", "checksum": "74318e1325df88b2d228ca1f92199a9fd1dd7d125de2d77b86b368b966668fd0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["gold", "mart", "gold", "mart", "executive", "gold", "mart", "executive", "dashboard"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["gold", "mart", "executive", "dashboard"], "description": "Ultimate C-suite executive dashboard combining ALL intermediate models. Provides comprehensive customer portfolio health, strategic insights,  and executive-level KPIs across risk, finance, digital transformation, retention, and growth opportunities.\n", "columns": {"dashboard_section": {"name": "dashboard_section", "description": "Dashboard section identifier (EXECUTIVE_SUMMARY, SEGMENT_PERFORMANCE)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_customers": {"name": "total_customers", "description": "Total customers in the portfolio", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "high_value_percentage": {"name": "high_value_percentage", "description": "Percentage of high-value customers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "portfolio_health": {"name": "portfolio_health", "description": "Overall portfolio health assessment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "digital_maturity": {"name": "digital_maturity", "description": "Digital transformation maturity level", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/marts/marts_schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["gold", "mart", "executive", "dashboard"]}, "created_at": 1755857463.45741, "relation_name": "\"cosmos\".\"cosmos\".\"executive_customer_dashboard\"", "raw_code": "{{ config(\n    materialized='table',\n    tags=['gold', 'mart', 'executive', 'dashboard']\n) }}\n\n/*\n    Executive Customer Dashboard\n    \n    Ultimate C-suite view combining insights from all intermediate models:\n    - Customer profile and segmentation insights\n    - Financial relationship health and value\n    - Risk and compliance status\n    - Engagement and retention metrics\n    - Channel effectiveness and digital adoption\n    - Account performance and profitability\n    \n    Provides executive-level KPIs, trends, and strategic insights for\n    customer strategy, risk management, and business growth.\n*/\n\nwith customer_health_metrics as (\n    select\n        cp.customer_id,\n        cp.full_name,\n        cp.age,\n        cp.relationship_years,\n        cp.customer_value_segment,\n        cp.lifecycle_stage_name,\n        cp.engagement_level,\n        cp.at_risk_customer,\n        cp.digital_preference,\n        \n        -- Financial Health\n        cfs.total_relationship_value,\n        cfs.net_worth_with_bank,\n        cfs.product_penetration_score,\n        cfs.wealth_tier,\n        cfs.financial_risk_level,\n        \n        -- Risk Assessment\n        crp.overall_risk_level,\n        crp.compliance_status,\n        crp.composite_risk_score,\n        crp.requires_enhanced_monitoring,\n        crp.requires_immediate_review,\n        \n        -- Digital & Channel Engagement\n        ce.digital_adoption_score,\n        ce.channel_diversity_score,\n        ce.channel_preference,\n        ce.service_satisfaction_score,\n        \n        -- Retention Analytics\n        cra.churn_risk_score,\n        cra.retention_opportunity_score,\n        cra.retention_lifecycle_stage,\n        cra.retention_priority,\n        \n        -- Product Analytics\n        ppa.cross_sell_opportunity_score,\n        ppa.product_stickiness_score,\n        ppa.digital_adoption_level,\n        ppa.next_best_product\n        \n    from {{ ref('int_customer_profile') }} cp\n    left join {{ ref('int_customer_financial_summary') }} cfs on cp.customer_id = cfs.customer_id\n    left join {{ ref('int_comprehensive_risk_profile') }} crp on cp.customer_id = crp.customer_id\n    left join {{ ref('int_channel_effectiveness') }} ce on cp.customer_id = ce.customer_id\n    left join {{ ref('int_customer_retention_analytics') }} cra on cp.customer_id = cra.customer_id\n    left join {{ ref('int_product_penetration_analysis') }} ppa on cp.customer_id = ppa.customer_id\n),\n\nexecutive_summary as (\n    select\n        -- Customer Portfolio Health\n        count(*) as total_customers,\n        count(case when customer_value_segment = 'High Value' then 1 end) as high_value_customers,\n        count(case when wealth_tier in ('PRIVATE_BANKING', 'WEALTH_MANAGEMENT') then 1 end) as wealth_management_customers,\n        count(case when engagement_level = 'HIGHLY_ENGAGED' then 1 end) as highly_engaged_customers,\n        count(case when at_risk_customer then 1 end) as at_risk_customers,\n        \n        -- Financial Performance\n        sum(total_relationship_value) as total_customer_assets,\n        avg(total_relationship_value) as avg_relationship_value,\n        sum(case when wealth_tier = 'PRIVATE_BANKING' then total_relationship_value else 0 end) as private_banking_assets,\n        avg(product_penetration_score) as avg_product_penetration,\n        \n        -- Risk Portfolio\n        count(case when overall_risk_level in ('HIGH_RISK', 'CRITICAL_RISK') then 1 end) as high_risk_customers,\n        count(case when compliance_status != 'COMPLIANT' then 1 end) as non_compliant_customers,\n        count(case when requires_immediate_review then 1 end) as customers_needing_review,\n        avg(composite_risk_score) as avg_risk_score,\n        \n        -- Digital Transformation\n        count(case when digital_preference in ('DIGITAL_FIRST', 'DIGITAL_PREFERRED') then 1 end) as digital_preferred_customers,\n        avg(digital_adoption_score) as avg_digital_adoption,\n        count(case when channel_preference = 'OMNI_CHANNEL' then 1 end) as omni_channel_customers,\n        \n        -- Retention & Growth\n        count(case when churn_risk_score >= 70 then 1 end) as high_churn_risk_customers,\n        count(case when retention_priority = 'CRITICAL' then 1 end) as critical_retention_cases,\n        count(case when cross_sell_opportunity_score >= 75 then 1 end) as high_cross_sell_opportunities,\n        avg(retention_opportunity_score) as avg_retention_opportunity,\n        \n        -- Service Excellence\n        avg(service_satisfaction_score) as avg_service_satisfaction,\n        count(case when service_satisfaction_score >= 4 then 1 end) as highly_satisfied_customers,\n        count(case when service_satisfaction_score <= 2 then 1 end) as dissatisfied_customers\n        \n    from customer_health_metrics\n),\n\nsegment_performance as (\n    select\n        customer_value_segment,\n        count(*) as customer_count,\n        round(count(*)::numeric / sum(count(*)) over () * 100, 1) as segment_percentage,\n        sum(total_relationship_value) as segment_assets,\n        avg(total_relationship_value) as avg_relationship_value,\n        avg(product_penetration_score) as avg_product_penetration,\n        avg(digital_adoption_score) as avg_digital_adoption,\n        avg(churn_risk_score) as avg_churn_risk,\n        count(case when at_risk_customer then 1 end) as at_risk_count,\n        count(case when cross_sell_opportunity_score >= 75 then 1 end) as cross_sell_opportunities\n    from customer_health_metrics\n    where customer_value_segment is not null\n    group by customer_value_segment\n),\n\nrisk_heatmap as (\n    select\n        overall_risk_level,\n        financial_risk_level,\n        count(*) as customer_count,\n        sum(total_relationship_value) as assets_at_risk,\n        avg(composite_risk_score) as avg_risk_score,\n        count(case when requires_immediate_review then 1 end) as immediate_action_required\n    from customer_health_metrics\n    where overall_risk_level is not null and financial_risk_level is not null\n    group by overall_risk_level, financial_risk_level\n),\n\nretention_insights as (\n    select\n        retention_lifecycle_stage,\n        count(*) as customer_count,\n        sum(total_relationship_value) as revenue_at_risk,\n        avg(churn_risk_score) as avg_churn_risk,\n        avg(retention_opportunity_score) as avg_retention_opportunity,\n        count(case when retention_priority in ('CRITICAL', 'WIN_BACK') then 1 end) as priority_actions_needed\n    from customer_health_metrics\n    where retention_lifecycle_stage is not null\n    group by retention_lifecycle_stage\n),\n\ndigital_transformation_metrics as (\n    select\n        digital_preference,\n        channel_preference,\n        count(*) as customer_count,\n        avg(digital_adoption_score) as avg_digital_adoption,\n        avg(channel_diversity_score) as avg_channel_diversity,\n        avg(service_satisfaction_score) as avg_satisfaction,\n        sum(total_relationship_value) as segment_value\n    from customer_health_metrics\n    where digital_preference is not null and channel_preference is not null\n    group by digital_preference, channel_preference\n)\n\nselect\n    'EXECUTIVE_SUMMARY' as dashboard_section,\n    current_date as report_date,\n    \n    -- Portfolio Overview\n    es.total_customers,\n    es.high_value_customers,\n    round(es.high_value_customers::numeric / es.total_customers * 100, 1) as high_value_percentage,\n    es.wealth_management_customers,\n    es.highly_engaged_customers,\n    round(es.highly_engaged_customers::numeric / es.total_customers * 100, 1) as engagement_rate,\n    \n    -- Financial Health\n    es.total_customer_assets,\n    es.avg_relationship_value,\n    es.private_banking_assets,\n    round(es.private_banking_assets / es.total_customer_assets * 100, 1) as private_banking_share,\n    round(es.avg_product_penetration, 1) as avg_product_penetration,\n    \n    -- Risk Management\n    es.high_risk_customers,\n    round(es.high_risk_customers::numeric / es.total_customers * 100, 1) as high_risk_percentage,\n    es.non_compliant_customers,\n    es.customers_needing_review,\n    round(es.avg_risk_score, 0) as avg_risk_score,\n    \n    -- Digital Excellence\n    es.digital_preferred_customers,\n    round(es.digital_preferred_customers::numeric / es.total_customers * 100, 1) as digital_adoption_rate,\n    round(es.avg_digital_adoption, 1) as avg_digital_score,\n    es.omni_channel_customers,\n    \n    -- Retention & Growth\n    es.high_churn_risk_customers,\n    round(es.high_churn_risk_customers::numeric / es.total_customers * 100, 1) as churn_risk_rate,\n    es.critical_retention_cases,\n    es.high_cross_sell_opportunities,\n    round(es.avg_retention_opportunity, 1) as avg_retention_opportunity,\n    \n    -- Service Excellence\n    round(es.avg_service_satisfaction, 2) as avg_service_satisfaction,\n    es.highly_satisfied_customers,\n    round(es.highly_satisfied_customers::numeric / es.total_customers * 100, 1) as satisfaction_rate,\n    es.dissatisfied_customers,\n    \n    -- Strategic Insights\n    case \n        when es.total_customers = 0 or es.total_customers is null or es.high_value_customers is null then 'GROWTH_OPPORTUNITY'\n        when es.high_value_customers::numeric / es.total_customers >= 0.2 then 'STRONG_VALUE_MIX'\n        when es.high_value_customers::numeric / es.total_customers >= 0.1 then 'BALANCED_PORTFOLIO' \n        else 'GROWTH_OPPORTUNITY'\n    end as portfolio_health,\n    \n    case \n        when es.avg_digital_adoption is null then 'DIGITAL_OPPORTUNITY'\n        when es.avg_digital_adoption >= 75 then 'DIGITAL_LEADER'\n        when es.avg_digital_adoption >= 50 then 'DIGITAL_PROGRESSIVE'\n        else 'DIGITAL_OPPORTUNITY'\n    end as digital_maturity,\n    \n    case \n        when es.high_risk_customers::numeric / es.total_customers <= 0.05 then 'LOW_RISK_PORTFOLIO'\n        when es.high_risk_customers::numeric / es.total_customers <= 0.15 then 'MANAGED_RISK'\n        else 'HIGH_RISK_ATTENTION_NEEDED'\n    end as risk_profile_status,\n    \n    -- Priority Actions\n    greatest(es.customers_needing_review, 0) as immediate_actions_required,\n    greatest(es.critical_retention_cases, 0) as retention_actions_required,\n    greatest(es.high_cross_sell_opportunities, 0) as growth_opportunities_available,\n    \n    current_timestamp as last_updated\n\nfrom executive_summary es\n\nunion all\n\nselect\n    'SEGMENT_PERFORMANCE' as dashboard_section,\n    current_date as report_date,\n    \n    -- Segment Metrics (will create separate rows for each segment)\n    sp.customer_count as total_customers,\n    null as high_value_customers,\n    sp.segment_percentage as high_value_percentage,\n    null as wealth_management_customers,\n    null as highly_engaged_customers,\n    null as engagement_rate,\n    \n    sp.segment_assets as total_customer_assets,\n    sp.avg_relationship_value,\n    null as private_banking_assets,\n    null as private_banking_share,\n    sp.avg_product_penetration,\n    \n    null as high_risk_customers,\n    null as high_risk_percentage,\n    null as non_compliant_customers,\n    null as customers_needing_review,\n    null as avg_risk_score,\n    \n    null as digital_preferred_customers,\n    null as digital_adoption_rate,\n    sp.avg_digital_adoption as avg_digital_score,\n    null as omni_channel_customers,\n    \n    null as high_churn_risk_customers,\n    sp.avg_churn_risk as churn_risk_rate,\n    null as critical_retention_cases,\n    sp.cross_sell_opportunities as high_cross_sell_opportunities,\n    null as avg_retention_opportunity,\n    \n    null as avg_service_satisfaction,\n    null as highly_satisfied_customers,\n    null as satisfaction_rate,\n    null as dissatisfied_customers,\n    \n    case \n        when sp.customer_value_segment = 'High Value' then 'STRONG_VALUE_MIX'\n        when sp.customer_value_segment = 'Medium Value' then 'BALANCED_PORTFOLIO'\n        when sp.customer_value_segment = 'Standard Value' then 'GROWTH_OPPORTUNITY'\n        else 'GROWTH_OPPORTUNITY'\n    end as portfolio_health,\n    null as digital_maturity,\n    null as risk_profile_status,\n    \n    null as immediate_actions_required,\n    sp.at_risk_count as retention_actions_required,\n    sp.cross_sell_opportunities as growth_opportunities_available,\n    \n    current_timestamp as last_updated\n\nfrom segment_performance sp\nwhere sp.customer_value_segment is not null\n\norder by dashboard_section, high_value_percentage desc nulls last", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_profile", "package": null, "version": null}, {"name": "int_customer_financial_summary", "package": null, "version": null}, {"name": "int_comprehensive_risk_profile", "package": null, "version": null}, {"name": "int_channel_effectiveness", "package": null, "version": null}, {"name": "int_customer_retention_analytics", "package": null, "version": null}, {"name": "int_product_penetration_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.customer_360.int_customer_profile", "model.customer_360.int_customer_financial_summary", "model.customer_360.int_comprehensive_risk_profile", "model.customer_360.int_channel_effectiveness", "model.customer_360.int_customer_retention_analytics", "model.customer_360.int_product_penetration_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.customer_360.int_comprehensive_risk_profile": {"database": "cosmos", "schema": "cosmos", "name": "int_comprehensive_risk_profile", "resource_type": "model", "package_name": "customer_360", "path": "intermediate/risk_analytics/int_comprehensive_risk_profile.sql", "original_file_path": "models/intermediate/risk_analytics/int_comprehensive_risk_profile.sql", "unique_id": "model.customer_360.int_comprehensive_risk_profile", "fqn": ["customer_360", "intermediate", "risk_analytics", "int_comprehensive_risk_profile"], "alias": "int_comprehensive_risk_profile", "checksum": {"name": "sha256", "checksum": "a4ff702a68a7fb0ab7ac99c13bcda29280cbc47d7d680177e43da1f55538bc8c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver", "intermediate", "silver", "intermediate", "risk_analytics", "silver", "intermediate", "risk_analytics", "compliance"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver", "intermediate", "risk_analytics", "compliance"], "description": "Integrated risk assessment combining risk assessments, fraud alerts,  compliance screening, credit scores, and KYC data. Provides unified risk scoring and regulatory compliance status.\n", "columns": {"customer_id": {"name": "customer_id", "description": "Unique customer identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "composite_risk_score": {"name": "composite_risk_score", "description": "Weighted composite risk score across all risk types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "overall_risk_level": {"name": "overall_risk_level", "description": "Overall risk classification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "compliance_status": {"name": "compliance_status", "description": "Regulatory compliance status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requires_enhanced_monitoring": {"name": "requires_enhanced_monitoring", "description": "Flag for enhanced monitoring requirement", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requires_immediate_review": {"name": "requires_immediate_review", "description": "Flag for immediate review requirement", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "risk_trend": {"name": "risk_trend", "description": "Risk trend analysis", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/intermediate/intermediate_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["silver", "intermediate", "risk_analytics", "compliance"]}, "created_at": 1755857463.515338, "relation_name": "\"cosmos\".\"cosmos\".\"int_comprehensive_risk_profile\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['silver', 'intermediate', 'risk_analytics', 'compliance']\n) }}\n\n/*\n    Comprehensive Risk Profile\n    \n    Integrated risk assessment combining:\n    - Risk assessments (stg_risk_assessments)\n    - Fraud detection alerts (stg_fraud_alerts)\n    - Compliance screening (stg_compliance_records)\n    - Credit score history (stg_credit_scores)\n    - KYC compliance (stg_kyc_records)\n    - Account alerts (stg_account_alerts)\n    \n    Provides unified risk scoring and regulatory compliance status.\n*/\n\nwith risk_assessment_ranked as (\n    select\n        customer_id,\n        risk_type,\n        risk_score,\n        risk_rating,\n        assessment_date,\n        requires_review,\n        row_number() over (partition by customer_id, risk_type order by assessment_date desc) as rn\n    from {{ ref('stg_risk_assessments') }}\n),\n\nlatest_risk_assessment as (\n    select\n        customer_id,\n        risk_type,\n        risk_score,\n        risk_rating,\n        assessment_date,\n        requires_review\n    from risk_assessment_ranked\n    where rn = 1\n),\n\nrisk_summary as (\n    select\n        customer_id,\n        count(*) as total_risk_assessments,\n        max(case when risk_type = 'CREDIT_RISK' then risk_score end) as latest_credit_risk_score,\n        max(case when risk_type = 'FRAUD_RISK' then risk_score end) as latest_fraud_risk_score,\n        max(case when risk_type = 'OPERATIONAL_RISK' then risk_score end) as latest_operational_risk_score,\n        max(case when risk_type = 'MARKET_RISK' then risk_score end) as latest_market_risk_score,\n        max(case when risk_type = 'CREDIT_RISK' then risk_rating end) as credit_risk_rating,\n        max(case when risk_type = 'FRAUD_RISK' then risk_rating end) as fraud_risk_rating,\n        max(assessment_date) as last_risk_assessment_date,\n        sum(case when requires_review then 1 else 0 end) as assessments_requiring_review\n    from latest_risk_assessment\n    group by customer_id\n),\n\nfraud_summary as (\n    select\n        customer_id,\n        count(*) as total_fraud_alerts,\n        count(case when alert_status = 'CONFIRMED_FRAUD' then 1 end) as confirmed_fraud_alerts,\n        count(case when alert_status = 'FALSE_POSITIVE' then 1 end) as false_positive_alerts,\n        count(case when alert_status = 'UNDER_REVIEW' then 1 end) as pending_fraud_alerts,\n        max(risk_score) as highest_fraud_risk_score,\n        avg(risk_score) as avg_fraud_risk_score,\n        max(alert_timestamp::date) as last_fraud_alert_date,\n        count(case when alert_type = 'UNUSUAL_TRANSACTION' then 1 end) as unusual_transaction_alerts,\n        count(case when alert_type = 'VELOCITY_CHECK' then 1 end) as velocity_alerts\n    from {{ ref('stg_fraud_alerts') }}\n    group by customer_id\n),\n\ncompliance_summary as (\n    select\n        customer_id,\n        count(*) as total_compliance_checks,\n        count(case when compliance_status = 'FLAGGED' then 1 end) as compliance_flags,\n        max(check_date) as last_compliance_check_date,\n        count(case when compliance_type = 'AML_SCREENING' then 1 end) as aml_checks,\n        count(case when compliance_type = 'SANCTIONS_CHECK' then 1 end) as sanctions_checks,\n        count(case when compliance_type = 'PEP_SCREENING' then 1 end) as pep_checks,\n        sum(case when compliance_type = 'AML_SCREENING' and compliance_status = 'FLAGGED' then 1 else 0 end) as aml_flags,\n        sum(case when compliance_type = 'SANCTIONS_CHECK' and compliance_status = 'FLAGGED' then 1 else 0 end) as sanctions_flags\n    from {{ ref('stg_compliance_records') }}\n    group by customer_id\n),\n\ncredit_score_summary as (\n    select\n        customer_id,\n        count(*) as total_credit_reports,\n        max(credit_score) as highest_credit_score,\n        min(credit_score) as lowest_credit_score,\n        avg(credit_score) as avg_credit_score,\n        max(score_date) as last_credit_score_date,\n        max(case when bureau = 'EXPERIAN' then credit_score end) as latest_experian_score,\n        max(case when bureau = 'EQUIFAX' then credit_score end) as latest_equifax_score,\n        max(case when bureau = 'TRANSUNION' then credit_score end) as latest_transunion_score,\n        stddev(credit_score) as credit_score_volatility\n    from {{ ref('stg_credit_scores') }}\n    group by customer_id\n),\n\nkyc_summary as (\n    select\n        customer_id,\n        count(*) as total_kyc_checks,\n        count(case when status = 'PASSED' then 1 end) as passed_kyc_checks,\n        count(case when status = 'FAILED' then 1 end) as failed_kyc_checks,\n        max(review_date) as last_kyc_check_date,\n        count(case when kyc_type = 'ENHANCED_DD' then 1 end) as enhanced_dd_checks,\n        max(case when kyc_type = 'INITIAL' then review_date end) as initial_kyc_date\n    from {{ ref('stg_kyc_records') }}\n    group by customer_id\n),\n\naccount_alert_summary as (\n    select\n        a.customer_id,\n        count(aa.alert_id) as total_account_alerts,\n        count(case when aa.alert_type = 'UNUSUAL_ACTIVITY' then 1 end) as unusual_activity_alerts,\n        count(case when aa.alert_type = 'LOW_BALANCE' then 1 end) as low_balance_alerts,\n        count(case when aa.alert_status = 'PENDING' then 1 end) as pending_alerts,\n        max(aa.alert_timestamp::date) as last_account_alert_date\n    from {{ ref('stg_accounts') }} a\n    left join {{ ref('stg_account_alerts') }} aa on a.account_id = aa.account_id\n    group by a.customer_id\n)\n\nselect\n    -- Customer identifier\n    coalesce(\n        rs.customer_id,\n        fs.customer_id,\n        cs.customer_id,\n        css.customer_id,\n        ks.customer_id,\n        aas.customer_id\n    ) as customer_id,\n    \n    -- Risk Assessment Scores\n    coalesce(rs.latest_credit_risk_score, 500) as current_credit_risk_score,\n    coalesce(rs.latest_fraud_risk_score, 500) as current_fraud_risk_score,\n    coalesce(rs.latest_operational_risk_score, 500) as current_operational_risk_score,\n    coalesce(rs.latest_market_risk_score, 500) as current_market_risk_score,\n    rs.credit_risk_rating,\n    rs.fraud_risk_rating,\n    rs.last_risk_assessment_date,\n    \n    -- Fraud Metrics\n    coalesce(fs.total_fraud_alerts, 0) as total_fraud_alerts,\n    coalesce(fs.confirmed_fraud_alerts, 0) as confirmed_fraud_incidents,\n    coalesce(fs.false_positive_alerts, 0) as false_positive_alerts,\n    coalesce(fs.pending_fraud_alerts, 0) as pending_fraud_investigations,\n    coalesce(fs.highest_fraud_risk_score, 0) as highest_fraud_risk_score,\n    fs.last_fraud_alert_date,\n    \n    -- Compliance Status\n    coalesce(cs.total_compliance_checks, 0) as total_compliance_checks,\n    coalesce(cs.compliance_flags, 0) as total_compliance_flags,\n    coalesce(cs.aml_flags, 0) as aml_flags,\n    coalesce(cs.sanctions_flags, 0) as sanctions_flags,\n    cs.last_compliance_check_date,\n    \n    -- Credit Profile\n    coalesce(css.avg_credit_score, 500) as avg_credit_score,\n    css.highest_credit_score,\n    css.lowest_credit_score,\n    css.latest_experian_score,\n    css.latest_equifax_score,\n    css.latest_transunion_score,\n    coalesce(css.credit_score_volatility, 0) as credit_score_volatility,\n    css.last_credit_score_date,\n    \n    -- KYC Compliance\n    coalesce(ks.total_kyc_checks, 0) as total_kyc_checks,\n    coalesce(ks.passed_kyc_checks, 0) as passed_kyc_checks,\n    coalesce(ks.failed_kyc_checks, 0) as failed_kyc_checks,\n    ks.last_kyc_check_date,\n    ks.initial_kyc_date,\n    \n    -- Account Monitoring\n    coalesce(aas.total_account_alerts, 0) as total_account_alerts,\n    coalesce(aas.unusual_activity_alerts, 0) as unusual_activity_alerts,\n    coalesce(aas.pending_alerts, 0) as pending_account_alerts,\n    aas.last_account_alert_date,\n    \n    -- Composite Risk Scores\n    (\n        coalesce(rs.latest_credit_risk_score, 500) * 0.3 +\n        coalesce(rs.latest_fraud_risk_score, 500) * 0.3 +\n        coalesce(css.avg_credit_score, 500) * 0.2 +\n        (850 - coalesce(fs.highest_fraud_risk_score, 0)) * 0.2\n    ) as composite_risk_score,\n    \n    -- Risk Classifications\n    case \n        when fs.confirmed_fraud_alerts > 0 or cs.sanctions_flags > 0 then 'CRITICAL_RISK'\n        when fs.pending_fraud_alerts > 0 or cs.aml_flags > 0 or ks.failed_kyc_checks > 0 then 'HIGH_RISK'\n        when rs.latest_credit_risk_score < 550 or rs.latest_fraud_risk_score < 550 then 'ELEVATED_RISK'\n        when css.avg_credit_score < 580 or fs.total_fraud_alerts > 2 then 'MODERATE_RISK'\n        else 'LOW_RISK'\n    end as overall_risk_level,\n    \n    -- Compliance Status\n    case \n        when cs.sanctions_flags > 0 or cs.aml_flags > 0 then 'NON_COMPLIANT'\n        when ks.failed_kyc_checks > 0 or cs.compliance_flags > 0 then 'REVIEW_REQUIRED'\n        when ks.passed_kyc_checks > 0 and cs.total_compliance_checks > 0 then 'COMPLIANT'\n        else 'PENDING_VERIFICATION'\n    end as compliance_status,\n    \n    -- Monitoring Flags\n    case \n        when fs.confirmed_fraud_alerts > 0 then true\n        when cs.sanctions_flags > 0 or cs.aml_flags > 0 then true\n        when ks.failed_kyc_checks > 0 then true\n        when aas.unusual_activity_alerts > 5 then true\n        else false\n    end as requires_enhanced_monitoring,\n    \n    case \n        when fs.pending_fraud_alerts > 0 then true\n        when cs.compliance_flags > ks.passed_kyc_checks then true\n        when rs.assessments_requiring_review > 0 then true\n        when aas.pending_alerts > 0 then true\n        else false\n    end as requires_immediate_review,\n    \n    -- Risk Trend Indicators\n    case \n        when css.credit_score_volatility > 50 then 'VOLATILE'\n        when fs.total_fraud_alerts > css.total_credit_reports then 'DETERIORATING'\n        when css.highest_credit_score - css.lowest_credit_score > 100 then 'UNSTABLE'\n        else 'STABLE'\n    end as risk_trend,\n    \n    current_timestamp as last_updated\n\nfrom risk_summary rs\nfull outer join fraud_summary fs on rs.customer_id = fs.customer_id\nfull outer join compliance_summary cs on coalesce(rs.customer_id, fs.customer_id) = cs.customer_id\nfull outer join credit_score_summary css on coalesce(rs.customer_id, fs.customer_id, cs.customer_id) = css.customer_id\nfull outer join kyc_summary ks on coalesce(rs.customer_id, fs.customer_id, cs.customer_id, css.customer_id) = ks.customer_id\nfull outer join account_alert_summary aas on coalesce(rs.customer_id, fs.customer_id, cs.customer_id, css.customer_id, ks.customer_id) = aas.customer_id", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_risk_assessments", "package": null, "version": null}, {"name": "stg_fraud_alerts", "package": null, "version": null}, {"name": "stg_compliance_records", "package": null, "version": null}, {"name": "stg_credit_scores", "package": null, "version": null}, {"name": "stg_kyc_records", "package": null, "version": null}, {"name": "stg_accounts", "package": null, "version": null}, {"name": "stg_account_alerts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.customer_360.stg_risk_assessments", "model.customer_360.stg_fraud_alerts", "model.customer_360.stg_compliance_records", "model.customer_360.stg_credit_scores", "model.customer_360.stg_kyc_records", "model.customer_360.stg_accounts", "model.customer_360.stg_account_alerts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_id"], "time_spine": null}, "model.customer_360.int_transaction_analytics": {"database": "cosmos", "schema": "cosmos", "name": "int_transaction_analytics", "resource_type": "model", "package_name": "customer_360", "path": "intermediate/financial_metrics/int_transaction_analytics.sql", "original_file_path": "models/intermediate/financial_metrics/int_transaction_analytics.sql", "unique_id": "model.customer_360.int_transaction_analytics", "fqn": ["customer_360", "intermediate", "financial_metrics", "int_transaction_analytics"], "alias": "int_transaction_analytics", "checksum": {"name": "sha256", "checksum": "3a750f19dd26c8972484270128fcab1b5bf7e119b68c4691a635335c460e383b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver", "intermediate", "silver", "intermediate", "financial_metrics", "silver", "intermediate", "financial_metrics", "transactions"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver", "intermediate", "financial_metrics", "transactions"], "description": "Comprehensive transaction behavior analysis combining all transaction types: transactions, deposits, withdrawals, transfers, payments, and fees. Provides spending patterns, cash flow analysis, and behavioral insights.\n", "columns": {"account_id": {"name": "account_id", "description": "Unique account identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_transaction_volume": {"name": "total_transaction_volume", "description": "Total monetary volume of all transactions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "net_cash_flow": {"name": "net_cash_flow", "description": "Net cash flow (inflows minus outflows)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "digital_transaction_percentage": {"name": "digital_transaction_percentage", "description": "Percentage of transactions conducted digitally", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "activity_level": {"name": "activity_level", "description": "Account activity classification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spending_category": {"name": "spending_category", "description": "Customer spending behavior classification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/intermediate/intermediate_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["silver", "intermediate", "financial_metrics", "transactions"]}, "created_at": 1755857463.5131478, "relation_name": "\"cosmos\".\"cosmos\".\"int_transaction_analytics\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['silver', 'intermediate', 'financial_metrics', 'transactions']\n) }}\n\n/*\n    Transaction Analytics Summary\n    \n    Comprehensive transaction behavior analysis combining:\n    - All transactions (stg_transactions)\n    - Deposits (stg_deposits)\n    - Withdrawals (stg_withdrawals)\n    - Transfers (stg_transfers)\n    - Payments (stg_payments)\n    - Fees (stg_fees)\n    \n    Provides spending patterns, cash flow analysis, and behavioral insights.\n*/\n\nwith transaction_summary as (\n    select\n        t.account_id,\n        count(*) as total_transactions,\n        sum(t.transaction_amount) as total_transaction_volume,\n        avg(t.transaction_amount) as avg_transaction_amount,\n        max(t.transaction_amount) as largest_transaction,\n        min(t.transaction_amount) as smallest_transaction,\n        count(case when t.flow_direction = 'INFLOW' then 1 end) as inflow_transactions,\n        count(case when t.flow_direction = 'OUTFLOW' then 1 end) as outflow_transactions,\n        sum(case when t.flow_direction = 'INFLOW' then t.transaction_amount else 0 end) as total_inflows,\n        sum(case when t.flow_direction = 'OUTFLOW' then t.transaction_amount else 0 end) as total_outflows,\n        count(case when t.is_digital_transaction then 1 end) as digital_transactions,\n        count(case when t.channel_category = 'DIGITAL' then 1 end) as digital_channel_transactions,\n        count(case when t.time_category = 'OFF_HOURS' then 1 end) as off_hours_transactions,\n        count(case when t.amount_category = 'LARGE' then 1 end) as large_amount_transactions,\n        avg(t.risk_score) as avg_transaction_risk_score,\n        max(t.transaction_date) as last_transaction_date,\n        min(t.transaction_date) as first_transaction_date\n    from {{ ref('stg_transactions') }} t\n    where t.transaction_status = 'COMPLETED'\n    group by t.account_id\n),\n\ndeposit_summary as (\n    select\n        account_id,\n        count(*) as total_deposits,\n        sum(deposit_amount) as total_deposit_amount,\n        avg(deposit_amount) as avg_deposit_amount,\n        count(case when channel_type = 'DIGITAL' then 1 end) as digital_deposits,\n        count(case when deposit_type = 'PAYROLL' then 1 end) as payroll_deposits,\n        sum(case when deposit_type = 'PAYROLL' then deposit_amount else 0 end) as payroll_deposit_amount,\n        max(deposit_datetime::date) as last_deposit_date\n    from {{ ref('stg_deposits') }}\n    where deposit_status = 'CLEARED'\n    group by account_id\n),\n\nwithdrawal_summary as (\n    select\n        account_id,\n        count(*) as total_withdrawals,\n        sum(withdrawal_amount) as total_withdrawal_amount,\n        avg(withdrawal_amount) as avg_withdrawal_amount,\n        count(case when withdrawal_type = 'ATM' then 1 end) as atm_withdrawals,\n        count(case when withdrawal_type = 'ONLINE' then 1 end) as online_withdrawals,\n        count(case when amount_category = 'LARGE' then 1 end) as large_withdrawals,\n        max(withdrawal_datetime::date) as last_withdrawal_date\n    from {{ ref('stg_withdrawals') }}\n    where withdrawal_status = 'COMPLETED'\n    group by account_id\n),\n\noutbound_transfers as (\n    select\n        from_account_id as account_id,\n        count(*) as outbound_transfer_count,\n        sum(transfer_amount) as outbound_transfer_amount,\n        avg(transfer_amount) as avg_outbound_transfer_amount\n    from {{ ref('stg_transfers') }}\n    where transfer_status = 'COMPLETED'\n    group by from_account_id\n),\n\ninbound_transfers as (\n    select\n        to_account_id as account_id,\n        count(*) as inbound_transfer_count,\n        sum(transfer_amount) as inbound_transfer_amount,\n        avg(transfer_amount) as avg_inbound_transfer_amount\n    from {{ ref('stg_transfers') }}\n    where transfer_status = 'COMPLETED'\n    group by to_account_id\n),\n\ntransfer_combined as (\n    select\n        coalesce(ot.account_id, it.account_id) as account_id,\n        coalesce(ot.outbound_transfer_count, 0) as total_outbound_transfers,\n        coalesce(it.inbound_transfer_count, 0) as total_inbound_transfers,\n        coalesce(ot.outbound_transfer_amount, 0) as total_outbound_transfer_amount,\n        coalesce(it.inbound_transfer_amount, 0) as total_inbound_transfer_amount\n    from outbound_transfers ot\n    full outer join inbound_transfers it on ot.account_id = it.account_id\n),\n\npayment_summary as (\n    select\n        account_id,\n        count(*) as total_payments,\n        sum(payment_amount) as total_payment_amount,\n        avg(payment_amount) as avg_payment_amount,\n        count(case when payment_type = 'BILL_PAY' then 1 end) as bill_payments,\n        count(case when payment_type = 'PERSON_TO_PERSON' then 1 end) as p2p_payments,\n        max(payment_date) as last_payment_date\n    from {{ ref('stg_payments') }}\n    where payment_status = 'COMPLETED'\n    group by account_id\n),\n\nfee_summary as (\n    select\n        account_id,\n        count(*) as total_fees,\n        sum(fee_amount) as total_fee_amount,\n        avg(fee_amount) as avg_fee_amount,\n        count(case when fee_classification = 'PENALTY' then 1 end) as penalty_fees,\n        sum(case when fee_classification = 'PENALTY' then fee_amount else 0 end) as penalty_fee_amount,\n        count(case when fee_status = 'WAIVED' then 1 end) as waived_fees,\n        max(fee_date) as last_fee_date\n    from {{ ref('stg_fees') }}\n    where fee_status = 'CHARGED'\n    group by account_id\n)\n\nselect\n    -- Account identifier\n    coalesce(\n        ts.account_id,\n        ds.account_id,\n        ws.account_id,\n        tc.account_id,\n        ps.account_id,\n        fs.account_id\n    ) as account_id,\n    \n    -- Overall Transaction Metrics\n    coalesce(ts.total_transactions, 0) as total_transactions,\n    coalesce(ts.total_transaction_volume, 0) as total_transaction_volume,\n    coalesce(ts.avg_transaction_amount, 0) as avg_transaction_amount,\n    ts.largest_transaction,\n    ts.first_transaction_date,\n    ts.last_transaction_date,\n    \n    -- Cash Flow Analysis\n    coalesce(ts.total_inflows, 0) as total_inflows,\n    coalesce(ts.total_outflows, 0) as total_outflows,\n    (coalesce(ts.total_inflows, 0) - coalesce(ts.total_outflows, 0)) as net_cash_flow,\n    \n    -- Specific Transaction Types\n    coalesce(ds.total_deposits, 0) as total_deposits,\n    coalesce(ds.total_deposit_amount, 0) as total_deposit_amount,\n    coalesce(ds.payroll_deposits, 0) as payroll_deposits,\n    coalesce(ds.payroll_deposit_amount, 0) as payroll_deposit_amount,\n    \n    coalesce(ws.total_withdrawals, 0) as total_withdrawals,\n    coalesce(ws.total_withdrawal_amount, 0) as total_withdrawal_amount,\n    coalesce(ws.atm_withdrawals, 0) as atm_withdrawals,\n    \n    coalesce(tc.total_outbound_transfers, 0) as outbound_transfers,\n    coalesce(tc.total_inbound_transfers, 0) as inbound_transfers,\n    coalesce(tc.total_outbound_transfer_amount, 0) as outbound_transfer_amount,\n    coalesce(tc.total_inbound_transfer_amount, 0) as inbound_transfer_amount,\n    \n    coalesce(ps.total_payments, 0) as total_payments,\n    coalesce(ps.total_payment_amount, 0) as total_payment_amount,\n    coalesce(ps.bill_payments, 0) as bill_payments,\n    coalesce(ps.p2p_payments, 0) as p2p_payments,\n    \n    -- Fee Analysis\n    coalesce(fs.total_fees, 0) as total_fees,\n    coalesce(fs.total_fee_amount, 0) as total_fee_amount,\n    coalesce(fs.penalty_fees, 0) as penalty_fees,\n    coalesce(fs.penalty_fee_amount, 0) as penalty_fee_amount,\n    \n    -- Digital Adoption Metrics\n    coalesce(ts.digital_transactions, 0) as digital_transactions,\n    case \n        when ts.total_transactions > 0 then \n            round(ts.digital_transactions::numeric / ts.total_transactions * 100, 2)\n        else 0 \n    end as digital_transaction_percentage,\n    \n    coalesce(ds.digital_deposits, 0) as digital_deposits,\n    case \n        when ds.total_deposits > 0 then \n            round(ds.digital_deposits::numeric / ds.total_deposits * 100, 2)\n        else 0 \n    end as digital_deposit_percentage,\n    \n    -- Behavioral Patterns\n    coalesce(ts.off_hours_transactions, 0) as off_hours_transactions,\n    coalesce(ts.large_amount_transactions, 0) as large_amount_transactions,\n    coalesce(ts.avg_transaction_risk_score, 0) as avg_transaction_risk_score,\n    \n    -- Transaction Frequency Analysis\n    case \n        when ts.last_transaction_date is not null and ts.first_transaction_date is not null then\n            ts.total_transactions::numeric / greatest(\n                (ts.last_transaction_date - ts.first_transaction_date)::int + 1, 1\n            )\n        else 0\n    end as avg_daily_transaction_frequency,\n    \n    -- Spending Categories\n    case \n        when coalesce(ts.total_outflows, 0) >= 10000 then 'HIGH_SPENDER'\n        when coalesce(ts.total_outflows, 0) >= 5000 then 'MEDIUM_SPENDER'\n        when coalesce(ts.total_outflows, 0) >= 1000 then 'MODERATE_SPENDER'\n        else 'LOW_SPENDER'\n    end as spending_category,\n    \n    -- Account Activity Level\n    case \n        when coalesce(ts.total_transactions, 0) >= 100 then 'VERY_ACTIVE'\n        when coalesce(ts.total_transactions, 0) >= 50 then 'ACTIVE'\n        when coalesce(ts.total_transactions, 0) >= 20 then 'MODERATE'\n        when coalesce(ts.total_transactions, 0) >= 5 then 'LIGHT'\n        else 'MINIMAL'\n    end as activity_level,\n    \n    -- Fee Burden Analysis\n    case \n        when ts.total_transaction_volume > 0 then\n            round(coalesce(fs.total_fee_amount, 0) / ts.total_transaction_volume * 100, 4)\n        else 0\n    end as fee_to_volume_ratio,\n    \n    current_timestamp as last_updated\n\nfrom transaction_summary ts\nfull outer join deposit_summary ds on ts.account_id = ds.account_id\nfull outer join withdrawal_summary ws on coalesce(ts.account_id, ds.account_id) = ws.account_id\nfull outer join transfer_combined tc on coalesce(ts.account_id, ds.account_id, ws.account_id) = tc.account_id\nfull outer join payment_summary ps on coalesce(ts.account_id, ds.account_id, ws.account_id, tc.account_id) = ps.account_id\nfull outer join fee_summary fs on coalesce(ts.account_id, ds.account_id, ws.account_id, tc.account_id, ps.account_id) = fs.account_id", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_transactions", "package": null, "version": null}, {"name": "stg_deposits", "package": null, "version": null}, {"name": "stg_withdrawals", "package": null, "version": null}, {"name": "stg_transfers", "package": null, "version": null}, {"name": "stg_transfers", "package": null, "version": null}, {"name": "stg_payments", "package": null, "version": null}, {"name": "stg_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.customer_360.stg_transactions", "model.customer_360.stg_deposits", "model.customer_360.stg_withdrawals", "model.customer_360.stg_transfers", "model.customer_360.stg_payments", "model.customer_360.stg_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["account_id"], "time_spine": null}, "model.customer_360.int_customer_financial_summary": {"database": "cosmos", "schema": "cosmos", "name": "int_customer_financial_summary", "resource_type": "model", "package_name": "customer_360", "path": "intermediate/financial_metrics/int_customer_financial_summary.sql", "original_file_path": "models/intermediate/financial_metrics/int_customer_financial_summary.sql", "unique_id": "model.customer_360.int_customer_financial_summary", "fqn": ["customer_360", "intermediate", "financial_metrics", "int_customer_financial_summary"], "alias": "int_customer_financial_summary", "checksum": {"name": "sha256", "checksum": "917a3644f9677482802e8d43900ff08f3079e38c13529fc867368f3acb8d7646"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver", "intermediate", "silver", "intermediate", "financial_metrics", "silver", "intermediate", "financial_metrics", "holdings"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver", "intermediate", "financial_metrics", "holdings"], "description": "Comprehensive financial holdings summary combining all product relationships: accounts, cards, loans, investments, and insurance. Provides total relationship value and product penetration metrics.\n", "columns": {"customer_id": {"name": "customer_id", "description": "Unique customer identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_relationship_value": {"name": "total_relationship_value", "description": "Total value of all customer relationships with the bank", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "net_worth_with_bank": {"name": "net_worth_with_bank", "description": "Customer's net worth considering all assets and liabilities", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_penetration_score": {"name": "product_penetration_score", "description": "Score representing breadth of product adoption (0-100)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "wealth_tier": {"name": "wealth_tier", "description": "Customer wealth classification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "financial_risk_level": {"name": "financial_risk_level", "description": "Overall financial risk assessment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/intermediate/intermediate_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["silver", "intermediate", "financial_metrics", "holdings"]}, "created_at": 1755857463.512218, "relation_name": "\"cosmos\".\"cosmos\".\"int_customer_financial_summary\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['silver', 'intermediate', 'financial_metrics', 'holdings']\n) }}\n\n/*\n    Customer Financial Holdings Summary\n    \n    Comprehensive view of all customer financial relationships:\n    - Deposit accounts (stg_accounts)\n    - Credit & debit cards (stg_cards) \n    - Loan products (stg_loans)\n    - Investment holdings (stg_investments)\n    - Insurance policies (stg_insurance_policies)\n    - Account balances (stg_account_balances)\n    \n    Provides total relationship value and product penetration metrics.\n*/\n\nwith account_summary as (\n    select\n        a.customer_id,\n        count(*) as total_accounts,\n        count(case when a.account_status = 'ACTIVE' then 1 end) as active_accounts,\n        count(case when a.product_type = 'Checking' then 1 end) as checking_accounts,\n        count(case when a.product_type = 'Savings' then 1 end) as savings_accounts,\n        count(case when a.product_type = 'CD' then 1 end) as cd_accounts,\n        count(case when a.product_type = 'Investment' then 1 end) as investment_accounts,\n        sum(a.current_balance) as total_deposit_balances,\n        avg(a.current_balance) as avg_account_balance,\n        max(a.current_balance) as largest_account_balance,\n        sum(a.monthly_fee_revenue) as monthly_fee_revenue,\n        min(a.opened_date) as first_account_opened_date,\n        max(a.opened_date) as latest_account_opened_date\n    from {{ ref('stg_accounts') }} a\n    group by a.customer_id\n),\n\ncard_summary as (\n    select\n        customer_id,\n        count(*) as total_cards,\n        count(case when card_status = 'ACTIVE' then 1 end) as active_cards,\n        count(case when card_type = 'CREDIT' then 1 end) as credit_cards,\n        count(case when card_type = 'DEBIT' then 1 end) as debit_cards,\n        count(case when card_type = 'PREPAID' then 1 end) as prepaid_cards,\n        sum(case when card_type = 'CREDIT' then credit_limit else 0 end) as total_credit_limit,\n        sum(case when card_type = 'CREDIT' then current_balance else 0 end) as total_credit_balance,\n        avg(case when card_type = 'CREDIT' and current_balance > 0 then utilization_rate end) as avg_credit_utilization,\n        max(case when card_type = 'CREDIT' then utilization_rate else 0 end) as max_credit_utilization\n    from {{ ref('stg_cards') }}\n    group by customer_id\n),\n\nloan_summary as (\n    select\n        customer_id,\n        count(*) as total_loans,\n        count(case when loan_status = 'CURRENT' then 1 end) as current_loans,\n        count(case when loan_type = 'MORTGAGE' then 1 end) as mortgages,\n        count(case when loan_type = 'PERSONAL' then 1 end) as personal_loans,\n        count(case when loan_type = 'AUTO' then 1 end) as auto_loans,\n        count(case when loan_type = 'HOME_EQUITY' then 1 end) as home_equity_loans,\n        sum(original_amount) as total_original_loan_amount,\n        sum(current_balance) as total_current_loan_balance,\n        avg(interest_rate) as avg_loan_interest_rate,\n        sum(case when loan_status in ('DELINQUENT', 'DEFAULT') then current_balance else 0 end) as at_risk_loan_balance,\n        count(case when loan_status in ('DELINQUENT', 'DEFAULT') then 1 end) as delinquent_loans\n    from {{ ref('stg_loans') }}\n    group by customer_id\n),\n\ninvestment_summary as (\n    select\n        customer_id,\n        count(*) as total_investments,\n        count(distinct investment_type) as investment_types_held,\n        sum(current_value) as total_investment_value,\n        sum(unrealized_gain_loss) as total_unrealized_gain_loss,\n        avg(return_percent) as avg_investment_return,\n        count(case when investment_type = 'STOCK' then 1 end) as stock_holdings,\n        count(case when investment_type = 'BOND' then 1 end) as bond_holdings,\n        count(case when investment_type = 'MUTUAL_FUND' then 1 end) as mutual_fund_holdings,\n        count(case when account_type = 'IRA' then 1 end) as retirement_accounts,\n        sum(case when account_type in ('IRA', 'ROTH_IRA', '401K') then current_value else 0 end) as retirement_account_value\n    from {{ ref('stg_investments') }}\n    group by customer_id\n),\n\ninsurance_summary as (\n    select\n        customer_id,\n        count(*) as total_policies,\n        count(case when policy_status = 'ACTIVE' then 1 end) as active_policies,\n        count(case when policy_type = 'LIFE' then 1 end) as life_policies,\n        count(case when policy_type = 'AUTO' then 1 end) as auto_policies,\n        count(case when policy_type = 'HOME' then 1 end) as home_policies,\n        count(case when policy_type = 'HEALTH' then 1 end) as health_policies,\n        sum(coverage_amount) as total_coverage_amount,\n        sum(annual_premium) as total_annual_premiums,\n        avg(annual_premium) as avg_policy_premium\n    from {{ ref('stg_insurance_policies') }}\n    group by customer_id\n),\n\nlatest_balances_ranked as (\n    select\n        account_id,\n        balance_amount as latest_balance,\n        available_balance as latest_available_balance,\n        balance_date as latest_balance_date,\n        row_number() over (partition by account_id order by balance_date desc) as rn\n    from {{ ref('stg_account_balances') }}\n),\n\nlatest_balances as (\n    select\n        account_id,\n        latest_balance,\n        latest_available_balance,\n        latest_balance_date\n    from latest_balances_ranked\n    where rn = 1\n)\n\nselect\n    -- Customer identifier\n    coalesce(\n        acs.customer_id, \n        cs.customer_id, \n        ls.customer_id, \n        invs.customer_id, \n        ins.customer_id\n    ) as customer_id,\n    \n    -- Deposit Account Metrics\n    coalesce(acs.total_accounts, 0) as total_deposit_accounts,\n    coalesce(acs.active_accounts, 0) as active_deposit_accounts,\n    coalesce(acs.checking_accounts, 0) as checking_accounts,\n    coalesce(acs.savings_accounts, 0) as savings_accounts,\n    coalesce(acs.cd_accounts, 0) as cd_accounts,\n    coalesce(acs.total_deposit_balances, 0) as total_deposit_balances,\n    coalesce(acs.monthly_fee_revenue, 0) as monthly_fee_revenue,\n    acs.first_account_opened_date,\n    \n    -- Card Metrics\n    coalesce(cs.total_cards, 0) as total_cards,\n    coalesce(cs.active_cards, 0) as active_cards,\n    coalesce(cs.credit_cards, 0) as credit_cards,\n    coalesce(cs.total_credit_limit, 0) as total_credit_limit,\n    coalesce(cs.total_credit_balance, 0) as total_credit_balance,\n    coalesce(cs.avg_credit_utilization, 0) as avg_credit_utilization,\n    \n    -- Loan Metrics\n    coalesce(ls.total_loans, 0) as total_loans,\n    coalesce(ls.current_loans, 0) as current_loans,\n    coalesce(ls.total_current_loan_balance, 0) as total_loan_balance,\n    coalesce(ls.avg_loan_interest_rate, 0) as avg_loan_interest_rate,\n    coalesce(ls.delinquent_loans, 0) as delinquent_loans,\n    coalesce(ls.at_risk_loan_balance, 0) as at_risk_loan_balance,\n    \n    -- Investment Metrics\n    coalesce(invs.total_investments, 0) as total_investments,\n    coalesce(invs.total_investment_value, 0) as total_investment_value,\n    coalesce(invs.total_unrealized_gain_loss, 0) as total_unrealized_gain_loss,\n    coalesce(invs.retirement_account_value, 0) as retirement_account_value,\n    \n    -- Insurance Metrics\n    coalesce(ins.total_policies, 0) as total_insurance_policies,\n    coalesce(ins.active_policies, 0) as active_insurance_policies,\n    coalesce(ins.total_coverage_amount, 0) as total_insurance_coverage,\n    coalesce(ins.total_annual_premiums, 0) as total_annual_premiums,\n    \n    -- Total Relationship Value\n    (\n        coalesce(acs.total_deposit_balances, 0) + \n        coalesce(invs.total_investment_value, 0) - \n        coalesce(ls.total_current_loan_balance, 0) - \n        coalesce(cs.total_credit_balance, 0)\n    ) as net_worth_with_bank,\n    \n    (\n        coalesce(acs.total_deposit_balances, 0) + \n        coalesce(invs.total_investment_value, 0) + \n        coalesce(cs.total_credit_limit, 0)\n    ) as total_relationship_value,\n    \n    -- Product Penetration Score (0-100)\n    (\n        (case when acs.total_accounts > 0 then 20 else 0 end) +\n        (case when cs.total_cards > 0 then 15 else 0 end) +\n        (case when ls.total_loans > 0 then 25 else 0 end) +\n        (case when invs.total_investments > 0 then 25 else 0 end) +\n        (case when ins.total_policies > 0 then 15 else 0 end)\n    ) as product_penetration_score,\n    \n    -- Risk Indicators\n    case \n        when ls.delinquent_loans > 0 or cs.max_credit_utilization > 0.9 then 'HIGH_RISK'\n        when cs.avg_credit_utilization > 0.7 or ls.at_risk_loan_balance > 0 then 'MEDIUM_RISK'\n        else 'LOW_RISK'\n    end as financial_risk_level,\n    \n    -- Customer Value Tier\n    case \n        when (\n            coalesce(acs.total_deposit_balances, 0) + \n            coalesce(invs.total_investment_value, 0)\n        ) >= 1000000 then 'PRIVATE_BANKING'\n        when (\n            coalesce(acs.total_deposit_balances, 0) + \n            coalesce(invs.total_investment_value, 0)\n        ) >= 250000 then 'WEALTH_MANAGEMENT'\n        when (\n            coalesce(acs.total_deposit_balances, 0) + \n            coalesce(invs.total_investment_value, 0)\n        ) >= 100000 then 'PREFERRED'\n        when (\n            coalesce(acs.total_deposit_balances, 0) + \n            coalesce(invs.total_investment_value, 0)\n        ) >= 25000 then 'SELECT'\n        else 'STANDARD'\n    end as wealth_tier,\n    \n    current_timestamp as last_updated\n\nfrom account_summary acs\nfull outer join card_summary cs on acs.customer_id = cs.customer_id\nfull outer join loan_summary ls on coalesce(acs.customer_id, cs.customer_id) = ls.customer_id\nfull outer join investment_summary invs on coalesce(acs.customer_id, cs.customer_id, ls.customer_id) = invs.customer_id\nfull outer join insurance_summary ins on coalesce(acs.customer_id, cs.customer_id, ls.customer_id, invs.customer_id) = ins.customer_id", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_accounts", "package": null, "version": null}, {"name": "stg_cards", "package": null, "version": null}, {"name": "stg_loans", "package": null, "version": null}, {"name": "stg_investments", "package": null, "version": null}, {"name": "stg_insurance_policies", "package": null, "version": null}, {"name": "stg_account_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.customer_360.stg_accounts", "model.customer_360.stg_cards", "model.customer_360.stg_loans", "model.customer_360.stg_investments", "model.customer_360.stg_insurance_policies", "model.customer_360.stg_account_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_id"], "time_spine": null}, "model.customer_360.int_account_performance_dashboard": {"database": "cosmos", "schema": "cosmos", "name": "int_account_performance_dashboard", "resource_type": "model", "package_name": "customer_360", "path": "intermediate/financial_metrics/int_account_performance_dashboard.sql", "original_file_path": "models/intermediate/financial_metrics/int_account_performance_dashboard.sql", "unique_id": "model.customer_360.int_account_performance_dashboard", "fqn": ["customer_360", "intermediate", "financial_metrics", "int_account_performance_dashboard"], "alias": "int_account_performance_dashboard", "checksum": {"name": "sha256", "checksum": "9839a7f955f9a2ae32665cdc9d7441a06cfd4a463c23db4d5c087ef85ce438a8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver", "intermediate", "silver", "intermediate", "financial_metrics", "silver", "intermediate", "financial_metrics", "dashboard"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver", "intermediate", "financial_metrics", "dashboard"], "description": "Executive-level account performance metrics combining multiple intermediate models. Creates the ultimate dependency cascade - depends on 5 other intermediate models! Provides comprehensive account analytics for executive dashboards.\n", "columns": {"account_id": {"name": "account_id", "description": "Unique account identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_id": {"name": "customer_id", "description": "Unique customer identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_profitability_score": {"name": "account_profitability_score", "description": "Account profitability score (0-100)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_health_score": {"name": "account_health_score", "description": "Overall account health assessment (0-100)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_risk_flag": {"name": "account_risk_flag", "description": "Risk indicator for the account", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_service_tier": {"name": "account_service_tier", "description": "Service tier classification for account", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/intermediate/intermediate_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["silver", "intermediate", "financial_metrics", "dashboard"]}, "created_at": 1755857463.514009, "relation_name": "\"cosmos\".\"cosmos\".\"int_account_performance_dashboard\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['silver', 'intermediate', 'financial_metrics', 'dashboard']\n) }}\n\n/*\n    Account Performance Dashboard\n    \n    Executive-level account performance metrics combining multiple intermediate models:\n    - Transaction analytics (int_transaction_analytics)\n    - Customer financial summary (int_customer_financial_summary)\n    - Customer profile (int_customer_profile)\n    - Risk profile (int_comprehensive_risk_profile)\n    - Product penetration analysis (int_product_penetration_analysis)\n    - Account and balance data (stg_accounts, stg_account_balances)\n    \n    Creates the ultimate dependency cascade for beautiful DAG visualization!\n    This is the CROWN JEWEL of intermediate models - depends on 5 other intermediate models!\n*/\n\nwith accounts_base as (\n    select\n        account_id,\n        customer_id,\n        account_number,\n        product_type,\n        account_status,\n        current_balance,\n        annual_interest_rate,\n        monthly_fee,\n        opened_date,\n        current_date - opened_date as days_since_opened,\n        extract(year from age(current_date, opened_date)) as account_age_years\n    from {{ ref('stg_accounts') }}\n),\n\nbalance_ranked as (\n    select\n        account_id,\n        balance_amount as current_balance,\n        available_balance,\n        balance_date as last_balance_date,\n        lag(balance_amount) over (partition by account_id order by balance_date) as previous_balance,\n        balance_amount - lag(balance_amount) over (partition by account_id order by balance_date) as balance_change,\n        row_number() over (partition by account_id order by balance_date desc) as rn\n    from {{ ref('stg_account_balances') }}\n),\n\nlatest_balances as (\n    select\n        account_id,\n        current_balance,\n        available_balance,\n        last_balance_date,\n        previous_balance,\n        balance_change\n    from balance_ranked\n    where rn = 1\n),\n\ntransaction_performance as (\n    select\n        account_id,\n        total_transactions,\n        total_transaction_volume,\n        avg_transaction_amount,\n        largest_transaction,\n        net_cash_flow,\n        total_deposits,\n        total_deposit_amount,\n        total_withdrawals,\n        total_withdrawal_amount,\n        total_payments,\n        total_payment_amount,\n        total_fees,\n        total_fee_amount,\n        digital_transaction_percentage,\n        fee_to_volume_ratio,\n        spending_category,\n        activity_level,\n        last_transaction_date\n    from {{ ref('int_transaction_analytics') }}\n),\n\ncustomer_financial_profile as (\n    select\n        customer_id,\n        total_deposit_accounts,\n        total_deposit_balances,\n        total_cards,\n        total_credit_limit,\n        total_loans,\n        total_loan_balance,\n        total_investments,\n        total_investment_value,\n        net_worth_with_bank,\n        total_relationship_value,\n        product_penetration_score,\n        financial_risk_level,\n        wealth_tier\n    from {{ ref('int_customer_financial_summary') }}\n),\n\ncustomer_profile_data as (\n    select\n        customer_id,\n        full_name,\n        age,\n        relationship_years,\n        lifecycle_stage_name,\n        customer_value_segment,\n        engagement_level,\n        at_risk_customer,\n        digital_preference,\n        avg_satisfaction_score\n    from {{ ref('int_customer_profile') }}\n),\n\nrisk_assessment as (\n    select\n        customer_id,\n        overall_risk_level,\n        compliance_status,\n        composite_risk_score,\n        current_credit_risk_score,\n        current_fraud_risk_score,\n        total_fraud_alerts,\n        requires_enhanced_monitoring,\n        requires_immediate_review\n    from {{ ref('int_comprehensive_risk_profile') }}\n),\n\nproduct_analytics as (\n    select\n        customer_id,\n        product_penetration_score as product_usage_score,\n        digital_adoption_level,\n        marketing_responsiveness,\n        channel_preference,\n        cross_sell_opportunity_score,\n        product_stickiness_score,\n        next_best_product\n    from {{ ref('int_product_penetration_analysis') }}\n)\n\nselect\n    -- Account Identifiers\n    ab.account_id,\n    ab.customer_id,\n    ab.account_number,\n    ab.product_type,\n    ab.account_status,\n    \n    -- Customer Information\n    cpd.full_name as customer_name,\n    cpd.age as customer_age,\n    cpd.relationship_years,\n    cpd.lifecycle_stage_name,\n    cpd.customer_value_segment,\n    \n    -- Account Basics\n    ab.opened_date,\n    ab.account_age_years,\n    ab.annual_interest_rate,\n    ab.monthly_fee,\n    \n    -- Balance Information\n    coalesce(lb.current_balance, ab.current_balance) as current_balance,\n    lb.available_balance,\n    lb.previous_balance,\n    lb.balance_change,\n    lb.last_balance_date,\n    \n    -- Transaction Performance\n    coalesce(tp.total_transactions, 0) as total_transactions,\n    coalesce(tp.total_transaction_volume, 0) as total_transaction_volume,\n    coalesce(tp.net_cash_flow, 0) as net_cash_flow,\n    coalesce(tp.total_deposit_amount, 0) as total_deposit_amount,\n    coalesce(tp.total_payment_amount, 0) as total_payment_amount,\n    coalesce(tp.total_fee_amount, 0) as total_fees_paid,\n    coalesce(tp.digital_transaction_percentage, 0) as digital_transaction_percentage,\n    tp.spending_category,\n    tp.activity_level,\n    tp.last_transaction_date,\n    \n    -- Customer Financial Profile\n    coalesce(cfp.total_deposit_accounts, 0) as customer_total_accounts,\n    coalesce(cfp.total_deposit_balances, 0) as customer_total_balances,\n    coalesce(cfp.total_relationship_value, 0) as customer_relationship_value,\n    coalesce(cfp.product_penetration_score, 0) as customer_product_penetration,\n    cfp.financial_risk_level as customer_financial_risk,\n    cfp.wealth_tier as customer_wealth_tier,\n    \n    -- Digital & Engagement\n    cpd.engagement_level,\n    cpd.digital_preference,\n    cpd.avg_satisfaction_score,\n    coalesce(pa.digital_adoption_level, 'UNKNOWN') as digital_adoption_level,\n    coalesce(pa.marketing_responsiveness, 'UNKNOWN') as marketing_responsiveness,\n    coalesce(pa.channel_preference, 'UNKNOWN') as channel_preference,\n    \n    -- Risk Assessment\n    coalesce(ra.overall_risk_level, 'UNKNOWN') as overall_risk_level,\n    coalesce(ra.compliance_status, 'UNKNOWN') as compliance_status,\n    coalesce(ra.composite_risk_score, 500) as composite_risk_score,\n    coalesce(ra.total_fraud_alerts, 0) as total_fraud_alerts,\n    coalesce(ra.requires_enhanced_monitoring, false) as requires_enhanced_monitoring,\n    coalesce(ra.requires_immediate_review, false) as requires_immediate_review,\n    \n    -- Product & Cross-Sell\n    coalesce(pa.cross_sell_opportunity_score, 0) as cross_sell_opportunity_score,\n    coalesce(pa.product_stickiness_score, 0) as product_stickiness_score,\n    pa.next_best_product,\n    \n    -- Account Performance Metrics\n    \n    -- Account Profitability Score (0-100)\n    least(100, greatest(0,\n        -- Fee revenue component\n        (case when ab.monthly_fee > 0 then 20 else 0 end) +\n        -- Transaction volume component\n        (case \n            when tp.total_transaction_volume >= 50000 then 25\n            when tp.total_transaction_volume >= 20000 then 20\n            when tp.total_transaction_volume >= 10000 then 15\n            when tp.total_transaction_volume >= 5000 then 10\n            else 5\n        end) +\n        -- Balance component\n        (case \n            when coalesce(lb.current_balance, ab.current_balance) >= 100000 then 25\n            when coalesce(lb.current_balance, ab.current_balance) >= 50000 then 20\n            when coalesce(lb.current_balance, ab.current_balance) >= 25000 then 15\n            when coalesce(lb.current_balance, ab.current_balance) >= 10000 then 10\n            else 5\n        end) +\n        -- Activity component\n        (case \n            when tp.activity_level = 'VERY_ACTIVE' then 15\n            when tp.activity_level = 'ACTIVE' then 12\n            when tp.activity_level = 'MODERATE' then 8\n            when tp.activity_level = 'LIGHT' then 5\n            else 0\n        end) +\n        -- Digital adoption bonus\n        (case when tp.digital_transaction_percentage > 70 then 10 else 0 end) +\n        -- Longevity bonus\n        (case when ab.account_age_years >= 5 then 5 else 0 end)\n    )) as account_profitability_score,\n    \n    -- Account Health Score (0-100)\n    least(100, greatest(0,\n        -- Balance health (40 points max)\n        (case \n            when coalesce(lb.current_balance, ab.current_balance) >= 10000 then 40\n            when coalesce(lb.current_balance, ab.current_balance) >= 5000 then 30\n            when coalesce(lb.current_balance, ab.current_balance) >= 1000 then 20\n            when coalesce(lb.current_balance, ab.current_balance) >= 0 then 10\n            else 0\n        end) +\n        -- Activity health (20 points max)\n        (case \n            when tp.total_transactions >= 50 then 20\n            when tp.total_transactions >= 20 then 15\n            when tp.total_transactions >= 10 then 10\n            when tp.total_transactions >= 1 then 5\n            else 0\n        end) +\n        -- Risk health (20 points max)\n        (case \n            when ra.overall_risk_level = 'LOW_RISK' then 20\n            when ra.overall_risk_level = 'MODERATE_RISK' then 15\n            when ra.overall_risk_level = 'ELEVATED_RISK' then 10\n            when ra.overall_risk_level = 'HIGH_RISK' then 5\n            else 0\n        end) +\n        -- Customer satisfaction (10 points max)\n        (case \n            when cpd.avg_satisfaction_score >= 4 then 10\n            when cpd.avg_satisfaction_score >= 3 then 7\n            when cpd.avg_satisfaction_score >= 2 then 4\n            else 0\n        end) +\n        -- Compliance health (10 points max)\n        (case \n            when ra.compliance_status = 'COMPLIANT' then 10\n            when ra.compliance_status = 'PENDING_VERIFICATION' then 5\n            else 0\n        end)\n    )) as account_health_score,\n    \n    -- Account Risk Flags\n    case \n        when ra.requires_immediate_review then 'IMMEDIATE_REVIEW_REQUIRED'\n        when ra.requires_enhanced_monitoring then 'ENHANCED_MONITORING'\n        when cpd.at_risk_customer then 'CUSTOMER_AT_RISK'\n        when tp.total_transactions = 0 and ab.account_age_years > 1 then 'DORMANT_ACCOUNT'\n        when coalesce(lb.current_balance, ab.current_balance) <= 0 then 'NEGATIVE_BALANCE'\n        else 'NORMAL'\n    end as account_risk_flag,\n    \n    -- Account Opportunity Classification\n    case \n        when pa.cross_sell_opportunity_score >= 75 then 'HIGH_CROSS_SELL_OPPORTUNITY'\n        when cfp.wealth_tier in ('PRIVATE_BANKING', 'WEALTH_MANAGEMENT') then 'WEALTH_MANAGEMENT_OPPORTUNITY'\n        when tp.digital_transaction_percentage < 30 and cpd.age < 50 then 'DIGITAL_CONVERSION_OPPORTUNITY'\n        when tp.activity_level = 'MINIMAL' and ab.account_age_years < 2 then 'ACTIVATION_OPPORTUNITY'\n        when cfp.product_penetration_score < 40 then 'PRODUCT_EXPANSION_OPPORTUNITY'\n        else 'MAINTAIN_RELATIONSHIP'\n    end as account_opportunity,\n    \n    -- Next Best Action for Account\n    case \n        when ra.requires_immediate_review then 'RISK_REVIEW'\n        when cpd.at_risk_customer and cpd.avg_satisfaction_score < 3 then 'RETENTION_CALL'\n        when tp.total_transactions = 0 and ab.account_age_years > 1 then 'DORMANT_REACTIVATION'\n        when pa.cross_sell_opportunity_score >= 75 then 'CROSS_SELL_CAMPAIGN'\n        when tp.digital_transaction_percentage < 30 and cpd.age < 50 then 'DIGITAL_ONBOARDING'\n        when coalesce(lb.current_balance, ab.current_balance) >= 50000 and cfp.total_investments = 0 then 'INVESTMENT_CONSULTATION'\n        else 'STANDARD_MAINTENANCE'\n    end as next_best_action,\n    \n    -- Account Tier for Servicing\n    case \n        when cfp.wealth_tier = 'PRIVATE_BANKING' then 'PRIVATE_BANKING'\n        when cfp.wealth_tier = 'WEALTH_MANAGEMENT' then 'WEALTH_MANAGEMENT'\n        when coalesce(lb.current_balance, ab.current_balance) >= 100000 then 'PREMIUM'\n        when cfp.product_penetration_score >= 60 then 'PREFERRED'\n        when tp.activity_level in ('VERY_ACTIVE', 'ACTIVE') then 'ACTIVE'\n        else 'STANDARD'\n    end as account_service_tier,\n    \n    current_timestamp as last_updated\n\nfrom accounts_base ab\nleft join latest_balances lb on ab.account_id = lb.account_id\nleft join transaction_performance tp on ab.account_id = tp.account_id\nleft join customer_financial_profile cfp on ab.customer_id = cfp.customer_id\nleft join customer_profile_data cpd on ab.customer_id = cpd.customer_id\nleft join risk_assessment ra on ab.customer_id = ra.customer_id\nleft join product_analytics pa on ab.customer_id = pa.customer_id", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_accounts", "package": null, "version": null}, {"name": "stg_account_balances", "package": null, "version": null}, {"name": "int_transaction_analytics", "package": null, "version": null}, {"name": "int_customer_financial_summary", "package": null, "version": null}, {"name": "int_customer_profile", "package": null, "version": null}, {"name": "int_comprehensive_risk_profile", "package": null, "version": null}, {"name": "int_product_penetration_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.customer_360.stg_accounts", "model.customer_360.stg_account_balances", "model.customer_360.int_transaction_analytics", "model.customer_360.int_customer_financial_summary", "model.customer_360.int_customer_profile", "model.customer_360.int_comprehensive_risk_profile", "model.customer_360.int_product_penetration_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["account_id"], "time_spine": null}, "model.customer_360.int_product_penetration_analysis": {"database": "cosmos", "schema": "cosmos", "name": "int_product_penetration_analysis", "resource_type": "model", "package_name": "customer_360", "path": "intermediate/product_analytics/int_product_penetration_analysis.sql", "original_file_path": "models/intermediate/product_analytics/int_product_penetration_analysis.sql", "unique_id": "model.customer_360.int_product_penetration_analysis", "fqn": ["customer_360", "intermediate", "product_analytics", "int_product_penetration_analysis"], "alias": "int_product_penetration_analysis", "checksum": {"name": "sha256", "checksum": "178b1e8cc55aa85a5fe37c6706e1615dc213307f634f500518652e97b0295d4d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver", "intermediate", "silver", "intermediate", "product_analytics", "silver", "intermediate", "product_analytics", "penetration"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver", "intermediate", "product_analytics", "penetration"], "description": "Product adoption patterns across customer segments combining usage patterns, marketing campaigns, and channel preferences. Provides insights for product strategy and cross-selling opportunities.\n", "columns": {"customer_id": {"name": "customer_id", "description": "Unique customer identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_penetration_score": {"name": "product_penetration_score", "description": "Cross-product penetration score (0-100)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "digital_adoption_level": {"name": "digital_adoption_level", "description": "Digital product adoption classification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "marketing_responsiveness": {"name": "marketing_responsiveness", "description": "Customer responsiveness to marketing campaigns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cross_sell_opportunity_score": {"name": "cross_sell_opportunity_score", "description": "Cross-selling opportunity score (0-100)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_stickiness_score": {"name": "product_stickiness_score", "description": "Product engagement and loyalty score (0-100)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/intermediate/intermediate_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["silver", "intermediate", "product_analytics", "penetration"]}, "created_at": 1755857463.516186, "relation_name": "\"cosmos\".\"cosmos\".\"int_product_penetration_analysis\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['silver', 'intermediate', 'product_analytics', 'penetration']\n) }}\n\n/*\n    Product Penetration Analysis\n    \n    Analyzes product adoption patterns across customer segments:\n    - Product usage patterns (stg_product_usage)\n    - Customer segmentation (stg_customer_segments)\n    - Marketing campaign responses (stg_marketing_campaigns)\n    - Channel usage patterns (stg_channel_usage)\n    \n    Provides insights for product strategy and cross-selling opportunities.\n*/\n\nwith product_usage_summary as (\n    select\n        customer_id,\n        count(distinct product_type) as total_products_used,\n        sum(usage_frequency) as total_usage_events,\n        avg(usage_frequency) as avg_usage_per_product,\n        max(usage_date) as last_product_usage_date,\n        min(usage_date) as first_product_usage_date,\n        count(case when product_type in ('CHECKING', 'SAVINGS', 'MOBILE_BANKING') then 1 end) as digital_banking_products,\n        count(case when product_type in ('MORTGAGE', 'LOANS') then 1 end) as lending_products,\n        count(case when product_type = 'INVESTMENTS' then 1 end) as investment_products,\n        count(case when product_type = 'INSURANCE' then 1 end) as insurance_products,\n        sum(case when product_type in ('CHECKING', 'SAVINGS', 'MOBILE_BANKING') then usage_frequency end) as digital_banking_usage,\n        sum(case when product_type in ('MORTGAGE', 'LOANS') then usage_frequency end) as lending_usage,\n        sum(case when product_type = 'INVESTMENTS' then usage_frequency end) as investment_usage,\n        sum(case when product_type = 'INSURANCE' then usage_frequency end) as insurance_usage\n    from {{ ref('stg_product_usage') }}\n    group by customer_id\n),\n\ncustomer_segments_ranked as (\n    select\n        customer_id,\n        segment_name as current_segment,\n        segment_date as current_segment_date,\n        row_number() over (partition by customer_id order by segment_date desc) as rn\n    from {{ ref('stg_customer_segments') }}\n),\n\ncustomer_segments_current as (\n    select\n        customer_id,\n        current_segment,\n        current_segment_date\n    from customer_segments_ranked\n    where rn = 1\n),\n\nmarketing_campaign_response as (\n    select\n        customer_id,\n        count(*) as total_campaigns_targeted,\n        count(case when response_type = 'OPENED' then 1 end) as campaigns_opened,\n        count(case when response_type = 'CLICKED' then 1 end) as campaigns_clicked,\n        count(case when response_type = 'CONVERTED' then 1 end) as campaigns_converted,\n        count(case when response_type = 'NO_RESPONSE' then 1 end) as campaigns_opted_out,\n        max(sent_date) as last_campaign_response_date,\n        count(case when campaign_type like '%OFFER%' then 1 end) as cross_sell_campaigns,\n        count(case when campaign_type = 'DIGITAL_BANKING' then 1 end) as retention_campaigns,\n        count(case when campaign_type in ('CREDIT_CARD_OFFER', 'SAVINGS_PROMOTION') then 1 end) as acquisition_campaigns,\n        count(case when campaign_type like '%OFFER%' and response_type = 'CONVERTED' then 1 end) as cross_sell_conversions,\n        count(case when response_type = 'CONVERTED' and resulted_in_sale then 1 end) as avg_conversion_value\n    from {{ ref('stg_marketing_campaigns') }}\n    group by customer_id\n),\n\nchannel_usage_summary as (\n    select\n        customer_id,\n        count(distinct channel_type) as total_channels_used,\n        sum(usage_count) as total_channel_usage,\n        count(case when channel_type in ('ONLINE', 'MOBILE') then 1 end) as digital_channels_used,\n        count(case when channel_type in ('BRANCH', 'ATM', 'PHONE') then 1 end) as physical_channels_used,\n        sum(case when channel_type in ('ONLINE', 'MOBILE') then usage_count end) as digital_channel_usage,\n        sum(case when channel_type in ('BRANCH', 'ATM', 'PHONE') then usage_count end) as physical_channel_usage,\n        max(usage_date) as last_channel_usage_date\n    from {{ ref('stg_channel_usage') }}\n    group by customer_id\n)\n\nselect\n    -- Customer identifier\n    coalesce(\n        pus.customer_id,\n        csc.customer_id,\n        mcr.customer_id,\n        cus.customer_id\n    ) as customer_id,\n    \n    -- Product Usage Metrics\n    coalesce(pus.total_products_used, 0) as total_products_used,\n    coalesce(pus.total_usage_events, 0) as total_usage_events,\n    coalesce(pus.avg_usage_per_product, 0) as avg_usage_per_product,\n    pus.first_product_usage_date,\n    pus.last_product_usage_date,\n    \n    -- Product Category Adoption\n    coalesce(pus.digital_banking_products, 0) as digital_banking_products,\n    coalesce(pus.lending_products, 0) as lending_products,\n    coalesce(pus.investment_products, 0) as investment_products,\n    coalesce(pus.insurance_products, 0) as insurance_products,\n    \n    -- Product Category Usage Intensity\n    coalesce(pus.digital_banking_usage, 0) as digital_banking_usage,\n    coalesce(pus.lending_usage, 0) as lending_usage,\n    coalesce(pus.investment_usage, 0) as investment_usage,\n    coalesce(pus.insurance_usage, 0) as insurance_usage,\n    \n    -- Customer Segmentation\n    csc.current_segment,\n    csc.current_segment_date,\n    \n    -- Marketing Campaign Performance\n    coalesce(mcr.total_campaigns_targeted, 0) as total_campaigns_targeted,\n    coalesce(mcr.campaigns_opened, 0) as campaigns_opened,\n    coalesce(mcr.campaigns_clicked, 0) as campaigns_clicked,\n    coalesce(mcr.campaigns_converted, 0) as campaigns_converted,\n    coalesce(mcr.campaigns_opted_out, 0) as campaigns_opted_out,\n    mcr.last_campaign_response_date,\n    \n    -- Campaign Type Performance\n    coalesce(mcr.cross_sell_campaigns, 0) as cross_sell_campaigns,\n    coalesce(mcr.cross_sell_conversions, 0) as cross_sell_conversions,\n    coalesce(mcr.retention_campaigns, 0) as retention_campaigns,\n    coalesce(mcr.avg_conversion_value, 0) as avg_conversion_value,\n    \n    -- Channel Usage\n    coalesce(cus.total_channels_used, 0) as total_channels_used,\n    coalesce(cus.digital_channels_used, 0) as digital_channels_used,\n    coalesce(cus.physical_channels_used, 0) as physical_channels_used,\n    coalesce(cus.digital_channel_usage, 0) as digital_channel_usage,\n    coalesce(cus.physical_channel_usage, 0) as physical_channel_usage,\n    \n    -- Product Penetration Metrics\n    \n    -- Cross-Product Penetration Score (0-100)\n    least(100, greatest(0,\n        (coalesce(pus.digital_banking_products, 0) * 15) +\n        (coalesce(pus.lending_products, 0) * 25) +\n        (coalesce(pus.investment_products, 0) * 30) +\n        (coalesce(pus.insurance_products, 0) * 20) +\n        (case when pus.total_products_used >= 5 then 10 else 0 end)\n    )) as product_penetration_score,\n    \n    -- Digital Product Adoption Level\n    case \n        when pus.digital_banking_products >= 5 then 'DIGITAL_NATIVE'\n        when pus.digital_banking_products >= 3 then 'DIGITAL_ADOPTER'\n        when pus.digital_banking_products >= 1 then 'DIGITAL_BEGINNER'\n        else 'NON_DIGITAL'\n    end as digital_adoption_level,\n    \n    -- Marketing Responsiveness\n    case \n        when mcr.total_campaigns_targeted = 0 then 'UNTARGETED'\n        when mcr.campaigns_converted::numeric / mcr.total_campaigns_targeted > 0.1 then 'HIGHLY_RESPONSIVE'\n        when mcr.campaigns_clicked::numeric / mcr.total_campaigns_targeted > 0.05 then 'MODERATELY_RESPONSIVE'\n        when mcr.campaigns_opened::numeric / mcr.total_campaigns_targeted > 0.02 then 'LIGHTLY_RESPONSIVE'\n        else 'UNRESPONSIVE'\n    end as marketing_responsiveness,\n    \n    -- Channel Preference\n    case \n        when cus.digital_channel_usage > cus.physical_channel_usage * 3 then 'DIGITAL_FIRST'\n        when cus.digital_channel_usage > cus.physical_channel_usage then 'DIGITAL_PREFERRED'\n        when cus.physical_channel_usage > cus.digital_channel_usage then 'BRANCH_PREFERRED'\n        when cus.total_channels_used > 0 then 'OMNI_CHANNEL'\n        else 'MINIMAL_ENGAGEMENT'\n    end as channel_preference,\n    \n    -- Product Category Specialization\n    case \n        when pus.investment_usage > pus.digital_banking_usage + pus.lending_usage + pus.insurance_usage then 'INVESTMENT_FOCUSED'\n        when pus.lending_usage > pus.digital_banking_usage + pus.investment_usage + pus.insurance_usage then 'LENDING_FOCUSED'\n        when pus.insurance_usage > pus.digital_banking_usage + pus.lending_usage + pus.investment_usage then 'INSURANCE_FOCUSED'\n        when pus.digital_banking_usage > 0 then 'BANKING_FOCUSED'\n        else 'PRODUCT_EXPLORER'\n    end as product_specialization,\n    \n    -- Cross-Sell Opportunity Score (0-100)\n    least(100, greatest(0,\n        (case when pus.digital_banking_products = 0 then 20 else 0 end) +\n        (case when pus.lending_products = 0 and csc.current_segment in ('PREMIUM', 'MASS_AFFLUENT') then 25 else 0 end) +\n        (case when pus.investment_products = 0 and csc.current_segment in ('PREMIUM', 'MASS_AFFLUENT', 'EMERGING_AFFLUENT') then 30 else 0 end) +\n        (case when pus.insurance_products = 0 then 15 else 0 end) +\n        (case when mcr.cross_sell_conversions > 0 then 10 else 0 end)\n    )) as cross_sell_opportunity_score,\n    \n    -- Product Stickiness Score (0-100)\n    case \n        when pus.total_usage_events > 0 then\n            least(100, greatest(0,\n                (pus.total_products_used * 10) +\n                (least(50, pus.total_usage_events)) +\n                (case when pus.first_product_usage_date is not null then \n                    least(30, extract(days from current_date - pus.first_product_usage_date) / 30)\n                else 0 end)\n            ))\n        else 0\n    end as product_stickiness_score,\n    \n    -- Next Best Product Recommendation\n    case \n        when pus.investment_products = 0 and csc.current_segment in ('PREMIUM', 'MASS_AFFLUENT') then 'INVESTMENT_ADVISORY'\n        when pus.lending_products = 0 and pus.digital_banking_products > 0 then 'PERSONAL_LOAN'\n        when pus.insurance_products = 0 and pus.total_products_used > 0 then 'INSURANCE_BUNDLE'\n        when pus.digital_banking_products = 0 then 'MOBILE_BANKING'\n        when pus.total_products_used >= 2 then 'PREMIUM_SERVICES'\n        else 'BASIC_PRODUCTS'\n    end as next_best_product,\n    \n    current_timestamp as last_updated\n\nfrom product_usage_summary pus\nfull outer join customer_segments_current csc on pus.customer_id = csc.customer_id\nfull outer join marketing_campaign_response mcr on coalesce(pus.customer_id, csc.customer_id) = mcr.customer_id\nfull outer join channel_usage_summary cus on coalesce(pus.customer_id, csc.customer_id, mcr.customer_id) = cus.customer_id", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_product_usage", "package": null, "version": null}, {"name": "stg_customer_segments", "package": null, "version": null}, {"name": "stg_marketing_campaigns", "package": null, "version": null}, {"name": "stg_channel_usage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.customer_360.stg_product_usage", "model.customer_360.stg_customer_segments", "model.customer_360.stg_marketing_campaigns", "model.customer_360.stg_channel_usage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_id"], "time_spine": null}, "model.customer_360.int_channel_effectiveness": {"database": "cosmos", "schema": "cosmos", "name": "int_channel_effectiveness", "resource_type": "model", "package_name": "customer_360", "path": "intermediate/product_analytics/int_channel_effectiveness.sql", "original_file_path": "models/intermediate/product_analytics/int_channel_effectiveness.sql", "unique_id": "model.customer_360.int_channel_effectiveness", "fqn": ["customer_360", "intermediate", "product_analytics", "int_channel_effectiveness"], "alias": "int_channel_effectiveness", "checksum": {"name": "sha256", "checksum": "75dd9d311866bb5eaf58c80a2a5a90c268956901d095f1822d154cf84d5448a6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver", "intermediate", "silver", "intermediate", "product_analytics", "silver", "intermediate", "product_analytics", "channels"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver", "intermediate", "product_analytics", "channels"], "description": "Comprehensive channel performance analysis combining usage patterns, marketing effectiveness, service interactions, and digital activity. Provides insights for channel optimization and omnichannel strategy.\n", "columns": {"customer_id": {"name": "customer_id", "description": "Unique customer identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "digital_adoption_score": {"name": "digital_adoption_score", "description": "Digital channel adoption score (0-100)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "channel_diversity_score": {"name": "channel_diversity_score", "description": "Channel usage diversity score (0-100)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "channel_preference": {"name": "channel_preference", "description": "Customer's primary channel preference", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "channel_engagement_level": {"name": "channel_engagement_level", "description": "Overall channel engagement level", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "digital_session_quality": {"name": "digital_session_quality", "description": "Quality assessment of digital sessions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/intermediate/intermediate_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["silver", "intermediate", "product_analytics", "channels"]}, "created_at": 1755857463.517111, "relation_name": "\"cosmos\".\"cosmos\".\"int_channel_effectiveness\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['silver', 'intermediate', 'product_analytics', 'channels']\n) }}\n\n/*\n    Channel Effectiveness Analytics\n    \n    Comprehensive channel performance analysis combining:\n    - Channel usage patterns (stg_channel_usage)\n    - Marketing campaign effectiveness (stg_marketing_campaigns)\n    - Customer service interactions (stg_customer_interactions)\n    - Digital activity patterns (stg_digital_activity)\n    \n    Provides insights for channel optimization and omnichannel strategy.\n*/\n\nwith channel_usage_metrics as (\n    select\n        customer_id,\n        channel_type,\n        sum(usage_count) as total_usage,\n        avg(usage_count) as avg_usage,\n        max(usage_date) as last_used_date,\n        min(usage_date) as first_used_date,\n        count(distinct extract(month from usage_date)) as months_active\n    from {{ ref('stg_channel_usage') }}\n    group by customer_id, channel_type\n),\n\ncustomer_channel_summary as (\n    select\n        customer_id,\n        count(distinct channel_type) as total_channels_used,\n        count(distinct case when channel_type in ('ONLINE', 'MOBILE') then channel_type end) as digital_channels_used,\n        count(distinct case when channel_type in ('BRANCH', 'ATM', 'PHONE') then channel_type end) as physical_channels_used,\n        sum(total_usage) as total_channel_usage,\n        sum(case when channel_type in ('ONLINE', 'MOBILE') then total_usage else 0 end) as digital_channel_usage,\n        sum(case when channel_type in ('BRANCH', 'ATM', 'PHONE') then total_usage else 0 end) as physical_channel_usage,\n        max(last_used_date) as last_channel_usage_date\n    from channel_usage_metrics\n    group by customer_id\n),\n\nmarketing_campaign_effectiveness as (\n    select\n        customer_id,\n        channel,\n        count(*) as campaigns_received,\n        count(case when response_type = 'OPENED' then 1 end) as campaigns_opened,\n        count(case when response_type = 'CLICKED' then 1 end) as campaigns_clicked,\n        count(case when response_type = 'CONVERTED' then 1 end) as campaigns_converted,\n        sum(case when response_type = 'CONVERTED' then \n            case \n                when campaign_type = 'CREDIT_CARD_OFFER' then 500\n                when campaign_type = 'SAVINGS_PROMOTION' then 200\n                when campaign_type = 'LOAN_OFFER' then 1000\n                when campaign_type = 'INVESTMENT_SEMINAR' then 750\n                when campaign_type = 'INSURANCE_QUOTE' then 300\n                when campaign_type = 'DIGITAL_BANKING' then 100\n                else 250\n            end\n        else 0 end) as total_conversion_value,\n        avg(case when response_type = 'CONVERTED' then \n            case \n                when campaign_type = 'CREDIT_CARD_OFFER' then 500\n                when campaign_type = 'SAVINGS_PROMOTION' then 200\n                when campaign_type = 'LOAN_OFFER' then 1000\n                when campaign_type = 'INVESTMENT_SEMINAR' then 750\n                when campaign_type = 'INSURANCE_QUOTE' then 300\n                when campaign_type = 'DIGITAL_BANKING' then 100\n                else 250\n            end\n        else 0 end) as avg_conversion_value\n    from {{ ref('stg_marketing_campaigns') }}\n    group by customer_id, channel\n),\n\ncustomer_marketing_summary as (\n    select\n        customer_id,\n        count(distinct channel) as channels_marketed_through,\n        sum(campaigns_received) as total_campaigns_received,\n        sum(campaigns_converted) as total_campaigns_converted,\n        sum(total_conversion_value) as total_marketing_value,\n        avg(case when campaigns_received > 0 then campaigns_converted::numeric / campaigns_received end) as avg_conversion_rate\n    from marketing_campaign_effectiveness\n    group by customer_id\n),\n\nservice_interaction_channels as (\n    select\n        customer_id,\n        interaction_type,\n        count(*) as interactions_count,\n        avg(case when satisfaction_score is not null then satisfaction_score end) as avg_satisfaction_score,\n        count(case when was_escalated then 1 end) as escalated_interactions,\n        count(case when status = 'RESOLVED' then 1 end) as resolved_interactions\n    from {{ ref('stg_customer_interactions') }}\n    group by customer_id, interaction_type\n),\n\ncustomer_service_summary as (\n    select\n        customer_id,\n        count(distinct interaction_type) as service_channels_used,\n        sum(interactions_count) as total_service_interactions,\n        avg(avg_satisfaction_score) as overall_service_satisfaction,\n        sum(escalated_interactions) as total_escalated_interactions,\n        sum(resolved_interactions) as total_resolved_interactions\n    from service_interaction_channels\n    group by customer_id\n),\n\ndigital_platform_usage as (\n    select\n        customer_id,\n        platform,\n        count(*) as activities_count,\n        count(distinct activity_type) as activity_types_used,\n        max(activity_timestamp::date) as last_activity_date\n    from {{ ref('stg_digital_activity') }}\n    group by customer_id, platform\n),\n\ncustomer_digital_summary as (\n    select\n        customer_id,\n        count(distinct platform) as digital_platforms_used,\n        sum(activities_count) as total_digital_activities,\n        max(last_activity_date) as last_digital_activity_date\n    from digital_platform_usage\n    group by customer_id\n)\n\nselect\n    -- Customer identifier\n    coalesce(\n        ccs.customer_id,\n        cms.customer_id,\n        css.customer_id,\n        cds.customer_id\n    ) as customer_id,\n    \n    -- Channel Usage Overview\n    coalesce(ccs.total_channels_used, 0) as total_channels_used,\n    coalesce(ccs.digital_channels_used, 0) as digital_channels_used,\n    coalesce(ccs.physical_channels_used, 0) as physical_channels_used,\n    coalesce(ccs.total_channel_usage, 0) as total_channel_usage,\n    coalesce(ccs.digital_channel_usage, 0) as digital_channel_usage,\n    coalesce(ccs.physical_channel_usage, 0) as physical_channel_usage,\n    ccs.last_channel_usage_date,\n    \n    -- Marketing Channel Performance\n    coalesce(cms.channels_marketed_through, 0) as marketing_channels_used,\n    coalesce(cms.total_campaigns_received, 0) as total_campaigns_received,\n    coalesce(cms.total_campaigns_converted, 0) as total_campaigns_converted,\n    coalesce(cms.total_marketing_value, 0) as total_marketing_value,\n    coalesce(cms.avg_conversion_rate, 0) as marketing_conversion_rate,\n    \n    -- Service Channel Performance\n    coalesce(css.service_channels_used, 0) as service_channels_used,\n    coalesce(css.total_service_interactions, 0) as total_service_interactions,\n    coalesce(css.overall_service_satisfaction, 0) as service_satisfaction_score,\n    coalesce(css.total_escalated_interactions, 0) as total_escalated_interactions,\n    coalesce(css.total_resolved_interactions, 0) as total_resolved_interactions,\n    \n    -- Digital Platform Usage\n    coalesce(cds.digital_platforms_used, 0) as digital_platforms_used,\n    coalesce(cds.total_digital_activities, 0) as total_digital_activities,\n    cds.last_digital_activity_date,\n    \n    -- Channel Effectiveness Metrics\n    \n    -- Digital Adoption Score (0-100)\n    least(100, greatest(0,\n        (coalesce(ccs.digital_channels_used, 0) * 15) +\n        (coalesce(cds.digital_platforms_used, 0) * 20) +\n        (case \n            when ccs.total_channel_usage > 0 then \n                round(ccs.digital_channel_usage::numeric / ccs.total_channel_usage * 65)\n            else 0\n        end)\n    )) as digital_adoption_score,\n    \n    -- Channel Diversity Score (0-100)\n    least(100, greatest(0,\n        (coalesce(ccs.total_channels_used, 0) * 12) +\n        (coalesce(cms.channels_marketed_through, 0) * 8) +\n        (coalesce(css.service_channels_used, 0) * 10) +\n        (coalesce(cds.digital_platforms_used, 0) * 15) +\n        (case \n            when ccs.digital_channels_used > 0 and ccs.physical_channels_used > 0 then 20\n            when ccs.digital_channels_used > 0 or ccs.physical_channels_used > 0 then 10\n            else 0\n        end)\n    )) as channel_diversity_score,\n    \n    -- Channel Preference Classification\n    case \n        when ccs.digital_channel_usage > ccs.physical_channel_usage * 4 then 'DIGITAL_ONLY'\n        when ccs.digital_channel_usage > ccs.physical_channel_usage * 2 then 'DIGITAL_FIRST'\n        when ccs.digital_channel_usage > ccs.physical_channel_usage then 'DIGITAL_PREFERRED'\n        when ccs.physical_channel_usage > ccs.digital_channel_usage then 'PHYSICAL_PREFERRED'\n        when ccs.digital_channel_usage > 0 and ccs.physical_channel_usage > 0 then 'OMNI_CHANNEL'\n        when ccs.digital_channel_usage > 0 then 'DIGITAL_ONLY'\n        when ccs.physical_channel_usage > 0 then 'PHYSICAL_ONLY'\n        else 'MINIMAL_USAGE'\n    end as channel_preference,\n    \n    -- Service Channel Effectiveness\n    case \n        when css.total_service_interactions > 0 then\n            round(css.total_resolved_interactions::numeric / css.total_service_interactions * 100, 2)\n        else 0\n    end as service_resolution_rate,\n    \n    -- Marketing Channel ROI Indicator\n    case \n        when cms.total_campaigns_received > 0 then\n            round(cms.total_marketing_value / cms.total_campaigns_received, 2)\n        else 0\n    end as marketing_roi_per_campaign,\n    \n    -- Channel Engagement Level\n    case \n        when ccs.total_channel_usage >= 100 then 'VERY_HIGH'\n        when ccs.total_channel_usage >= 50 then 'HIGH'\n        when ccs.total_channel_usage >= 20 then 'MEDIUM'\n        when ccs.total_channel_usage >= 5 then 'LOW'\n        when ccs.total_channel_usage > 0 then 'MINIMAL'\n        else 'NONE'\n    end as channel_engagement_level,\n    \n    -- Digital Session Quality\n    case \n        when cds.total_digital_activities >= 50 then 'HIGH_QUALITY'\n        when cds.total_digital_activities >= 20 then 'MEDIUM_QUALITY'\n        when cds.total_digital_activities >= 5 then 'LOW_QUALITY'\n        when cds.total_digital_activities > 0 then 'BRIEF_SESSIONS'\n        else 'NO_SESSIONS'\n    end as digital_session_quality,\n    \n    -- Next Best Channel Action\n    case \n        when ccs.digital_channels_used = 0 and ccs.physical_channels_used > 0 then 'DIGITAL_ONBOARDING'\n        when cds.total_digital_activities = 0 and ccs.total_channels_used = 1 then 'CHANNEL_EXPANSION'\n        when css.total_escalated_interactions > 2 then 'SERVICE_CHANNEL_OPTIMIZATION'\n        when cms.avg_conversion_rate < 0.05 and cms.total_campaigns_received > 10 then 'MARKETING_CHANNEL_REVIEW'\n        else 'MAINTAIN_CURRENT_STRATEGY'\n    end as next_best_channel_action,\n    \n    -- Channel Optimization Opportunity\n    case \n        when ccs.digital_channels_used = 0 and ccs.physical_channels_used > 0 then 'HIGH_DIGITAL_OPPORTUNITY'\n        when cms.avg_conversion_rate = 0 and cms.total_campaigns_received > 5 then 'MARKETING_OPTIMIZATION'\n        when css.service_channels_used > 3 and css.overall_service_satisfaction < 3 then 'SERVICE_CONSOLIDATION'\n        when cds.digital_platforms_used = 1 and cds.total_digital_activities > 20 then 'PLATFORM_EXPANSION'\n        else 'STANDARD_OPTIMIZATION'\n    end as channel_optimization_opportunity,\n    \n    current_timestamp as last_updated\n\nfrom customer_channel_summary ccs\nfull outer join customer_marketing_summary cms on ccs.customer_id = cms.customer_id\nfull outer join customer_service_summary css on coalesce(ccs.customer_id, cms.customer_id) = css.customer_id\nfull outer join customer_digital_summary cds on coalesce(ccs.customer_id, cms.customer_id, css.customer_id) = cds.customer_id", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_channel_usage", "package": null, "version": null}, {"name": "stg_marketing_campaigns", "package": null, "version": null}, {"name": "stg_customer_interactions", "package": null, "version": null}, {"name": "stg_digital_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.customer_360.stg_channel_usage", "model.customer_360.stg_marketing_campaigns", "model.customer_360.stg_customer_interactions", "model.customer_360.stg_digital_activity"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_id"], "time_spine": null}, "model.customer_360.int_customer_360_master": {"database": "cosmos", "schema": "cosmos", "name": "int_customer_360_master", "resource_type": "model", "package_name": "customer_360", "path": "intermediate/customer_analytics/int_customer_360_master.sql", "original_file_path": "models/intermediate/customer_analytics/int_customer_360_master.sql", "unique_id": "model.customer_360.int_customer_360_master", "fqn": ["customer_360", "intermediate", "customer_analytics", "int_customer_360_master"], "alias": "int_customer_360_master", "checksum": {"name": "sha256", "checksum": "14fefbadcf4b4a79b7186e851a2c5c3b7720aac850bcd5addf0aedd46892ecf1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver", "intermediate", "silver", "intermediate", "customer_analytics", "silver", "intermediate", "customer_analytics", "master_view"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver", "intermediate", "customer_analytics", "master_view"], "description": "Ultimate customer intelligence model combining all intermediate customer insights. Provides complete customer view for executive dashboards and AI/ML applications. Creates beautiful dependency cascades from multiple intermediate models.\n", "columns": {"customer_id": {"name": "customer_id", "description": "Unique customer identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_lifetime_value_score": {"name": "customer_lifetime_value_score", "description": "Calculated CLV score (0-100) based on multiple factors", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "churn_risk_score": {"name": "churn_risk_score", "description": "Predictive churn risk score (0-100, higher = more likely to churn)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "executive_customer_tier": {"name": "executive_customer_tier", "description": "Executive-level customer classification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "next_best_action": {"name": "next_best_action", "description": "AI-driven recommendation for next customer interaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/intermediate/intermediate_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["silver", "intermediate", "customer_analytics", "master_view"]}, "created_at": 1755857463.510584, "relation_name": "\"cosmos\".\"cosmos\".\"int_customer_360_master\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['silver', 'intermediate', 'customer_analytics', 'master_view']\n) }}\n\n/*\n    Customer 360 Master View\n    \n    The ultimate customer intelligence model combining multiple intermediate layers:\n    - Customer profile (int_customer_profile)\n    - Financial holdings summary (int_customer_financial_summary)\n    - Transaction analytics (int_transaction_analytics) - mapped via accounts\n    - Comprehensive risk profile (int_comprehensive_risk_profile)\n    \n    This creates the complete customer view for executive dashboards and AI/ML.\n    Creates beautiful dependency cascades: staging \u2192 intermediate \u2192 master intermediate\n*/\n\nwith customer_profile_base as (\n    select\n        customer_id,\n        customer_number,\n        full_name,\n        first_name,\n        last_name,\n        age,\n        gender,\n        age_cohort_name,\n        annual_income,\n        credit_score,\n        income_bracket_name,\n        credit_score_range_name,\n        risk_level,\n        primary_address,\n        city,\n        state_code,\n        customer_status,\n        customer_since_date,\n        relationship_years,\n        lifecycle_stage_name,\n        customer_value_segment,\n        current_segment,\n        marketing_eligible,\n        lending_eligible,\n        premium_product_eligible,\n        engagement_level,\n        at_risk_customer,\n        digital_preference,\n        total_service_interactions,\n        avg_satisfaction_score,\n        total_digital_activities\n    from {{ ref('int_customer_profile') }}\n),\n\nfinancial_summary as (\n    select\n        customer_id,\n        total_deposit_accounts,\n        active_deposit_accounts,\n        total_deposit_balances,\n        total_cards,\n        credit_cards,\n        total_credit_limit,\n        total_credit_balance,\n        avg_credit_utilization,\n        total_loans,\n        total_loan_balance,\n        delinquent_loans,\n        total_investments,\n        total_investment_value,\n        retirement_account_value,\n        total_insurance_policies,\n        total_insurance_coverage,\n        net_worth_with_bank,\n        total_relationship_value,\n        product_penetration_score,\n        financial_risk_level,\n        wealth_tier\n    from {{ ref('int_customer_financial_summary') }}\n),\n\n-- Get transaction analytics by aggregating across all customer accounts\ncustomer_transaction_summary as (\n    select\n        a.customer_id,\n        sum(ta.total_transactions) as total_transactions_across_accounts,\n        sum(ta.total_transaction_volume) as total_transaction_volume,\n        avg(ta.avg_transaction_amount) as avg_transaction_amount,\n        max(ta.largest_transaction) as largest_single_transaction,\n        sum(ta.net_cash_flow) as total_net_cash_flow,\n        sum(ta.total_deposits) as total_deposits,\n        sum(ta.total_deposit_amount) as total_deposit_amount,\n        sum(ta.total_withdrawals) as total_withdrawals,\n        sum(ta.total_withdrawal_amount) as total_withdrawal_amount,\n        sum(ta.total_payments) as total_payments,\n        sum(ta.total_payment_amount) as total_payment_amount,\n        sum(ta.total_fees) as total_fees_paid,\n        sum(ta.total_fee_amount) as total_fee_amount_paid,\n        avg(ta.digital_transaction_percentage) as avg_digital_transaction_pct,\n        avg(ta.fee_to_volume_ratio) as avg_fee_to_volume_ratio,\n        max(ta.last_transaction_date) as last_transaction_date,\n        mode() within group (order by ta.spending_category) as primary_spending_category,\n        mode() within group (order by ta.activity_level) as primary_activity_level\n    from {{ ref('stg_accounts') }} a\n    left join {{ ref('int_transaction_analytics') }} ta on a.account_id = ta.account_id\n    group by a.customer_id\n),\n\nrisk_profile as (\n    select\n        customer_id,\n        current_credit_risk_score,\n        current_fraud_risk_score,\n        overall_risk_level,\n        compliance_status,\n        composite_risk_score,\n        total_fraud_alerts,\n        confirmed_fraud_incidents,\n        total_compliance_flags,\n        avg_credit_score as risk_avg_credit_score,\n        requires_enhanced_monitoring,\n        requires_immediate_review,\n        risk_trend\n    from {{ ref('int_comprehensive_risk_profile') }}\n)\n\nselect\n    -- Customer Identity & Demographics\n    cp.customer_id,\n    cp.customer_number,\n    cp.full_name,\n    cp.first_name,\n    cp.last_name,\n    cp.age,\n    cp.gender,\n    cp.age_cohort_name,\n    cp.primary_address,\n    cp.city,\n    cp.state_code,\n    \n    -- Financial Profile\n    cp.annual_income,\n    cp.credit_score,\n    cp.income_bracket_name,\n    cp.credit_score_range_name,\n    cp.risk_level,\n    \n    -- Customer Lifecycle\n    cp.customer_status,\n    cp.customer_since_date,\n    cp.relationship_years,\n    cp.lifecycle_stage_name,\n    cp.customer_value_segment,\n    cp.current_segment,\n    \n    -- Product Holdings Summary\n    coalesce(fs.total_deposit_accounts, 0) as total_deposit_accounts,\n    coalesce(fs.total_deposit_balances, 0) as total_deposit_balances,\n    coalesce(fs.total_cards, 0) as total_cards,\n    coalesce(fs.total_credit_limit, 0) as total_credit_limit,\n    coalesce(fs.total_loans, 0) as total_loans,\n    coalesce(fs.total_loan_balance, 0) as total_loan_balance,\n    coalesce(fs.total_investments, 0) as total_investments,\n    coalesce(fs.total_investment_value, 0) as total_investment_value,\n    coalesce(fs.total_insurance_policies, 0) as total_insurance_policies,\n    \n    -- Wealth & Relationship Value\n    coalesce(fs.net_worth_with_bank, 0) as net_worth_with_bank,\n    coalesce(fs.total_relationship_value, 0) as total_relationship_value,\n    coalesce(fs.product_penetration_score, 0) as product_penetration_score,\n    fs.wealth_tier,\n    \n    -- Transaction Behavior\n    coalesce(cts.total_transactions_across_accounts, 0) as total_transactions,\n    coalesce(cts.total_transaction_volume, 0) as total_transaction_volume,\n    coalesce(cts.total_net_cash_flow, 0) as net_cash_flow,\n    coalesce(cts.total_deposit_amount, 0) as total_deposits_amount,\n    coalesce(cts.total_payment_amount, 0) as total_payments_amount,\n    coalesce(cts.total_fee_amount_paid, 0) as total_fees_paid,\n    cts.last_transaction_date,\n    cts.primary_spending_category,\n    cts.primary_activity_level,\n    \n    -- Digital Engagement\n    cp.digital_preference,\n    cp.total_digital_activities,\n    coalesce(cts.avg_digital_transaction_pct, 0) as digital_transaction_percentage,\n    \n    -- Service Experience\n    cp.engagement_level,\n    cp.total_service_interactions,\n    cp.avg_satisfaction_score,\n    \n    -- Risk Assessment\n    coalesce(rp.overall_risk_level, 'UNKNOWN') as overall_risk_level,\n    coalesce(rp.compliance_status, 'PENDING_VERIFICATION') as compliance_status,\n    coalesce(rp.composite_risk_score, 500) as composite_risk_score,\n    coalesce(rp.current_credit_risk_score, 500) as current_credit_risk_score,\n    coalesce(rp.current_fraud_risk_score, 500) as current_fraud_risk_score,\n    coalesce(rp.total_fraud_alerts, 0) as total_fraud_alerts,\n    coalesce(rp.confirmed_fraud_incidents, 0) as confirmed_fraud_incidents,\n    coalesce(rp.requires_enhanced_monitoring, false) as requires_enhanced_monitoring,\n    coalesce(rp.requires_immediate_review, false) as requires_immediate_review,\n    \n    -- Eligibility Flags\n    cp.marketing_eligible,\n    cp.lending_eligible,\n    cp.premium_product_eligible,\n    \n    -- Advanced Scoring & Classifications\n    \n    -- Customer Lifetime Value Score (0-100)\n    least(100, greatest(0, \n        (coalesce(fs.product_penetration_score, 0) * 0.3) +\n        (case \n            when fs.total_relationship_value >= 1000000 then 40\n            when fs.total_relationship_value >= 250000 then 30\n            when fs.total_relationship_value >= 100000 then 20\n            when fs.total_relationship_value >= 25000 then 10\n            else 5\n        end) +\n        (case \n            when cp.relationship_years >= 10 then 20\n            when cp.relationship_years >= 5 then 15\n            when cp.relationship_years >= 2 then 10\n            else 5\n        end) +\n        (case \n            when cp.engagement_level = 'HIGHLY_ENGAGED' then 10\n            when cp.engagement_level = 'MODERATELY_ENGAGED' then 7\n            when cp.engagement_level = 'LIGHTLY_ENGAGED' then 4\n            else 1\n        end)\n    )) as customer_lifetime_value_score,\n    \n    -- Churn Risk Score (0-100, higher = more likely to churn)\n    least(100, greatest(0,\n        (case when cp.at_risk_customer then 40 else 0 end) +\n        (case when cp.avg_satisfaction_score < 3 then 20 else 0 end) +\n        (case when fs.delinquent_loans > 0 then 15 else 0 end) +\n        (case when cts.total_transactions_across_accounts = 0 then 15 else 0 end) +\n        (case when rp.overall_risk_level in ('HIGH_RISK', 'CRITICAL_RISK') then 10 else 0 end)\n    )) as churn_risk_score,\n    \n    -- Next Best Action Recommendation\n    case \n        when rp.requires_immediate_review then 'IMMEDIATE_RISK_REVIEW'\n        when cp.at_risk_customer and cp.avg_satisfaction_score < 3 then 'RETENTION_OUTREACH'\n        when fs.wealth_tier in ('PRIVATE_BANKING', 'WEALTH_MANAGEMENT') and fs.total_investments = 0 then 'WEALTH_CONSULTATION'\n        when fs.product_penetration_score < 40 and cp.lending_eligible then 'CROSS_SELL_LENDING'\n        when cts.avg_digital_transaction_pct < 50 and cp.age < 50 then 'DIGITAL_ADOPTION_CAMPAIGN'\n        when fs.avg_credit_utilization > 0.8 then 'CREDIT_LIMIT_INCREASE_OFFER'\n        when cp.engagement_level = 'MINIMAL_ENGAGEMENT' then 'ENGAGEMENT_CAMPAIGN'\n        else 'MAINTAIN_RELATIONSHIP'\n    end as next_best_action,\n    \n    -- Executive Summary Tier\n    case \n        when fs.wealth_tier = 'PRIVATE_BANKING' then 'ULTRA_HIGH_NET_WORTH'\n        when fs.wealth_tier = 'WEALTH_MANAGEMENT' then 'HIGH_NET_WORTH'\n        when fs.product_penetration_score >= 80 and cp.relationship_years >= 5 then 'PLATINUM_CUSTOMER'\n        when fs.product_penetration_score >= 60 and cp.engagement_level = 'HIGHLY_ENGAGED' then 'GOLD_CUSTOMER'\n        when fs.product_penetration_score >= 40 then 'SILVER_CUSTOMER'\n        else 'BRONZE_CUSTOMER'\n    end as executive_customer_tier,\n    \n    current_timestamp as last_updated\n\nfrom customer_profile_base cp\nleft join financial_summary fs on cp.customer_id = fs.customer_id\nleft join customer_transaction_summary cts on cp.customer_id = cts.customer_id\nleft join risk_profile rp on cp.customer_id = rp.customer_id", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_profile", "package": null, "version": null}, {"name": "int_customer_financial_summary", "package": null, "version": null}, {"name": "stg_accounts", "package": null, "version": null}, {"name": "int_transaction_analytics", "package": null, "version": null}, {"name": "int_comprehensive_risk_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.customer_360.int_customer_profile", "model.customer_360.int_customer_financial_summary", "model.customer_360.stg_accounts", "model.customer_360.int_transaction_analytics", "model.customer_360.int_comprehensive_risk_profile"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_id"], "time_spine": null}, "model.customer_360.int_customer_retention_analytics": {"database": "cosmos", "schema": "cosmos", "name": "int_customer_retention_analytics", "resource_type": "model", "package_name": "customer_360", "path": "intermediate/customer_analytics/int_customer_retention_analytics.sql", "original_file_path": "models/intermediate/customer_analytics/int_customer_retention_analytics.sql", "unique_id": "model.customer_360.int_customer_retention_analytics", "fqn": ["customer_360", "intermediate", "customer_analytics", "int_customer_retention_analytics"], "alias": "int_customer_retention_analytics", "checksum": {"name": "sha256", "checksum": "cc268c5abf9934189391be69627accea29cf78ffc49dc910d909b2aff589be81"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver", "intermediate", "silver", "intermediate", "customer_analytics", "silver", "intermediate", "customer_analytics", "retention"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver", "intermediate", "customer_analytics", "retention"], "description": "Advanced retention modeling combining retention events, interaction patterns, digital engagement trends, and predictive churn scoring.\n", "columns": {"customer_id": {"name": "customer_id", "description": "Unique customer identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "churn_risk_score": {"name": "churn_risk_score", "description": "Composite churn risk score (0-100)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "retention_opportunity_score": {"name": "retention_opportunity_score", "description": "Score indicating retention program suitability (0-100)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "retention_lifecycle_stage": {"name": "retention_lifecycle_stage", "description": "Current stage in retention lifecycle", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "retention_priority": {"name": "retention_priority", "description": "Priority level for retention efforts", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/intermediate/intermediate_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["silver", "intermediate", "customer_analytics", "retention"]}, "created_at": 1755857463.511285, "relation_name": "\"cosmos\".\"cosmos\".\"int_customer_retention_analytics\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['silver', 'intermediate', 'customer_analytics', 'retention']\n) }}\n\n/*\n    Customer Retention Analytics\n    \n    Advanced retention modeling combining:\n    - Retention events (stg_retention_events)\n    - Customer interactions (stg_customer_interactions)\n    - Digital activity (stg_digital_activity)\n    - Customer profile insights (int_customer_profile)\n    - Risk assessment (int_comprehensive_risk_profile)\n    \n    Identifies churn risk and retention opportunities with predictive scoring.\n*/\n\nwith retention_events_summary as (\n    select\n        customer_id,\n        count(*) as total_retention_events,\n        count(case when event_type = 'CHURN_RISK_IDENTIFIED' then 1 end) as churn_risk_events,\n        count(case when event_type = 'RETENTION_OFFER_SENT' then 1 end) as retention_campaigns_sent,\n        count(case when event_type = 'CUSTOMER_SAVED' then 1 end) as retention_calls_made,\n        count(case when event_type = 'RETENTION_OFFER_SENT' then 1 end) as retention_offers_extended,\n        count(case when event_type = 'CUSTOMER_SAVED' then 1 end) as successful_retentions,\n        count(case when event_type = 'ACCOUNT_CLOSED' then 1 end) as churn_events,\n        max(event_date) as last_retention_event_date,\n        min(event_date) as first_retention_event_date,\n        max(case when event_type = 'CHURN_RISK_IDENTIFIED' then event_date end) as last_churn_risk_date,\n        -- Calculate a simple risk score based on event patterns (0-100)\n        case \n            when count(case when event_type = 'ACCOUNT_CLOSED' then 1 end) > 0 then 90\n            when count(case when event_type = 'CHURN_RISK_IDENTIFIED' then 1 end) > 2 then 75\n            when count(case when event_type = 'CHURN_RISK_IDENTIFIED' then 1 end) > 0 then 50\n            else 25\n        end as avg_churn_risk_score\n    from {{ ref('stg_retention_events') }}\n    group by customer_id\n),\n\ncustomer_interaction_patterns as (\n    select\n        customer_id,\n        count(*) as total_interactions,\n        count(case when reason_code = 'FEES_COMPLAINT' then 1 end) as complaint_interactions,\n        count(case when reason_code = 'TECHNICAL_SUPPORT' then 1 end) as support_interactions,\n        count(case when was_escalated then 1 end) as escalated_interactions,\n        avg(case when satisfaction_score is not null then satisfaction_score end) as avg_satisfaction_score,\n        min(case when satisfaction_score is not null then satisfaction_score end) as min_satisfaction_score,\n        max(interaction_datetime::date) as last_interaction_date,\n        count(case when interaction_datetime::date >= current_date - interval '30 days' then 1 end) as interactions_last_30_days,\n        count(case when interaction_datetime::date >= current_date - interval '90 days' then 1 end) as interactions_last_90_days\n    from {{ ref('stg_customer_interactions') }}\n    group by customer_id\n),\n\ndigital_engagement_trends as (\n    select\n        customer_id,\n        count(*) as total_digital_activities,\n        count(case when activity_timestamp >= current_date - interval '30 days' then 1 end) as digital_activities_last_30_days,\n        count(case when activity_timestamp >= current_date - interval '90 days' then 1 end) as digital_activities_last_90_days,\n        max(activity_timestamp::date) as last_digital_activity_date,\n        count(case when activity_type = 'LOGIN' then 1 end) as total_logins,\n        count(case when activity_type = 'LOGIN' and activity_timestamp >= current_date - interval '30 days' then 1 end) as logins_last_30_days\n    from {{ ref('stg_digital_activity') }}\n    group by customer_id\n),\n\ncustomer_profile_insights as (\n    select\n        customer_id,\n        engagement_level,\n        at_risk_customer,\n        digital_preference,\n        avg_satisfaction_score as profile_satisfaction_score,\n        relationship_years,\n        customer_value_segment,\n        lifecycle_stage_name,\n        total_service_interactions,\n        total_digital_activities\n    from {{ ref('int_customer_profile') }}\n),\n\nrisk_profile_insights as (\n    select\n        customer_id,\n        overall_risk_level,\n        compliance_status,\n        composite_risk_score,\n        total_fraud_alerts,\n        requires_enhanced_monitoring,\n        requires_immediate_review,\n        risk_trend\n    from {{ ref('int_comprehensive_risk_profile') }}\n)\n\nselect\n    -- Customer identifier\n    coalesce(\n        res.customer_id,\n        cip.customer_id,\n        det.customer_id,\n        cpi.customer_id,\n        rpi.customer_id\n    ) as customer_id,\n    \n    -- Retention Event History\n    coalesce(res.total_retention_events, 0) as total_retention_events,\n    coalesce(res.churn_risk_events, 0) as churn_risk_events,\n    coalesce(res.retention_campaigns_sent, 0) as retention_campaigns_sent,\n    coalesce(res.retention_calls_made, 0) as retention_calls_made,\n    coalesce(res.retention_offers_extended, 0) as retention_offers_extended,\n    coalesce(res.successful_retentions, 0) as successful_retentions,\n    coalesce(res.churn_events, 0) as churn_events,\n    res.last_retention_event_date,\n    res.last_churn_risk_date,\n    coalesce(res.avg_churn_risk_score, 0) as avg_churn_risk_score,\n    \n    -- Customer Interaction Patterns\n    coalesce(cip.total_interactions, 0) as total_interactions,\n    coalesce(cip.complaint_interactions, 0) as complaint_interactions,\n    coalesce(cip.support_interactions, 0) as support_interactions,\n    coalesce(cip.escalated_interactions, 0) as escalated_interactions,\n    coalesce(cip.avg_satisfaction_score, 0) as avg_satisfaction_score,\n    cip.min_satisfaction_score,\n    cip.last_interaction_date,\n    coalesce(cip.interactions_last_30_days, 0) as interactions_last_30_days,\n    coalesce(cip.interactions_last_90_days, 0) as interactions_last_90_days,\n    \n    -- Digital Engagement Trends\n    coalesce(det.total_digital_activities, 0) as total_digital_activities,\n    coalesce(det.digital_activities_last_30_days, 0) as digital_activities_last_30_days,\n    coalesce(det.digital_activities_last_90_days, 0) as digital_activities_last_90_days,\n    det.last_digital_activity_date,\n    coalesce(det.total_logins, 0) as total_logins,\n    coalesce(det.logins_last_30_days, 0) as logins_last_30_days,\n    \n    -- Customer Profile Context\n    coalesce(cpi.engagement_level, 'UNKNOWN') as engagement_level,\n    coalesce(cpi.at_risk_customer, false) as at_risk_customer,\n    coalesce(cpi.digital_preference, 'UNKNOWN') as digital_preference,\n    coalesce(cpi.relationship_years, 0) as relationship_years,\n    coalesce(cpi.customer_value_segment, 'UNKNOWN') as customer_value_segment,\n    coalesce(cpi.lifecycle_stage_name, 'UNKNOWN') as lifecycle_stage_name,\n    \n    -- Risk Context\n    coalesce(rpi.overall_risk_level, 'UNKNOWN') as overall_risk_level,\n    coalesce(rpi.compliance_status, 'UNKNOWN') as compliance_status,\n    coalesce(rpi.composite_risk_score, 500) as composite_risk_score,\n    coalesce(rpi.total_fraud_alerts, 0) as total_fraud_alerts,\n    coalesce(rpi.requires_enhanced_monitoring, false) as requires_enhanced_monitoring,\n    coalesce(rpi.risk_trend, 'STABLE') as risk_trend,\n    \n    -- Retention Performance Metrics\n    \n    -- Retention Campaign Success Rate\n    case \n        when res.retention_campaigns_sent > 0 then\n            round(res.successful_retentions::numeric / res.retention_campaigns_sent * 100, 2)\n        else 0\n    end as retention_campaign_success_rate,\n    \n    -- Churn Risk Score (0-100, higher = more likely to churn)\n    least(100, greatest(0,\n        -- Historical churn events\n        (coalesce(res.churn_events, 0) * 30) +\n        -- Current risk flags\n        (case when cpi.at_risk_customer then 25 else 0 end) +\n        -- Satisfaction issues\n        (case \n            when cip.min_satisfaction_score <= 2 then 20\n            when cip.avg_satisfaction_score <= 2.5 then 15\n            when cip.avg_satisfaction_score <= 3 then 10\n            else 0\n        end) +\n        -- Engagement decline\n        (case \n            when det.digital_activities_last_30_days = 0 and det.total_digital_activities > 0 then 15\n            when det.digital_activities_last_30_days < det.digital_activities_last_90_days / 3 then 10\n            else 0\n        end) +\n        -- Complaint pattern\n        (case \n            when cip.complaint_interactions > cip.support_interactions then 15\n            when cip.escalated_interactions > 2 then 10\n            else 0\n        end) +\n        -- Risk factors\n        (case \n            when rpi.overall_risk_level in ('HIGH_RISK', 'CRITICAL_RISK') then 10\n            when rpi.requires_immediate_review then 5\n            else 0\n        end)\n    )) as churn_risk_score,\n    \n    -- Retention Opportunity Score (0-100, higher = better retention opportunity)\n    least(100, greatest(0,\n        -- Customer value\n        (case \n            when cpi.customer_value_segment = 'HIGH_VALUE' then 30\n            when cpi.customer_value_segment = 'MEDIUM_VALUE' then 20\n            when cpi.customer_value_segment = 'LOW_VALUE' then 10\n            else 5\n        end) +\n        -- Relationship tenure\n        (case \n            when cpi.relationship_years >= 5 then 25\n            when cpi.relationship_years >= 2 then 20\n            when cpi.relationship_years >= 1 then 15\n            else 10\n        end) +\n        -- Historical retention success\n        (case \n            when res.successful_retentions > 0 then 20\n            when res.retention_campaigns_sent > 0 then 10\n            else 0\n        end) +\n        -- Engagement level\n        (case \n            when cpi.engagement_level = 'HIGHLY_ENGAGED' then 15\n            when cpi.engagement_level = 'MODERATELY_ENGAGED' then 10\n            when cpi.engagement_level = 'LIGHTLY_ENGAGED' then 5\n            else 0\n        end) +\n        -- Digital adoption\n        (case \n            when cpi.digital_preference in ('DIGITAL_FIRST', 'DIGITAL_PREFERRED') then 10\n            when cpi.digital_preference = 'MULTI_CHANNEL' then 5\n            else 0\n        end)\n    )) as retention_opportunity_score,\n    \n    -- Customer Lifecycle Stage for Retention\n    case \n        when res.churn_events > 0 then 'CHURNED'\n        when res.churn_risk_events > 0 and res.last_churn_risk_date >= current_date - interval '30 days' then 'HIGH_CHURN_RISK'\n        when cip.avg_satisfaction_score <= 2 or cip.escalated_interactions > 2 then 'DISSATISFIED'\n        when det.digital_activities_last_30_days = 0 and det.total_digital_activities > 0 then 'DISENGAGED'\n        when cip.interactions_last_30_days > 3 and cip.complaint_interactions > 0 then 'COMPLAINT_PATTERN'\n        when res.successful_retentions > 0 then 'SUCCESSFULLY_RETAINED'\n        when cpi.engagement_level = 'HIGHLY_ENGAGED' then 'LOYAL'\n        else 'STABLE'\n    end as retention_lifecycle_stage,\n    \n    -- Next Best Retention Action\n    case \n        when res.churn_events > 0 then 'WIN_BACK_CAMPAIGN'\n        when res.churn_risk_events > 0 and res.last_churn_risk_date >= current_date - interval '30 days' then 'IMMEDIATE_RETENTION_CALL'\n        when cip.min_satisfaction_score <= 2 then 'SATISFACTION_RECOVERY'\n        when det.digital_activities_last_30_days = 0 and det.total_digital_activities > 0 then 'RE_ENGAGEMENT_CAMPAIGN'\n        when cip.complaint_interactions > cip.support_interactions then 'PROACTIVE_OUTREACH'\n        when cip.escalated_interactions > 1 then 'EXECUTIVE_ESCALATION'\n        when cpi.engagement_level = 'MINIMAL_ENGAGED' then 'ACTIVATION_CAMPAIGN'\n        else 'STANDARD_RETENTION'\n    end as next_best_retention_action,\n    \n    -- Retention Strategy Recommendation\n    case \n        when cpi.customer_value_segment = 'HIGH_VALUE' and res.churn_risk_events > 0 then 'CONCIERGE_RETENTION'\n        when cpi.digital_preference = 'DIGITAL_FIRST' then 'DIGITAL_RETENTION_CAMPAIGN'\n        when cip.complaint_interactions > 0 then 'SERVICE_RECOVERY'\n        when det.digital_activities_last_30_days = 0 then 'PRODUCT_EDUCATION'\n        when cpi.relationship_years >= 5 then 'LOYALTY_REWARDS'\n        else 'STANDARD_RETENTION'\n    end as retention_strategy,\n    \n    -- Retention Priority Level\n    case \n        when res.churn_events > 0 then 'WIN_BACK'\n        when res.churn_risk_events > 0 and cpi.customer_value_segment = 'HIGH_VALUE' then 'CRITICAL'\n        when res.churn_risk_events > 0 or cip.avg_satisfaction_score <= 2 then 'HIGH'\n        when cip.escalated_interactions > 1 or det.digital_activities_last_30_days = 0 then 'MEDIUM'\n        when cpi.engagement_level = 'MINIMAL_ENGAGED' then 'LOW'\n        else 'MONITOR'\n    end as retention_priority,\n    \n    current_timestamp as last_updated\n\nfrom retention_events_summary res\nfull outer join customer_interaction_patterns cip on res.customer_id = cip.customer_id\nfull outer join digital_engagement_trends det on coalesce(res.customer_id, cip.customer_id) = det.customer_id\nfull outer join customer_profile_insights cpi on coalesce(res.customer_id, cip.customer_id, det.customer_id) = cpi.customer_id\nfull outer join risk_profile_insights rpi on coalesce(res.customer_id, cip.customer_id, det.customer_id, cpi.customer_id) = rpi.customer_id", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_retention_events", "package": null, "version": null}, {"name": "stg_customer_interactions", "package": null, "version": null}, {"name": "stg_digital_activity", "package": null, "version": null}, {"name": "int_customer_profile", "package": null, "version": null}, {"name": "int_comprehensive_risk_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.customer_360.stg_retention_events", "model.customer_360.stg_customer_interactions", "model.customer_360.stg_digital_activity", "model.customer_360.int_customer_profile", "model.customer_360.int_comprehensive_risk_profile"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_id"], "time_spine": null}, "model.customer_360.int_customer_profile": {"database": "cosmos", "schema": "cosmos", "name": "int_customer_profile", "resource_type": "model", "package_name": "customer_360", "path": "intermediate/customer_analytics/int_customer_profile.sql", "original_file_path": "models/intermediate/customer_analytics/int_customer_profile.sql", "unique_id": "model.customer_360.int_customer_profile", "fqn": ["customer_360", "intermediate", "customer_analytics", "int_customer_profile"], "alias": "int_customer_profile", "checksum": {"name": "sha256", "checksum": "955b44b5ebdbe3b7dc29fb9decfcde69ef535224b880fbb6cc96e7325a3bd6e5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver", "intermediate", "silver", "intermediate", "customer_analytics", "silver", "intermediate", "customer_analytics", "customer_profile"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver", "intermediate", "customer_analytics", "customer_profile"], "description": "Comprehensive 360-degree customer view combining demographics, contact info,  segmentation, service interactions, and digital engagement patterns. Foundation model for customer analytics and personalization.\n", "columns": {"customer_id": {"name": "customer_id", "description": "Unique customer identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "full_name": {"name": "full_name", "description": "Complete customer name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "engagement_level": {"name": "engagement_level", "description": "Customer engagement classification based on digital activity and satisfaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "digital_preference": {"name": "digital_preference", "description": "Customer's preferred digital interaction pattern", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "at_risk_customer": {"name": "at_risk_customer", "description": "Flag indicating if customer is at risk of churning", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/intermediate/intermediate_schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["silver", "intermediate", "customer_analytics", "customer_profile"]}, "created_at": 1755857463.509759, "relation_name": "\"cosmos\".\"cosmos\".\"int_customer_profile\"", "raw_code": "{{ config(\n    materialized='view',\n    tags=['silver', 'intermediate', 'customer_analytics', 'customer_profile']\n) }}\n\n/*\n    Intermediate Customer Profile\n    \n    Creates a comprehensive 360-degree customer view by combining:\n    - Core customer demographics (stg_customers)\n    - Contact information (stg_customer_addresses, stg_customer_phones) \n    - Segmentation data (stg_customer_segments)\n    - Service interaction history (stg_customer_interactions)\n    - Digital engagement patterns (stg_digital_activity)\n    \n    This is a foundational model for customer analytics and personalization.\n*/\n\nwith deduplicated_customers as (\n    select distinct\n        customer_id,\n        customer_number,\n        full_name,\n        first_name,\n        last_name,\n        age,\n        gender,\n        annual_income,\n        credit_score,\n        customer_status,\n        customer_since_date,\n        relationship_years,\n        age_cohort_name,\n        income_bracket_name,\n        credit_score_range_name,\n        risk_level,\n        lifecycle_stage_name,\n        customer_value_segment,\n        marketing_eligible,\n        lending_eligible,\n        premium_product_eligible\n    from {{ ref('stg_customers') }}\n),\n\none_address_per_customer as (\n    select\n        customer_id,\n        street_address,\n        city,\n        state_code,\n        postal_code,\n        full_address,\n        address_status as primary_address_status,\n        case when address_status = 'VERIFIED' then true else false end as address_verified\n    from (\n        select *,\n               row_number() over (partition by customer_id order by \n                   case when address_type = 'PRIMARY' then 1 else 2 end,\n                   address_since desc) as rn\n        from {{ ref('stg_customer_addresses') }}\n    ) ranked_addresses\n    where rn = 1\n),\n\none_phone_per_customer as (\n    select\n        customer_id,\n        formatted_phone as primary_phone,\n        phone_status as primary_phone_status,\n        is_verified as phone_verified,\n        call_eligible,\n        sms_eligible\n    from (\n        select *,\n               row_number() over (partition by customer_id order by \n                   case when is_primary then 1 else 2 end,\n                   phone_id desc) as rn\n        from {{ ref('stg_customer_phones') }}\n    ) ranked_phones\n    where rn = 1\n),\n\none_segment_per_customer as (\n    select\n        customer_id,\n        segment_name as current_segment,\n        segment_date as segment_assigned_date\n    from (\n        select *,\n               row_number() over (partition by customer_id order by segment_date desc) as rn\n        from {{ ref('stg_customer_segments') }}\n    ) ranked_segments\n    where rn = 1\n),\n\ninteraction_summary as (\n    select\n        customer_id,\n        count(*) as total_interactions,\n        count(case when status = 'RESOLVED' then 1 end) as resolved_interactions,\n        count(case when was_escalated then 1 end) as escalated_interactions,\n        avg(case when satisfaction_score is not null then satisfaction_score end) as avg_satisfaction_score,\n        max(interaction_datetime::date) as last_interaction_date,\n        min(interaction_datetime::date) as first_interaction_date,\n        count(distinct interaction_type) as interaction_types_used,\n        sum(case when resulted_in_retention then 1 else 0 end) as retention_interactions\n    from {{ ref('stg_customer_interactions') }}\n    group by customer_id\n),\n\ndigital_engagement as (\n    select\n        customer_id,\n        count(*) as total_digital_activities,\n        count(case when platform = 'MOBILE_APP' then 1 end) as mobile_activities,\n        count(case when platform = 'WEB_PORTAL' then 1 end) as web_activities,\n        count(distinct activity_type) as unique_activity_types,\n        max(activity_timestamp::date) as last_digital_activity_date,\n        count(case when activity_type = 'LOGIN' then 1 end) as login_count,\n        count(case when activity_type in ('TRANSFER', 'BILL_PAY', 'MOBILE_DEPOSIT') then 1 end) as financial_transaction_count\n    from {{ ref('stg_digital_activity') }}\n    group by customer_id\n)\n\nselect distinct\n    -- Customer Identity\n    cb.customer_id,\n    cb.customer_number,\n    cb.full_name,\n    cb.first_name,\n    cb.last_name,\n    \n    -- Demographics\n    cb.age,\n    cb.gender,\n    cb.age_cohort_name,\n    \n    -- Financial Profile\n    cb.annual_income,\n    cb.credit_score,\n    cb.income_bracket_name,\n    cb.credit_score_range_name,\n    cb.risk_level,\n    \n    -- Contact Information\n    pa.full_address as primary_address,\n    pa.city,\n    pa.state_code,\n    pa.postal_code as zip_code,\n    pa.address_verified,\n    pp.primary_phone,\n    pp.phone_verified,\n    pp.call_eligible,\n    pp.sms_eligible,\n    \n    -- Customer Lifecycle\n    cb.customer_status,\n    cb.customer_since_date,\n    cb.relationship_years,\n    cb.lifecycle_stage_name,\n    cb.customer_value_segment,\n    cs.current_segment,\n    cs.segment_assigned_date,\n    \n    -- Eligibility Flags\n    cb.marketing_eligible,\n    cb.lending_eligible,\n    cb.premium_product_eligible,\n    \n    -- Service Interaction Profile\n    coalesce(is_summary.total_interactions, 0) as total_service_interactions,\n    coalesce(is_summary.resolved_interactions, 0) as resolved_service_interactions,\n    coalesce(is_summary.escalated_interactions, 0) as escalated_interactions,\n    is_summary.avg_satisfaction_score,\n    is_summary.last_interaction_date,\n    coalesce(is_summary.retention_interactions, 0) as retention_interactions,\n    \n    -- Digital Engagement Profile\n    coalesce(de.total_digital_activities, 0) as total_digital_activities,\n    coalesce(de.mobile_activities, 0) as mobile_app_activities,\n    coalesce(de.web_activities, 0) as web_portal_activities,\n    de.last_digital_activity_date,\n    coalesce(de.login_count, 0) as digital_login_count,\n    coalesce(de.financial_transaction_count, 0) as digital_financial_transactions,\n    \n    -- Engagement Scoring\n    case \n        when de.total_digital_activities >= 50 and is_summary.avg_satisfaction_score >= 4 then 'HIGHLY_ENGAGED'\n        when de.total_digital_activities >= 20 and is_summary.avg_satisfaction_score >= 3 then 'MODERATELY_ENGAGED'\n        when de.total_digital_activities > 0 or is_summary.total_interactions > 0 then 'LIGHTLY_ENGAGED'\n        else 'MINIMAL_ENGAGEMENT'\n    end as engagement_level,\n    \n    -- Risk Indicators\n    case \n        when is_summary.escalated_interactions > 2 or is_summary.avg_satisfaction_score < 2 then true\n        else false\n    end as at_risk_customer,\n    \n    -- Digital Adoption\n    case \n        when de.mobile_activities > de.web_activities then 'MOBILE_PREFERRED'\n        when de.web_activities > de.mobile_activities then 'WEB_PREFERRED'\n        when de.total_digital_activities > 0 then 'MULTI_CHANNEL'\n        else 'NON_DIGITAL'\n    end as digital_preference,\n    \n    current_timestamp as last_updated\n\nfrom deduplicated_customers cb\nleft join one_address_per_customer pa on cb.customer_id = pa.customer_id\nleft join one_phone_per_customer pp on cb.customer_id = pp.customer_id  \nleft join one_segment_per_customer cs on cb.customer_id = cs.customer_id\nleft join interaction_summary is_summary on cb.customer_id = is_summary.customer_id\nleft join digital_engagement de on cb.customer_id = de.customer_id", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}, {"name": "stg_customer_addresses", "package": null, "version": null}, {"name": "stg_customer_phones", "package": null, "version": null}, {"name": "stg_customer_segments", "package": null, "version": null}, {"name": "stg_customer_interactions", "package": null, "version": null}, {"name": "stg_digital_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.customer_360.stg_customers", "model.customer_360.stg_customer_addresses", "model.customer_360.stg_customer_phones", "model.customer_360.stg_customer_segments", "model.customer_360.stg_customer_interactions", "model.customer_360.stg_digital_activity"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_id"], "time_spine": null}, "seed.customer_360.product_catalog": {"database": "cosmos", "schema": "cosmos", "name": "product_catalog", "resource_type": "seed", "package_name": "customer_360", "path": "product_catalog.csv", "original_file_path": "seeds/product_catalog.csv", "unique_id": "seed.customer_360.product_catalog", "fqn": ["customer_360", "product_catalog"], "alias": "product_catalog", "checksum": {"name": "sha256", "checksum": "5138dc1af502963cd203b1b939bd67c6914871cd76ef06b0a35ecc3bf00e6c0a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["reference_data"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference_data"], "description": "Catalog of all financial products offered by Pinnacle Financial Services", "columns": {"product_id": {"name": "product_id", "description": "Unique identifier for financial product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_name": {"name": "product_name", "description": "Display name of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_type": {"name": "product_type", "description": "Type classification (account, credit_card, loan, etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category": {"name": "category", "description": "Business category (banking, lending, investments, insurance)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "risk_level": {"name": "risk_level", "description": "Risk classification (Low, Medium, High)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/seeds_schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "tags": ["reference_data"]}, "created_at": 1755857463.271469, "relation_name": "\"cosmos\".\"cosmos\".\"product_catalog\"", "raw_code": "", "doc_blocks": [], "root_path": "/Users/tamara.fingerlin/0_PARA/Projects/cosmos_ebook_repo/dags/dbt/customer_360", "depends_on": {"macros": []}}, "seed.customer_360.marketing_segments": {"database": "cosmos", "schema": "cosmos", "name": "marketing_segments", "resource_type": "seed", "package_name": "customer_360", "path": "marketing_segments.csv", "original_file_path": "seeds/marketing_segments.csv", "unique_id": "seed.customer_360.marketing_segments", "fqn": ["customer_360", "marketing_segments"], "alias": "marketing_segments", "checksum": {"name": "sha256", "checksum": "0c1a99c2c91b510dbf094a211d16c6f38a47ffc61d103d95a7ec9931bded4b6e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["reference_data"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference_data"], "description": "Customer segments for marketing campaigns", "columns": {"segment_id": {"name": "segment_id", "description": "Unique segment identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "segment_name": {"name": "segment_name", "description": "Segment display name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "priority_level": {"name": "priority_level", "description": "Marketing priority level", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/seeds_schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "tags": ["reference_data"]}, "created_at": 1755857463.2816389, "relation_name": "\"cosmos\".\"cosmos\".\"marketing_segments\"", "raw_code": "", "doc_blocks": [], "root_path": "/Users/tamara.fingerlin/0_PARA/Projects/cosmos_ebook_repo/dags/dbt/customer_360", "depends_on": {"macros": []}}, "seed.customer_360.income_brackets": {"database": "cosmos", "schema": "cosmos", "name": "income_brackets", "resource_type": "seed", "package_name": "customer_360", "path": "income_brackets.csv", "original_file_path": "seeds/income_brackets.csv", "unique_id": "seed.customer_360.income_brackets", "fqn": ["customer_360", "income_brackets"], "alias": "income_brackets", "checksum": {"name": "sha256", "checksum": "5aecb0d497020661e7e6a99f32ef0cbdf724caa3ede346812985957631e84a89"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["reference_data"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference_data"], "description": "Income classification brackets for customer segmentation", "columns": {"bracket_id": {"name": "bracket_id", "description": "Unique bracket identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "bracket_name": {"name": "bracket_name", "description": "Income bracket display name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "min_income": {"name": "min_income", "description": "Minimum income for bracket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "max_income": {"name": "max_income", "description": "Maximum income for bracket", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/seeds_schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "tags": ["reference_data"]}, "created_at": 1755857463.276034, "relation_name": "\"cosmos\".\"cosmos\".\"income_brackets\"", "raw_code": "", "doc_blocks": [], "root_path": "/Users/tamara.fingerlin/0_PARA/Projects/cosmos_ebook_repo/dags/dbt/customer_360", "depends_on": {"macros": []}}, "seed.customer_360.occupation_categories": {"database": "cosmos", "schema": "cosmos", "name": "occupation_categories", "resource_type": "seed", "package_name": "customer_360", "path": "occupation_categories.csv", "original_file_path": "seeds/occupation_categories.csv", "unique_id": "seed.customer_360.occupation_categories", "fqn": ["customer_360", "occupation_categories"], "alias": "occupation_categories", "checksum": {"name": "sha256", "checksum": "b296804969c2e91f5baf8360756b0eed5f68b79a1baa3405360081c234461f71"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["reference_data"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference_data"], "description": "Occupation categories with risk assessments", "columns": {"occupation_id": {"name": "occupation_id", "description": "Unique occupation identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category_name": {"name": "category_name", "description": "Occupation category name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "risk_level": {"name": "risk_level", "description": "Risk assessment for occupation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "income_stability": {"name": "income_stability", "description": "Income stability rating", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/seeds_schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "tags": ["reference_data"]}, "created_at": 1755857463.277312, "relation_name": "\"cosmos\".\"cosmos\".\"occupation_categories\"", "raw_code": "", "doc_blocks": [], "root_path": "/Users/tamara.fingerlin/0_PARA/Projects/cosmos_ebook_repo/dags/dbt/customer_360", "depends_on": {"macros": []}}, "seed.customer_360.compliance_rules": {"database": "cosmos", "schema": "cosmos", "name": "compliance_rules", "resource_type": "seed", "package_name": "customer_360", "path": "compliance_rules.csv", "original_file_path": "seeds/compliance_rules.csv", "unique_id": "seed.customer_360.compliance_rules", "fqn": ["customer_360", "compliance_rules"], "alias": "compliance_rules", "checksum": {"name": "sha256", "checksum": "9c9d96df3167e2becd3a8d407a89127209b81f6457ff559177a88ee246856c2f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["reference_data"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference_data"], "description": "Business rules for compliance monitoring", "columns": {"rule_id": {"name": "rule_id", "description": "Unique rule identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "rule_name": {"name": "rule_name", "description": "Rule display name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "threshold": {"name": "threshold", "description": "Threshold value triggering rule", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "severity_level": {"name": "severity_level", "description": "Severity classification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/seeds_schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "tags": ["reference_data"]}, "created_at": 1755857463.278559, "relation_name": "\"cosmos\".\"cosmos\".\"compliance_rules\"", "raw_code": "", "doc_blocks": [], "root_path": "/Users/tamara.fingerlin/0_PARA/Projects/cosmos_ebook_repo/dags/dbt/customer_360", "depends_on": {"macros": []}}, "seed.customer_360.holiday_calendars": {"database": "cosmos", "schema": "cosmos", "name": "holiday_calendars", "resource_type": "seed", "package_name": "customer_360", "path": "holiday_calendars.csv", "original_file_path": "seeds/holiday_calendars.csv", "unique_id": "seed.customer_360.holiday_calendars", "fqn": ["customer_360", "holiday_calendars"], "alias": "holiday_calendars", "checksum": {"name": "sha256", "checksum": "df4556015e598c13a9ed9738d720a02ea78da5d1dccd8bcb9ed4049e3518fe07"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["reference_data"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference_data"], "description": "Bank holidays affecting processing schedules", "columns": {"holiday_id": {"name": "holiday_id", "description": "Unique holiday identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "holiday_name": {"name": "holiday_name", "description": "Holiday display name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "holiday_date": {"name": "holiday_date", "description": "Date of holiday", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "affects_processing": {"name": "affects_processing", "description": "Whether holiday affects transaction processing", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/seeds_schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "tags": ["reference_data"]}, "created_at": 1755857463.283478, "relation_name": "\"cosmos\".\"cosmos\".\"holiday_calendars\"", "raw_code": "", "doc_blocks": [], "root_path": "/Users/tamara.fingerlin/0_PARA/Projects/cosmos_ebook_repo/dags/dbt/customer_360", "depends_on": {"macros": []}}, "seed.customer_360.interest_rate_tiers": {"database": "cosmos", "schema": "cosmos", "name": "interest_rate_tiers", "resource_type": "seed", "package_name": "customer_360", "path": "interest_rate_tiers.csv", "original_file_path": "seeds/interest_rate_tiers.csv", "unique_id": "seed.customer_360.interest_rate_tiers", "fqn": ["customer_360", "interest_rate_tiers"], "alias": "interest_rate_tiers", "checksum": {"name": "sha256", "checksum": "40691ae03cdaf9bea7a75efa4285d49654aaed1d32c99f857b2ba11384e3a50a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["reference_data"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference_data"], "description": "Interest rate tiers by product and balance", "columns": {"tier_id": {"name": "tier_id", "description": "Unique tier identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_type": {"name": "product_type", "description": "Product type for rate tier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "interest_rate": {"name": "interest_rate", "description": "Annual percentage rate", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/seeds_schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "tags": ["reference_data"]}, "created_at": 1755857463.2808661, "relation_name": "\"cosmos\".\"cosmos\".\"interest_rate_tiers\"", "raw_code": "", "doc_blocks": [], "root_path": "/Users/tamara.fingerlin/0_PARA/Projects/cosmos_ebook_repo/dags/dbt/customer_360", "depends_on": {"macros": []}}, "seed.customer_360.risk_categories": {"database": "cosmos", "schema": "cosmos", "name": "risk_categories", "resource_type": "seed", "package_name": "customer_360", "path": "risk_categories.csv", "original_file_path": "seeds/risk_categories.csv", "unique_id": "seed.customer_360.risk_categories", "fqn": ["customer_360", "risk_categories"], "alias": "risk_categories", "checksum": {"name": "sha256", "checksum": "bbeb2b6b68db6528e9e16daa6f2f1ad7d292e6fd8e173df2f2dbfb588cb2e089"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["reference_data"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference_data"], "description": "Risk classification system for customer and product assessment", "columns": {"risk_category_id": {"name": "risk_category_id", "description": "Unique risk category identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "risk_level": {"name": "risk_level", "description": "Numeric risk level (1-10)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "score_min": {"name": "score_min", "description": "Minimum credit score for this category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "score_max": {"name": "score_max", "description": "Maximum credit score for this category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/seeds_schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "tags": ["reference_data"]}, "created_at": 1755857463.2722392, "relation_name": "\"cosmos\".\"cosmos\".\"risk_categories\"", "raw_code": "", "doc_blocks": [], "root_path": "/Users/tamara.fingerlin/0_PARA/Projects/cosmos_ebook_repo/dags/dbt/customer_360", "depends_on": {"macros": []}}, "seed.customer_360.economic_indicators": {"database": "cosmos", "schema": "cosmos", "name": "economic_indicators", "resource_type": "seed", "package_name": "customer_360", "path": "economic_indicators.csv", "original_file_path": "seeds/economic_indicators.csv", "unique_id": "seed.customer_360.economic_indicators", "fqn": ["customer_360", "economic_indicators"], "alias": "economic_indicators", "checksum": {"name": "sha256", "checksum": "4277d0cccca917dc661a2898c0b93dbda9448ecd6b4b68cec82f8799fd46ec15"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["reference_data"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference_data"], "description": "Economic indicators affecting lending and risk", "columns": {"indicator_id": {"name": "indicator_id", "description": "Unique indicator identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "indicator_name": {"name": "indicator_name", "description": "Economic indicator name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "current_value": {"name": "current_value", "description": "Current indicator value", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impact_on_lending": {"name": "impact_on_lending", "description": "Impact level on lending decisions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/seeds_schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "tags": ["reference_data"]}, "created_at": 1755857463.28416, "relation_name": "\"cosmos\".\"cosmos\".\"economic_indicators\"", "raw_code": "", "doc_blocks": [], "root_path": "/Users/tamara.fingerlin/0_PARA/Projects/cosmos_ebook_repo/dags/dbt/customer_360", "depends_on": {"macros": []}}, "seed.customer_360.geographic_regions": {"database": "cosmos", "schema": "cosmos", "name": "geographic_regions", "resource_type": "seed", "package_name": "customer_360", "path": "geographic_regions.csv", "original_file_path": "seeds/geographic_regions.csv", "unique_id": "seed.customer_360.geographic_regions", "fqn": ["customer_360", "geographic_regions"], "alias": "geographic_regions", "checksum": {"name": "sha256", "checksum": "1aa92321471ef8d09ea0bfb628c9ac8bac27b251c00d4cdb4ca6ec31e7ab5d41"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["reference_data"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference_data"], "description": "Geographic regions and market classifications", "columns": {"region_id": {"name": "region_id", "description": "Unique region identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_code": {"name": "state_code", "description": "Two-letter state code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_name": {"name": "state_name", "description": "Full state name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_type": {"name": "market_type", "description": "Market classification (Urban, Rural, Mixed)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/seeds_schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "tags": ["reference_data"]}, "created_at": 1755857463.275336, "relation_name": "\"cosmos\".\"cosmos\".\"geographic_regions\"", "raw_code": "", "doc_blocks": [], "root_path": "/Users/tamara.fingerlin/0_PARA/Projects/cosmos_ebook_repo/dags/dbt/customer_360", "depends_on": {"macros": []}}, "seed.customer_360.currency_codes": {"database": "cosmos", "schema": "cosmos", "name": "currency_codes", "resource_type": "seed", "package_name": "customer_360", "path": "currency_codes.csv", "original_file_path": "seeds/currency_codes.csv", "unique_id": "seed.customer_360.currency_codes", "fqn": ["customer_360", "currency_codes"], "alias": "currency_codes", "checksum": {"name": "sha256", "checksum": "3631f391129c0beadb41bcf84a4989149efe167e02c6e31171bde9f6fefc20c5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["reference_data"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference_data"], "description": "Supported currencies and exchange rates", "columns": {"currency_code": {"name": "currency_code", "description": "Three-letter currency code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency_name": {"name": "currency_name", "description": "Full currency name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "exchange_rate_usd": {"name": "exchange_rate_usd", "description": "Exchange rate to USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/seeds_schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "tags": ["reference_data"]}, "created_at": 1755857463.27912, "relation_name": "\"cosmos\".\"cosmos\".\"currency_codes\"", "raw_code": "", "doc_blocks": [], "root_path": "/Users/tamara.fingerlin/0_PARA/Projects/cosmos_ebook_repo/dags/dbt/customer_360", "depends_on": {"macros": []}}, "seed.customer_360.lifecycle_stages": {"database": "cosmos", "schema": "cosmos", "name": "lifecycle_stages", "resource_type": "seed", "package_name": "customer_360", "path": "lifecycle_stages.csv", "original_file_path": "seeds/lifecycle_stages.csv", "unique_id": "seed.customer_360.lifecycle_stages", "fqn": ["customer_360", "lifecycle_stages"], "alias": "lifecycle_stages", "checksum": {"name": "sha256", "checksum": "b2e5333eb069ef46eac995dd30737fbe79c3f7090ceee029b00c14c4cdc5178d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["reference_data"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference_data"], "description": "Customer lifecycle stages and transitions", "columns": {"stage_id": {"name": "stage_id", "description": "Unique stage identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "stage_name": {"name": "stage_name", "description": "Lifecycle stage name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "typical_duration_months": {"name": "typical_duration_months", "description": "Expected duration in this stage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/seeds_schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "tags": ["reference_data"]}, "created_at": 1755857463.282218, "relation_name": "\"cosmos\".\"cosmos\".\"lifecycle_stages\"", "raw_code": "", "doc_blocks": [], "root_path": "/Users/tamara.fingerlin/0_PARA/Projects/cosmos_ebook_repo/dags/dbt/customer_360", "depends_on": {"macros": []}}, "seed.customer_360.fee_structures": {"database": "cosmos", "schema": "cosmos", "name": "fee_structures", "resource_type": "seed", "package_name": "customer_360", "path": "fee_structures.csv", "original_file_path": "seeds/fee_structures.csv", "unique_id": "seed.customer_360.fee_structures", "fqn": ["customer_360", "fee_structures"], "alias": "fee_structures", "checksum": {"name": "sha256", "checksum": "b7c92811644629026fd980bb3c8d74acaef17363cb15bb50a064eafbe15096b2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["reference_data"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference_data"], "description": "Fee structures for products and services", "columns": {"fee_id": {"name": "fee_id", "description": "Unique fee identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fee_name": {"name": "fee_name", "description": "Fee display name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fee_amount": {"name": "fee_amount", "description": "Fee amount in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fee_type": {"name": "fee_type", "description": "Fee type classification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/seeds_schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "tags": ["reference_data"]}, "created_at": 1755857463.280343, "relation_name": "\"cosmos\".\"cosmos\".\"fee_structures\"", "raw_code": "", "doc_blocks": [], "root_path": "/Users/tamara.fingerlin/0_PARA/Projects/cosmos_ebook_repo/dags/dbt/customer_360", "depends_on": {"macros": []}}, "seed.customer_360.age_cohorts": {"database": "cosmos", "schema": "cosmos", "name": "age_cohorts", "resource_type": "seed", "package_name": "customer_360", "path": "age_cohorts.csv", "original_file_path": "seeds/age_cohorts.csv", "unique_id": "seed.customer_360.age_cohorts", "fqn": ["customer_360", "age_cohorts"], "alias": "age_cohorts", "checksum": {"name": "sha256", "checksum": "49e652de13846224840960aded6407e5d243d4a239b599d8534ed3132cef4407"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["reference_data"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference_data"], "description": "Age-based customer cohorts and characteristics", "columns": {"cohort_id": {"name": "cohort_id", "description": "Unique cohort identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cohort_name": {"name": "cohort_name", "description": "Cohort display name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "birth_year_start": {"name": "birth_year_start", "description": "Starting birth year for cohort", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "birth_year_end": {"name": "birth_year_end", "description": "Ending birth year for cohort", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/seeds_schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "tags": ["reference_data"]}, "created_at": 1755857463.276725, "relation_name": "\"cosmos\".\"cosmos\".\"age_cohorts\"", "raw_code": "", "doc_blocks": [], "root_path": "/Users/tamara.fingerlin/0_PARA/Projects/cosmos_ebook_repo/dags/dbt/customer_360", "depends_on": {"macros": []}}, "seed.customer_360.country_risk_ratings": {"database": "cosmos", "schema": "cosmos", "name": "country_risk_ratings", "resource_type": "seed", "package_name": "customer_360", "path": "country_risk_ratings.csv", "original_file_path": "seeds/country_risk_ratings.csv", "unique_id": "seed.customer_360.country_risk_ratings", "fqn": ["customer_360", "country_risk_ratings"], "alias": "country_risk_ratings", "checksum": {"name": "sha256", "checksum": "1b60ca2d378f05641bb1b572407129fd1985e494bc2acf50be5ebefbd26e5471"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["reference_data"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference_data"], "description": "Country risk assessments for international operations", "columns": {"country_code": {"name": "country_code", "description": "Two-letter country code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country_name": {"name": "country_name", "description": "Full country name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "risk_rating": {"name": "risk_rating", "description": "Overall country risk rating", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/seeds_schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "tags": ["reference_data"]}, "created_at": 1755857463.2796748, "relation_name": "\"cosmos\".\"cosmos\".\"country_risk_ratings\"", "raw_code": "", "doc_blocks": [], "root_path": "/Users/tamara.fingerlin/0_PARA/Projects/cosmos_ebook_repo/dags/dbt/customer_360", "depends_on": {"macros": []}}, "seed.customer_360.regulatory_requirements": {"database": "cosmos", "schema": "cosmos", "name": "regulatory_requirements", "resource_type": "seed", "package_name": "customer_360", "path": "regulatory_requirements.csv", "original_file_path": "seeds/regulatory_requirements.csv", "unique_id": "seed.customer_360.regulatory_requirements", "fqn": ["customer_360", "regulatory_requirements"], "alias": "regulatory_requirements", "checksum": {"name": "sha256", "checksum": "3f89c5e832f4646d5f8f323f7f6d3ac61ce7d0a8da5a7677269e1ecd18152865"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["reference_data"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference_data"], "description": "Regulatory requirements by product and threshold", "columns": {"requirement_id": {"name": "requirement_id", "description": "Unique requirement identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "regulation_name": {"name": "regulation_name", "description": "Name of regulation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "threshold_amount": {"name": "threshold_amount", "description": "Monetary threshold triggering requirement", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/seeds_schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "tags": ["reference_data"]}, "created_at": 1755857463.277874, "relation_name": "\"cosmos\".\"cosmos\".\"regulatory_requirements\"", "raw_code": "", "doc_blocks": [], "root_path": "/Users/tamara.fingerlin/0_PARA/Projects/cosmos_ebook_repo/dags/dbt/customer_360", "depends_on": {"macros": []}}, "seed.customer_360.channel_definitions": {"database": "cosmos", "schema": "cosmos", "name": "channel_definitions", "resource_type": "seed", "package_name": "customer_360", "path": "channel_definitions.csv", "original_file_path": "seeds/channel_definitions.csv", "unique_id": "seed.customer_360.channel_definitions", "fqn": ["customer_360", "channel_definitions"], "alias": "channel_definitions", "checksum": {"name": "sha256", "checksum": "cbd3fe1a70a7cdda6b97991d03ece69bb5103f923bf8162d8582da0cf0ebeae9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["reference_data"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference_data"], "description": "Customer service and interaction channels", "columns": {"channel_id": {"name": "channel_id", "description": "Unique channel identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "channel_name": {"name": "channel_name", "description": "Channel display name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_digital": {"name": "is_digital", "description": "Whether this is a digital channel", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cost_per_interaction": {"name": "cost_per_interaction", "description": "Average cost per customer interaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/seeds_schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "tags": ["reference_data"]}, "created_at": 1755857463.274616, "relation_name": "\"cosmos\".\"cosmos\".\"channel_definitions\"", "raw_code": "", "doc_blocks": [], "root_path": "/Users/tamara.fingerlin/0_PARA/Projects/cosmos_ebook_repo/dags/dbt/customer_360", "depends_on": {"macros": []}}, "seed.customer_360.service_level_agreements": {"database": "cosmos", "schema": "cosmos", "name": "service_level_agreements", "resource_type": "seed", "package_name": "customer_360", "path": "service_level_agreements.csv", "original_file_path": "seeds/service_level_agreements.csv", "unique_id": "seed.customer_360.service_level_agreements", "fqn": ["customer_360", "service_level_agreements"], "alias": "service_level_agreements", "checksum": {"name": "sha256", "checksum": "a2f1802f11e7616c418ee258c1c4a48aae50ac534b97630e0a3ce158b113aab6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["reference_data"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference_data"], "description": "Service level agreements by customer tier", "columns": {"sla_id": {"name": "sla_id", "description": "Unique SLA identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_tier": {"name": "customer_tier", "description": "Customer tier classification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "response_time_hours": {"name": "response_time_hours", "description": "Maximum response time in hours", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/seeds_schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "tags": ["reference_data"]}, "created_at": 1755857463.282791, "relation_name": "\"cosmos\".\"cosmos\".\"service_level_agreements\"", "raw_code": "", "doc_blocks": [], "root_path": "/Users/tamara.fingerlin/0_PARA/Projects/cosmos_ebook_repo/dags/dbt/customer_360", "depends_on": {"macros": []}}, "seed.customer_360.credit_score_ranges": {"database": "cosmos", "schema": "cosmos", "name": "credit_score_ranges", "resource_type": "seed", "package_name": "customer_360", "path": "credit_score_ranges.csv", "original_file_path": "seeds/credit_score_ranges.csv", "unique_id": "seed.customer_360.credit_score_ranges", "fqn": ["customer_360", "credit_score_ranges"], "alias": "credit_score_ranges", "checksum": {"name": "sha256", "checksum": "087688c9b3df29a9d0ff5c316f43d01e6647653f51d16400b47c6778add38ce9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["reference_data"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference_data"], "description": "Credit score ranges and associated risk profiles", "columns": {"score_range_id": {"name": "score_range_id", "description": "Unique identifier for score range", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "range_name": {"name": "range_name", "description": "Descriptive name for score range", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "min_score": {"name": "min_score", "description": "Minimum score in range", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "max_score": {"name": "max_score", "description": "Maximum score in range", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "default_rate": {"name": "default_rate", "description": "Historical default rate percentage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/seeds_schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "tags": ["reference_data"]}, "created_at": 1755857463.273101, "relation_name": "\"cosmos\".\"cosmos\".\"credit_score_ranges\"", "raw_code": "", "doc_blocks": [], "root_path": "/Users/tamara.fingerlin/0_PARA/Projects/cosmos_ebook_repo/dags/dbt/customer_360", "depends_on": {"macros": []}}, "seed.customer_360.transaction_types": {"database": "cosmos", "schema": "cosmos", "name": "transaction_types", "resource_type": "seed", "package_name": "customer_360", "path": "transaction_types.csv", "original_file_path": "seeds/transaction_types.csv", "unique_id": "seed.customer_360.transaction_types", "fqn": ["customer_360", "transaction_types"], "alias": "transaction_types", "checksum": {"name": "sha256", "checksum": "4608d4f69c8a0f0c495ddf1fa706b93f54bfbe50eb4e1c653e49b07fda68a4d1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["reference_data"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference_data"], "description": "Classification of all transaction types", "columns": {"transaction_type_id": {"name": "transaction_type_id", "description": "Unique transaction type identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "type_name": {"name": "type_name", "description": "Display name for transaction type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category": {"name": "category", "description": "Transaction category (deposit, withdrawal, transfer, etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "risk_weight": {"name": "risk_weight", "description": "Risk weighting factor for this transaction type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "customer_360://models/seeds_schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "tags": ["reference_data"]}, "created_at": 1755857463.273709, "relation_name": "\"cosmos\".\"cosmos\".\"transaction_types\"", "raw_code": "", "doc_blocks": [], "root_path": "/Users/tamara.fingerlin/0_PARA/Projects/cosmos_ebook_repo/dags/dbt/customer_360", "depends_on": {"macros": []}}, "test.customer_360.unique_product_catalog_product_id.ad58ab5fa8": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_product_catalog_product_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_product_catalog_product_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.unique_product_catalog_product_id.ad58ab5fa8", "fqn": ["customer_360", "unique_product_catalog_product_id"], "alias": "unique_product_catalog_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.326986, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_product_catalog_product_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "product_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.customer_360.product_catalog"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "seeds.product_catalog", "attached_node": "seed.customer_360.product_catalog", "test_metadata": {"name": "unique", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('product_catalog')) }}"}, "namespace": null}}, "test.customer_360.not_null_product_catalog_product_id.bd2ef1ab99": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_product_catalog_product_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_product_catalog_product_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.not_null_product_catalog_product_id.bd2ef1ab99", "fqn": ["customer_360", "not_null_product_catalog_product_id"], "alias": "not_null_product_catalog_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.3279989, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_product_catalog_product_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "product_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.customer_360.product_catalog"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "seeds.product_catalog", "attached_node": "seed.customer_360.product_catalog", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('product_catalog')) }}"}, "namespace": null}}, "test.customer_360.unique_risk_categories_risk_category_id.531cdefb99": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_risk_categories_risk_category_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_risk_categories_risk_category_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.unique_risk_categories_risk_category_id.531cdefb99", "fqn": ["customer_360", "unique_risk_categories_risk_category_id"], "alias": "unique_risk_categories_risk_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.328789, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_risk_categories_risk_category_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "risk_categories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.customer_360.risk_categories"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "risk_category_id", "file_key_name": "seeds.risk_categories", "attached_node": "seed.customer_360.risk_categories", "test_metadata": {"name": "unique", "kwargs": {"column_name": "risk_category_id", "model": "{{ get_where_subquery(ref('risk_categories')) }}"}, "namespace": null}}, "test.customer_360.not_null_risk_categories_risk_category_id.d514d55359": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_risk_categories_risk_category_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_risk_categories_risk_category_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.not_null_risk_categories_risk_category_id.d514d55359", "fqn": ["customer_360", "not_null_risk_categories_risk_category_id"], "alias": "not_null_risk_categories_risk_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.329529, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_risk_categories_risk_category_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "risk_categories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.customer_360.risk_categories"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "risk_category_id", "file_key_name": "seeds.risk_categories", "attached_node": "seed.customer_360.risk_categories", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "risk_category_id", "model": "{{ get_where_subquery(ref('risk_categories')) }}"}, "namespace": null}}, "test.customer_360.unique_credit_score_ranges_score_range_id.500ec5b348": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_credit_score_ranges_score_range_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_credit_score_ranges_score_range_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.unique_credit_score_ranges_score_range_id.500ec5b348", "fqn": ["customer_360", "unique_credit_score_ranges_score_range_id"], "alias": "unique_credit_score_ranges_score_range_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.330271, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_credit_score_ranges_score_range_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "credit_score_ranges", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.customer_360.credit_score_ranges"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "score_range_id", "file_key_name": "seeds.credit_score_ranges", "attached_node": "seed.customer_360.credit_score_ranges", "test_metadata": {"name": "unique", "kwargs": {"column_name": "score_range_id", "model": "{{ get_where_subquery(ref('credit_score_ranges')) }}"}, "namespace": null}}, "test.customer_360.not_null_credit_score_ranges_score_range_id.099d22141f": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_credit_score_ranges_score_range_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_credit_score_ranges_score_range_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.not_null_credit_score_ranges_score_range_id.099d22141f", "fqn": ["customer_360", "not_null_credit_score_ranges_score_range_id"], "alias": "not_null_credit_score_ranges_score_range_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.331001, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_credit_score_ranges_score_range_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "credit_score_ranges", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.customer_360.credit_score_ranges"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "score_range_id", "file_key_name": "seeds.credit_score_ranges", "attached_node": "seed.customer_360.credit_score_ranges", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "score_range_id", "model": "{{ get_where_subquery(ref('credit_score_ranges')) }}"}, "namespace": null}}, "test.customer_360.unique_transaction_types_transaction_type_id.bb14a1d457": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_transaction_types_transaction_type_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_transaction_types_transaction_type_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.unique_transaction_types_transaction_type_id.bb14a1d457", "fqn": ["customer_360", "unique_transaction_types_transaction_type_id"], "alias": "unique_transaction_types_transaction_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.33174, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_transaction_types_transaction_type_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "transaction_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.customer_360.transaction_types"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_type_id", "file_key_name": "seeds.transaction_types", "attached_node": "seed.customer_360.transaction_types", "test_metadata": {"name": "unique", "kwargs": {"column_name": "transaction_type_id", "model": "{{ get_where_subquery(ref('transaction_types')) }}"}, "namespace": null}}, "test.customer_360.not_null_transaction_types_transaction_type_id.bf9afad10e": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_transaction_types_transaction_type_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_transaction_types_transaction_type_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.not_null_transaction_types_transaction_type_id.bf9afad10e", "fqn": ["customer_360", "not_null_transaction_types_transaction_type_id"], "alias": "not_null_transaction_types_transaction_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.33272, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_transaction_types_transaction_type_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "transaction_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.customer_360.transaction_types"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_type_id", "file_key_name": "seeds.transaction_types", "attached_node": "seed.customer_360.transaction_types", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_type_id", "model": "{{ get_where_subquery(ref('transaction_types')) }}"}, "namespace": null}}, "test.customer_360.unique_channel_definitions_channel_id.f81e4e5ee3": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_channel_definitions_channel_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_channel_definitions_channel_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.unique_channel_definitions_channel_id.f81e4e5ee3", "fqn": ["customer_360", "unique_channel_definitions_channel_id"], "alias": "unique_channel_definitions_channel_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.333451, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_channel_definitions_channel_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "channel_definitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.customer_360.channel_definitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "channel_id", "file_key_name": "seeds.channel_definitions", "attached_node": "seed.customer_360.channel_definitions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "channel_id", "model": "{{ get_where_subquery(ref('channel_definitions')) }}"}, "namespace": null}}, "test.customer_360.not_null_channel_definitions_channel_id.fbefcb67e3": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_channel_definitions_channel_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_channel_definitions_channel_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.not_null_channel_definitions_channel_id.fbefcb67e3", "fqn": ["customer_360", "not_null_channel_definitions_channel_id"], "alias": "not_null_channel_definitions_channel_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.334189, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_channel_definitions_channel_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "channel_definitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.customer_360.channel_definitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "channel_id", "file_key_name": "seeds.channel_definitions", "attached_node": "seed.customer_360.channel_definitions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "channel_id", "model": "{{ get_where_subquery(ref('channel_definitions')) }}"}, "namespace": null}}, "test.customer_360.unique_geographic_regions_region_id.10d79a046e": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_geographic_regions_region_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_geographic_regions_region_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.unique_geographic_regions_region_id.10d79a046e", "fqn": ["customer_360", "unique_geographic_regions_region_id"], "alias": "unique_geographic_regions_region_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.334948, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_geographic_regions_region_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "geographic_regions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.customer_360.geographic_regions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "region_id", "file_key_name": "seeds.geographic_regions", "attached_node": "seed.customer_360.geographic_regions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "region_id", "model": "{{ get_where_subquery(ref('geographic_regions')) }}"}, "namespace": null}}, "test.customer_360.not_null_geographic_regions_region_id.61a868b6cb": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_geographic_regions_region_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_geographic_regions_region_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.not_null_geographic_regions_region_id.61a868b6cb", "fqn": ["customer_360", "not_null_geographic_regions_region_id"], "alias": "not_null_geographic_regions_region_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.335713, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_geographic_regions_region_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "geographic_regions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.customer_360.geographic_regions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "region_id", "file_key_name": "seeds.geographic_regions", "attached_node": "seed.customer_360.geographic_regions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "region_id", "model": "{{ get_where_subquery(ref('geographic_regions')) }}"}, "namespace": null}}, "test.customer_360.unique_income_brackets_bracket_id.89ac3ae36f": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_income_brackets_bracket_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_income_brackets_bracket_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.unique_income_brackets_bracket_id.89ac3ae36f", "fqn": ["customer_360", "unique_income_brackets_bracket_id"], "alias": "unique_income_brackets_bracket_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.3364632, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_income_brackets_bracket_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "income_brackets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.customer_360.income_brackets"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bracket_id", "file_key_name": "seeds.income_brackets", "attached_node": "seed.customer_360.income_brackets", "test_metadata": {"name": "unique", "kwargs": {"column_name": "bracket_id", "model": "{{ get_where_subquery(ref('income_brackets')) }}"}, "namespace": null}}, "test.customer_360.not_null_income_brackets_bracket_id.e7289c2012": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_income_brackets_bracket_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_income_brackets_bracket_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.not_null_income_brackets_bracket_id.e7289c2012", "fqn": ["customer_360", "not_null_income_brackets_bracket_id"], "alias": "not_null_income_brackets_bracket_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.3371782, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_income_brackets_bracket_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "income_brackets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.customer_360.income_brackets"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bracket_id", "file_key_name": "seeds.income_brackets", "attached_node": "seed.customer_360.income_brackets", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "bracket_id", "model": "{{ get_where_subquery(ref('income_brackets')) }}"}, "namespace": null}}, "test.customer_360.unique_age_cohorts_cohort_id.a482d4358e": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_age_cohorts_cohort_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_age_cohorts_cohort_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.unique_age_cohorts_cohort_id.a482d4358e", "fqn": ["customer_360", "unique_age_cohorts_cohort_id"], "alias": "unique_age_cohorts_cohort_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.337894, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_age_cohorts_cohort_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "age_cohorts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.customer_360.age_cohorts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cohort_id", "file_key_name": "seeds.age_cohorts", "attached_node": "seed.customer_360.age_cohorts", "test_metadata": {"name": "unique", "kwargs": {"column_name": "cohort_id", "model": "{{ get_where_subquery(ref('age_cohorts')) }}"}, "namespace": null}}, "test.customer_360.not_null_age_cohorts_cohort_id.5b4cef4196": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_age_cohorts_cohort_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_age_cohorts_cohort_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.not_null_age_cohorts_cohort_id.5b4cef4196", "fqn": ["customer_360", "not_null_age_cohorts_cohort_id"], "alias": "not_null_age_cohorts_cohort_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.338623, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_age_cohorts_cohort_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "age_cohorts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.customer_360.age_cohorts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cohort_id", "file_key_name": "seeds.age_cohorts", "attached_node": "seed.customer_360.age_cohorts", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cohort_id", "model": "{{ get_where_subquery(ref('age_cohorts')) }}"}, "namespace": null}}, "test.customer_360.unique_occupation_categories_occupation_id.aedeeac927": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_occupation_categories_occupation_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_occupation_categories_occupation_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.unique_occupation_categories_occupation_id.aedeeac927", "fqn": ["customer_360", "unique_occupation_categories_occupation_id"], "alias": "unique_occupation_categories_occupation_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.339343, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_occupation_categories_occupation_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "occupation_categories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.customer_360.occupation_categories"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "occupation_id", "file_key_name": "seeds.occupation_categories", "attached_node": "seed.customer_360.occupation_categories", "test_metadata": {"name": "unique", "kwargs": {"column_name": "occupation_id", "model": "{{ get_where_subquery(ref('occupation_categories')) }}"}, "namespace": null}}, "test.customer_360.not_null_occupation_categories_occupation_id.049967923f": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_occupation_categories_occupation_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_occupation_categories_occupation_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.not_null_occupation_categories_occupation_id.049967923f", "fqn": ["customer_360", "not_null_occupation_categories_occupation_id"], "alias": "not_null_occupation_categories_occupation_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.34006, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_occupation_categories_occupation_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "occupation_categories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.customer_360.occupation_categories"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "occupation_id", "file_key_name": "seeds.occupation_categories", "attached_node": "seed.customer_360.occupation_categories", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "occupation_id", "model": "{{ get_where_subquery(ref('occupation_categories')) }}"}, "namespace": null}}, "test.customer_360.unique_regulatory_requirements_requirement_id.d4821a03e1": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_regulatory_requirements_requirement_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_regulatory_requirements_requirement_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.unique_regulatory_requirements_requirement_id.d4821a03e1", "fqn": ["customer_360", "unique_regulatory_requirements_requirement_id"], "alias": "unique_regulatory_requirements_requirement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.340769, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_regulatory_requirements_requirement_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "regulatory_requirements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.customer_360.regulatory_requirements"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "requirement_id", "file_key_name": "seeds.regulatory_requirements", "attached_node": "seed.customer_360.regulatory_requirements", "test_metadata": {"name": "unique", "kwargs": {"column_name": "requirement_id", "model": "{{ get_where_subquery(ref('regulatory_requirements')) }}"}, "namespace": null}}, "test.customer_360.not_null_regulatory_requirements_requirement_id.f3e4797840": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_regulatory_requirements_requirement_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_regulatory_requirements_requirement_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.not_null_regulatory_requirements_requirement_id.f3e4797840", "fqn": ["customer_360", "not_null_regulatory_requirements_requirement_id"], "alias": "not_null_regulatory_requirements_requirement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.3414779, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_regulatory_requirements_requirement_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "regulatory_requirements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.customer_360.regulatory_requirements"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "requirement_id", "file_key_name": "seeds.regulatory_requirements", "attached_node": "seed.customer_360.regulatory_requirements", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "requirement_id", "model": "{{ get_where_subquery(ref('regulatory_requirements')) }}"}, "namespace": null}}, "test.customer_360.unique_compliance_rules_rule_id.2aab33c92d": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_compliance_rules_rule_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_compliance_rules_rule_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.unique_compliance_rules_rule_id.2aab33c92d", "fqn": ["customer_360", "unique_compliance_rules_rule_id"], "alias": "unique_compliance_rules_rule_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.342187, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_compliance_rules_rule_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "compliance_rules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.customer_360.compliance_rules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rule_id", "file_key_name": "seeds.compliance_rules", "attached_node": "seed.customer_360.compliance_rules", "test_metadata": {"name": "unique", "kwargs": {"column_name": "rule_id", "model": "{{ get_where_subquery(ref('compliance_rules')) }}"}, "namespace": null}}, "test.customer_360.not_null_compliance_rules_rule_id.4e9144f6fe": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_compliance_rules_rule_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_compliance_rules_rule_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.not_null_compliance_rules_rule_id.4e9144f6fe", "fqn": ["customer_360", "not_null_compliance_rules_rule_id"], "alias": "not_null_compliance_rules_rule_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.3428931, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_compliance_rules_rule_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "compliance_rules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.customer_360.compliance_rules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rule_id", "file_key_name": "seeds.compliance_rules", "attached_node": "seed.customer_360.compliance_rules", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "rule_id", "model": "{{ get_where_subquery(ref('compliance_rules')) }}"}, "namespace": null}}, "test.customer_360.unique_currency_codes_currency_code.8f52dad5ba": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_currency_codes_currency_code", "resource_type": "test", "package_name": "customer_360", "path": "unique_currency_codes_currency_code.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.unique_currency_codes_currency_code.8f52dad5ba", "fqn": ["customer_360", "unique_currency_codes_currency_code"], "alias": "unique_currency_codes_currency_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.343779, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_currency_codes_currency_code\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "currency_codes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.customer_360.currency_codes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "currency_code", "file_key_name": "seeds.currency_codes", "attached_node": "seed.customer_360.currency_codes", "test_metadata": {"name": "unique", "kwargs": {"column_name": "currency_code", "model": "{{ get_where_subquery(ref('currency_codes')) }}"}, "namespace": null}}, "test.customer_360.not_null_currency_codes_currency_code.d4e6f50f77": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_currency_codes_currency_code", "resource_type": "test", "package_name": "customer_360", "path": "not_null_currency_codes_currency_code.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.not_null_currency_codes_currency_code.d4e6f50f77", "fqn": ["customer_360", "not_null_currency_codes_currency_code"], "alias": "not_null_currency_codes_currency_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.344488, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_currency_codes_currency_code\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "currency_codes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.customer_360.currency_codes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "currency_code", "file_key_name": "seeds.currency_codes", "attached_node": "seed.customer_360.currency_codes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_code", "model": "{{ get_where_subquery(ref('currency_codes')) }}"}, "namespace": null}}, "test.customer_360.unique_country_risk_ratings_country_code.d44b893501": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_country_risk_ratings_country_code", "resource_type": "test", "package_name": "customer_360", "path": "unique_country_risk_ratings_country_code.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.unique_country_risk_ratings_country_code.d44b893501", "fqn": ["customer_360", "unique_country_risk_ratings_country_code"], "alias": "unique_country_risk_ratings_country_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.3451982, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_country_risk_ratings_country_code\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "country_risk_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.customer_360.country_risk_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_code", "file_key_name": "seeds.country_risk_ratings", "attached_node": "seed.customer_360.country_risk_ratings", "test_metadata": {"name": "unique", "kwargs": {"column_name": "country_code", "model": "{{ get_where_subquery(ref('country_risk_ratings')) }}"}, "namespace": null}}, "test.customer_360.not_null_country_risk_ratings_country_code.0beb7c4165": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_country_risk_ratings_country_code", "resource_type": "test", "package_name": "customer_360", "path": "not_null_country_risk_ratings_country_code.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.not_null_country_risk_ratings_country_code.0beb7c4165", "fqn": ["customer_360", "not_null_country_risk_ratings_country_code"], "alias": "not_null_country_risk_ratings_country_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.345917, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_country_risk_ratings_country_code\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "country_risk_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.customer_360.country_risk_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_code", "file_key_name": "seeds.country_risk_ratings", "attached_node": "seed.customer_360.country_risk_ratings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_code", "model": "{{ get_where_subquery(ref('country_risk_ratings')) }}"}, "namespace": null}}, "test.customer_360.unique_fee_structures_fee_id.e372dadd52": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_fee_structures_fee_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_fee_structures_fee_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.unique_fee_structures_fee_id.e372dadd52", "fqn": ["customer_360", "unique_fee_structures_fee_id"], "alias": "unique_fee_structures_fee_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.3466399, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_fee_structures_fee_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fee_structures", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.customer_360.fee_structures"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fee_id", "file_key_name": "seeds.fee_structures", "attached_node": "seed.customer_360.fee_structures", "test_metadata": {"name": "unique", "kwargs": {"column_name": "fee_id", "model": "{{ get_where_subquery(ref('fee_structures')) }}"}, "namespace": null}}, "test.customer_360.not_null_fee_structures_fee_id.24a91e8951": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_fee_structures_fee_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_fee_structures_fee_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.not_null_fee_structures_fee_id.24a91e8951", "fqn": ["customer_360", "not_null_fee_structures_fee_id"], "alias": "not_null_fee_structures_fee_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.347355, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_fee_structures_fee_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fee_structures", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.customer_360.fee_structures"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fee_id", "file_key_name": "seeds.fee_structures", "attached_node": "seed.customer_360.fee_structures", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fee_id", "model": "{{ get_where_subquery(ref('fee_structures')) }}"}, "namespace": null}}, "test.customer_360.unique_interest_rate_tiers_tier_id.a9a4ae154b": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_interest_rate_tiers_tier_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_interest_rate_tiers_tier_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.unique_interest_rate_tiers_tier_id.a9a4ae154b", "fqn": ["customer_360", "unique_interest_rate_tiers_tier_id"], "alias": "unique_interest_rate_tiers_tier_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.3480902, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_interest_rate_tiers_tier_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "interest_rate_tiers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.customer_360.interest_rate_tiers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tier_id", "file_key_name": "seeds.interest_rate_tiers", "attached_node": "seed.customer_360.interest_rate_tiers", "test_metadata": {"name": "unique", "kwargs": {"column_name": "tier_id", "model": "{{ get_where_subquery(ref('interest_rate_tiers')) }}"}, "namespace": null}}, "test.customer_360.not_null_interest_rate_tiers_tier_id.ba54cf404c": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_interest_rate_tiers_tier_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_interest_rate_tiers_tier_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.not_null_interest_rate_tiers_tier_id.ba54cf404c", "fqn": ["customer_360", "not_null_interest_rate_tiers_tier_id"], "alias": "not_null_interest_rate_tiers_tier_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.348829, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_interest_rate_tiers_tier_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "interest_rate_tiers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.customer_360.interest_rate_tiers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tier_id", "file_key_name": "seeds.interest_rate_tiers", "attached_node": "seed.customer_360.interest_rate_tiers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tier_id", "model": "{{ get_where_subquery(ref('interest_rate_tiers')) }}"}, "namespace": null}}, "test.customer_360.unique_marketing_segments_segment_id.2adf6d69dc": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_marketing_segments_segment_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_marketing_segments_segment_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.unique_marketing_segments_segment_id.2adf6d69dc", "fqn": ["customer_360", "unique_marketing_segments_segment_id"], "alias": "unique_marketing_segments_segment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.349569, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_marketing_segments_segment_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "marketing_segments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.customer_360.marketing_segments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "segment_id", "file_key_name": "seeds.marketing_segments", "attached_node": "seed.customer_360.marketing_segments", "test_metadata": {"name": "unique", "kwargs": {"column_name": "segment_id", "model": "{{ get_where_subquery(ref('marketing_segments')) }}"}, "namespace": null}}, "test.customer_360.not_null_marketing_segments_segment_id.372e2c52f7": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_marketing_segments_segment_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_marketing_segments_segment_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.not_null_marketing_segments_segment_id.372e2c52f7", "fqn": ["customer_360", "not_null_marketing_segments_segment_id"], "alias": "not_null_marketing_segments_segment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.3502982, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_marketing_segments_segment_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "marketing_segments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.customer_360.marketing_segments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "segment_id", "file_key_name": "seeds.marketing_segments", "attached_node": "seed.customer_360.marketing_segments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "segment_id", "model": "{{ get_where_subquery(ref('marketing_segments')) }}"}, "namespace": null}}, "test.customer_360.unique_lifecycle_stages_stage_id.9ba4ece453": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_lifecycle_stages_stage_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_lifecycle_stages_stage_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.unique_lifecycle_stages_stage_id.9ba4ece453", "fqn": ["customer_360", "unique_lifecycle_stages_stage_id"], "alias": "unique_lifecycle_stages_stage_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.35101, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_lifecycle_stages_stage_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "lifecycle_stages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.customer_360.lifecycle_stages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stage_id", "file_key_name": "seeds.lifecycle_stages", "attached_node": "seed.customer_360.lifecycle_stages", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stage_id", "model": "{{ get_where_subquery(ref('lifecycle_stages')) }}"}, "namespace": null}}, "test.customer_360.not_null_lifecycle_stages_stage_id.1f2f4aa529": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_lifecycle_stages_stage_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_lifecycle_stages_stage_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.not_null_lifecycle_stages_stage_id.1f2f4aa529", "fqn": ["customer_360", "not_null_lifecycle_stages_stage_id"], "alias": "not_null_lifecycle_stages_stage_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.351725, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_lifecycle_stages_stage_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "lifecycle_stages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.customer_360.lifecycle_stages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stage_id", "file_key_name": "seeds.lifecycle_stages", "attached_node": "seed.customer_360.lifecycle_stages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stage_id", "model": "{{ get_where_subquery(ref('lifecycle_stages')) }}"}, "namespace": null}}, "test.customer_360.unique_service_level_agreements_sla_id.38ff5304c7": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_service_level_agreements_sla_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_service_level_agreements_sla_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.unique_service_level_agreements_sla_id.38ff5304c7", "fqn": ["customer_360", "unique_service_level_agreements_sla_id"], "alias": "unique_service_level_agreements_sla_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.352441, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_service_level_agreements_sla_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "service_level_agreements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.customer_360.service_level_agreements"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sla_id", "file_key_name": "seeds.service_level_agreements", "attached_node": "seed.customer_360.service_level_agreements", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sla_id", "model": "{{ get_where_subquery(ref('service_level_agreements')) }}"}, "namespace": null}}, "test.customer_360.not_null_service_level_agreements_sla_id.cc1721d182": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_service_level_agreements_sla_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_service_level_agreements_sla_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.not_null_service_level_agreements_sla_id.cc1721d182", "fqn": ["customer_360", "not_null_service_level_agreements_sla_id"], "alias": "not_null_service_level_agreements_sla_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.3531451, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_service_level_agreements_sla_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "service_level_agreements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.customer_360.service_level_agreements"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sla_id", "file_key_name": "seeds.service_level_agreements", "attached_node": "seed.customer_360.service_level_agreements", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sla_id", "model": "{{ get_where_subquery(ref('service_level_agreements')) }}"}, "namespace": null}}, "test.customer_360.unique_holiday_calendars_holiday_id.a1383e3e34": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_holiday_calendars_holiday_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_holiday_calendars_holiday_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.unique_holiday_calendars_holiday_id.a1383e3e34", "fqn": ["customer_360", "unique_holiday_calendars_holiday_id"], "alias": "unique_holiday_calendars_holiday_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.354021, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_holiday_calendars_holiday_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "holiday_calendars", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.customer_360.holiday_calendars"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "holiday_id", "file_key_name": "seeds.holiday_calendars", "attached_node": "seed.customer_360.holiday_calendars", "test_metadata": {"name": "unique", "kwargs": {"column_name": "holiday_id", "model": "{{ get_where_subquery(ref('holiday_calendars')) }}"}, "namespace": null}}, "test.customer_360.not_null_holiday_calendars_holiday_id.852d7e9b65": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_holiday_calendars_holiday_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_holiday_calendars_holiday_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.not_null_holiday_calendars_holiday_id.852d7e9b65", "fqn": ["customer_360", "not_null_holiday_calendars_holiday_id"], "alias": "not_null_holiday_calendars_holiday_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.3547368, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_holiday_calendars_holiday_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "holiday_calendars", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.customer_360.holiday_calendars"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "holiday_id", "file_key_name": "seeds.holiday_calendars", "attached_node": "seed.customer_360.holiday_calendars", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "holiday_id", "model": "{{ get_where_subquery(ref('holiday_calendars')) }}"}, "namespace": null}}, "test.customer_360.unique_economic_indicators_indicator_id.154e0631da": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_economic_indicators_indicator_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_economic_indicators_indicator_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.unique_economic_indicators_indicator_id.154e0631da", "fqn": ["customer_360", "unique_economic_indicators_indicator_id"], "alias": "unique_economic_indicators_indicator_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.3554409, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_economic_indicators_indicator_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "economic_indicators", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.customer_360.economic_indicators"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "indicator_id", "file_key_name": "seeds.economic_indicators", "attached_node": "seed.customer_360.economic_indicators", "test_metadata": {"name": "unique", "kwargs": {"column_name": "indicator_id", "model": "{{ get_where_subquery(ref('economic_indicators')) }}"}, "namespace": null}}, "test.customer_360.not_null_economic_indicators_indicator_id.80b34f2a6a": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_economic_indicators_indicator_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_economic_indicators_indicator_id.sql", "original_file_path": "models/seeds_schema.yml", "unique_id": "test.customer_360.not_null_economic_indicators_indicator_id.80b34f2a6a", "fqn": ["customer_360", "not_null_economic_indicators_indicator_id"], "alias": "not_null_economic_indicators_indicator_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.3561542, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_economic_indicators_indicator_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "economic_indicators", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.customer_360.economic_indicators"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "indicator_id", "file_key_name": "seeds.economic_indicators", "attached_node": "seed.customer_360.economic_indicators", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "indicator_id", "model": "{{ get_where_subquery(ref('economic_indicators')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_customers_customer_id.c7614daada": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_customers_customer_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_customers_customer_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_customers_customer_id.c7614daada", "fqn": ["customer_360", "staging", "unique_stg_customers_customer_id"], "alias": "unique_stg_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.390881, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_customers_customer_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_customers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_customers", "attached_node": "model.customer_360.stg_customers", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_customers_customer_id.e2cfb1f9aa": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_customers_customer_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_customers_customer_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_customers_customer_id.e2cfb1f9aa", "fqn": ["customer_360", "staging", "not_null_stg_customers_customer_id"], "alias": "not_null_stg_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.391722, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_customers_customer_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_customers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_customers", "attached_node": "model.customer_360.stg_customers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_customers_customer_number.1c7b8445eb": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_customers_customer_number", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_customers_customer_number.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_customers_customer_number.1c7b8445eb", "fqn": ["customer_360", "staging", "unique_stg_customers_customer_number"], "alias": "unique_stg_customers_customer_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.392493, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_customers_customer_number\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_customers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_number", "file_key_name": "models.stg_customers", "attached_node": "model.customer_360.stg_customers", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_number", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_customers_customer_number.db9a067778": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_customers_customer_number", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_customers_customer_number.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_customers_customer_number.db9a067778", "fqn": ["customer_360", "staging", "not_null_stg_customers_customer_number"], "alias": "not_null_stg_customers_customer_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.3932219, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_customers_customer_number\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_customers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_number", "file_key_name": "models.stg_customers", "attached_node": "model.customer_360.stg_customers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_number", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_customers_first_name.57f99cf033": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_customers_first_name", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_customers_first_name.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_customers_first_name.57f99cf033", "fqn": ["customer_360", "staging", "not_null_stg_customers_first_name"], "alias": "not_null_stg_customers_first_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.39395, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_customers_first_name\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_customers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "first_name", "file_key_name": "models.stg_customers", "attached_node": "model.customer_360.stg_customers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "first_name", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_customers_last_name.fa1ab1e186": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_customers_last_name", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_customers_last_name.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_customers_last_name.fa1ab1e186", "fqn": ["customer_360", "staging", "not_null_stg_customers_last_name"], "alias": "not_null_stg_customers_last_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.394683, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_customers_last_name\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_customers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "last_name", "file_key_name": "models.stg_customers", "attached_node": "model.customer_360.stg_customers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "last_name", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_customers_email_address.4ac431a034": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_customers_email_address", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_customers_email_address.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_customers_email_address.4ac431a034", "fqn": ["customer_360", "staging", "not_null_stg_customers_email_address"], "alias": "not_null_stg_customers_email_address", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.395404, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_customers_email_address\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_customers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "email_address", "file_key_name": "models.stg_customers", "attached_node": "model.customer_360.stg_customers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email_address", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_customers_credit_score.1a2b785b97": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_customers_credit_score", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_customers_credit_score.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_customers_credit_score.1a2b785b97", "fqn": ["customer_360", "staging", "not_null_stg_customers_credit_score"], "alias": "not_null_stg_customers_credit_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.3961222, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_customers_credit_score\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_customers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "credit_score", "file_key_name": "models.stg_customers", "attached_node": "model.customer_360.stg_customers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "credit_score", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_customer_addresses_address_id.3dc38ac7e4": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_customer_addresses_address_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_customer_addresses_address_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_customer_addresses_address_id.3dc38ac7e4", "fqn": ["customer_360", "staging", "unique_stg_customer_addresses_address_id"], "alias": "unique_stg_customer_addresses_address_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.398314, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_customer_addresses_address_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customer_addresses", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_customer_addresses"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "address_id", "file_key_name": "models.stg_customer_addresses", "attached_node": "model.customer_360.stg_customer_addresses", "test_metadata": {"name": "unique", "kwargs": {"column_name": "address_id", "model": "{{ get_where_subquery(ref('stg_customer_addresses')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_customer_addresses_address_id.012a63311d": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_customer_addresses_address_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_customer_addresses_address_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_customer_addresses_address_id.012a63311d", "fqn": ["customer_360", "staging", "not_null_stg_customer_addresses_address_id"], "alias": "not_null_stg_customer_addresses_address_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.3990579, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_customer_addresses_address_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customer_addresses", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_customer_addresses"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "address_id", "file_key_name": "models.stg_customer_addresses", "attached_node": "model.customer_360.stg_customer_addresses", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "address_id", "model": "{{ get_where_subquery(ref('stg_customer_addresses')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_customer_addresses_customer_id.08250e83d9": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_customer_addresses_customer_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_customer_addresses_customer_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_customer_addresses_customer_id.08250e83d9", "fqn": ["customer_360", "staging", "not_null_stg_customer_addresses_customer_id"], "alias": "not_null_stg_customer_addresses_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.399786, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_customer_addresses_customer_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customer_addresses", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_customer_addresses"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_customer_addresses", "attached_node": "model.customer_360.stg_customer_addresses", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customer_addresses')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_customer_phones_phone_id.799d1b6bc9": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_customer_phones_phone_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_customer_phones_phone_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_customer_phones_phone_id.799d1b6bc9", "fqn": ["customer_360", "staging", "unique_stg_customer_phones_phone_id"], "alias": "unique_stg_customer_phones_phone_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.400518, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_customer_phones_phone_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customer_phones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_customer_phones"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "phone_id", "file_key_name": "models.stg_customer_phones", "attached_node": "model.customer_360.stg_customer_phones", "test_metadata": {"name": "unique", "kwargs": {"column_name": "phone_id", "model": "{{ get_where_subquery(ref('stg_customer_phones')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_customer_phones_phone_id.f20761ea7b": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_customer_phones_phone_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_customer_phones_phone_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_customer_phones_phone_id.f20761ea7b", "fqn": ["customer_360", "staging", "not_null_stg_customer_phones_phone_id"], "alias": "not_null_stg_customer_phones_phone_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.401261, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_customer_phones_phone_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customer_phones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_customer_phones"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "phone_id", "file_key_name": "models.stg_customer_phones", "attached_node": "model.customer_360.stg_customer_phones", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "phone_id", "model": "{{ get_where_subquery(ref('stg_customer_phones')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_customer_phones_customer_id.6e3e0955c1": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_customer_phones_customer_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_customer_phones_customer_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_customer_phones_customer_id.6e3e0955c1", "fqn": ["customer_360", "staging", "not_null_stg_customer_phones_customer_id"], "alias": "not_null_stg_customer_phones_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.402006, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_customer_phones_customer_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customer_phones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_customer_phones"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_customer_phones", "attached_node": "model.customer_360.stg_customer_phones", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customer_phones')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_accounts_account_id.cdf6252c79": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_accounts_account_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_accounts_account_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_accounts_account_id.cdf6252c79", "fqn": ["customer_360", "staging", "unique_stg_accounts_account_id"], "alias": "unique_stg_accounts_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.4027572, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_accounts_account_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_accounts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_accounts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_id", "file_key_name": "models.stg_accounts", "attached_node": "model.customer_360.stg_accounts", "test_metadata": {"name": "unique", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_accounts')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_accounts_account_id.182dfbc108": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_accounts_account_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_accounts_account_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_accounts_account_id.182dfbc108", "fqn": ["customer_360", "staging", "not_null_stg_accounts_account_id"], "alias": "not_null_stg_accounts_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.4034991, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_accounts_account_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_accounts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_accounts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_id", "file_key_name": "models.stg_accounts", "attached_node": "model.customer_360.stg_accounts", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_accounts')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_accounts_customer_id.0b54f014a3": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_accounts_customer_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_accounts_customer_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_accounts_customer_id.0b54f014a3", "fqn": ["customer_360", "staging", "not_null_stg_accounts_customer_id"], "alias": "not_null_stg_accounts_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.404207, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_accounts_customer_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_accounts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_accounts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_accounts", "attached_node": "model.customer_360.stg_accounts", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_accounts')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_accounts_product_type.58694c1112": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_accounts_product_type", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_accounts_product_type.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_accounts_product_type.58694c1112", "fqn": ["customer_360", "staging", "not_null_stg_accounts_product_type"], "alias": "not_null_stg_accounts_product_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.4049401, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_accounts_product_type\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_accounts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_accounts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_type", "file_key_name": "models.stg_accounts", "attached_node": "model.customer_360.stg_accounts", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_type", "model": "{{ get_where_subquery(ref('stg_accounts')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_stg_accounts_account_status__ACTIVE__CLOSED__DORMANT__RESTRICTED.c71cafef9c": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_stg_accounts_account_status__ACTIVE__CLOSED__DORMANT__RESTRICTED", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_stg_accounts_1fe8ef0a361a04585d2cd0c1d0fe5230.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.accepted_values_stg_accounts_account_status__ACTIVE__CLOSED__DORMANT__RESTRICTED.c71cafef9c", "fqn": ["customer_360", "staging", "accepted_values_stg_accounts_account_status__ACTIVE__CLOSED__DORMANT__RESTRICTED"], "alias": "accepted_values_stg_accounts_1fe8ef0a361a04585d2cd0c1d0fe5230", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_accounts_1fe8ef0a361a04585d2cd0c1d0fe5230", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_stg_accounts_1fe8ef0a361a04585d2cd0c1d0fe5230"}, "created_at": 1755857463.406373, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_stg_accounts_1fe8ef0a361a04585d2cd0c1d0fe5230\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_accounts_1fe8ef0a361a04585d2cd0c1d0fe5230\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_accounts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.stg_accounts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_status", "file_key_name": "models.stg_accounts", "attached_node": "model.customer_360.stg_accounts", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["ACTIVE", "CLOSED", "DORMANT", "RESTRICTED"], "column_name": "account_status", "model": "{{ get_where_subquery(ref('stg_accounts')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_transactions_transaction_id.ee9a78a396": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_transactions_transaction_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_transactions_transaction_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_transactions_transaction_id.ee9a78a396", "fqn": ["customer_360", "staging", "unique_stg_transactions_transaction_id"], "alias": "unique_stg_transactions_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.416251, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_transactions_transaction_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_id", "file_key_name": "models.stg_transactions", "attached_node": "model.customer_360.stg_transactions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_transactions')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_transactions_transaction_id.1d00a8e2e4": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_transactions_transaction_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_transactions_transaction_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_transactions_transaction_id.1d00a8e2e4", "fqn": ["customer_360", "staging", "not_null_stg_transactions_transaction_id"], "alias": "not_null_stg_transactions_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.4170601, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_transactions_transaction_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_id", "file_key_name": "models.stg_transactions", "attached_node": "model.customer_360.stg_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_transactions')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_transactions_account_id.a7d212da1d": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_transactions_account_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_transactions_account_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_transactions_account_id.a7d212da1d", "fqn": ["customer_360", "staging", "not_null_stg_transactions_account_id"], "alias": "not_null_stg_transactions_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.417826, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_transactions_account_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_id", "file_key_name": "models.stg_transactions", "attached_node": "model.customer_360.stg_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_transactions')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_deposits_deposit_id.e141493b89": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_deposits_deposit_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_deposits_deposit_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_deposits_deposit_id.e141493b89", "fqn": ["customer_360", "staging", "unique_stg_deposits_deposit_id"], "alias": "unique_stg_deposits_deposit_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.418577, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_deposits_deposit_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_deposits", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_deposits"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "deposit_id", "file_key_name": "models.stg_deposits", "attached_node": "model.customer_360.stg_deposits", "test_metadata": {"name": "unique", "kwargs": {"column_name": "deposit_id", "model": "{{ get_where_subquery(ref('stg_deposits')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_deposits_deposit_id.b6122931ab": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_deposits_deposit_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_deposits_deposit_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_deposits_deposit_id.b6122931ab", "fqn": ["customer_360", "staging", "not_null_stg_deposits_deposit_id"], "alias": "not_null_stg_deposits_deposit_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.4193358, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_deposits_deposit_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_deposits", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_deposits"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "deposit_id", "file_key_name": "models.stg_deposits", "attached_node": "model.customer_360.stg_deposits", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "deposit_id", "model": "{{ get_where_subquery(ref('stg_deposits')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_withdrawals_withdrawal_id.92674c3b97": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_withdrawals_withdrawal_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_withdrawals_withdrawal_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_withdrawals_withdrawal_id.92674c3b97", "fqn": ["customer_360", "staging", "unique_stg_withdrawals_withdrawal_id"], "alias": "unique_stg_withdrawals_withdrawal_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.420084, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_withdrawals_withdrawal_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_withdrawals", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_withdrawals"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "withdrawal_id", "file_key_name": "models.stg_withdrawals", "attached_node": "model.customer_360.stg_withdrawals", "test_metadata": {"name": "unique", "kwargs": {"column_name": "withdrawal_id", "model": "{{ get_where_subquery(ref('stg_withdrawals')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_withdrawals_withdrawal_id.ffb18dca4f": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_withdrawals_withdrawal_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_withdrawals_withdrawal_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_withdrawals_withdrawal_id.ffb18dca4f", "fqn": ["customer_360", "staging", "not_null_stg_withdrawals_withdrawal_id"], "alias": "not_null_stg_withdrawals_withdrawal_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.420819, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_withdrawals_withdrawal_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_withdrawals", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_withdrawals"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "withdrawal_id", "file_key_name": "models.stg_withdrawals", "attached_node": "model.customer_360.stg_withdrawals", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "withdrawal_id", "model": "{{ get_where_subquery(ref('stg_withdrawals')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_transfers_transfer_id.f991b9cc9e": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_transfers_transfer_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_transfers_transfer_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_transfers_transfer_id.f991b9cc9e", "fqn": ["customer_360", "staging", "unique_stg_transfers_transfer_id"], "alias": "unique_stg_transfers_transfer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.421551, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_transfers_transfer_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transfer_id", "file_key_name": "models.stg_transfers", "attached_node": "model.customer_360.stg_transfers", "test_metadata": {"name": "unique", "kwargs": {"column_name": "transfer_id", "model": "{{ get_where_subquery(ref('stg_transfers')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_transfers_transfer_id.622a15efdc": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_transfers_transfer_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_transfers_transfer_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_transfers_transfer_id.622a15efdc", "fqn": ["customer_360", "staging", "not_null_stg_transfers_transfer_id"], "alias": "not_null_stg_transfers_transfer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.422296, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_transfers_transfer_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transfer_id", "file_key_name": "models.stg_transfers", "attached_node": "model.customer_360.stg_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transfer_id", "model": "{{ get_where_subquery(ref('stg_transfers')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_payments_payment_id.3744510712": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_payments_payment_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_payments_payment_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_payments_payment_id.3744510712", "fqn": ["customer_360", "staging", "unique_stg_payments_payment_id"], "alias": "unique_stg_payments_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.4230258, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_payments_payment_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_id", "file_key_name": "models.stg_payments", "attached_node": "model.customer_360.stg_payments", "test_metadata": {"name": "unique", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_payments_payment_id.c19cc50075": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_payments_payment_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_payments_payment_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_payments_payment_id.c19cc50075", "fqn": ["customer_360", "staging", "not_null_stg_payments_payment_id"], "alias": "not_null_stg_payments_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.423755, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_payments_payment_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_id", "file_key_name": "models.stg_payments", "attached_node": "model.customer_360.stg_payments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_fees_fee_id.81f1c62ec9": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_fees_fee_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_fees_fee_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_fees_fee_id.81f1c62ec9", "fqn": ["customer_360", "staging", "unique_stg_fees_fee_id"], "alias": "unique_stg_fees_fee_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.424474, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_fees_fee_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fee_id", "file_key_name": "models.stg_fees", "attached_node": "model.customer_360.stg_fees", "test_metadata": {"name": "unique", "kwargs": {"column_name": "fee_id", "model": "{{ get_where_subquery(ref('stg_fees')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_fees_fee_id.a46960ff2f": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_fees_fee_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_fees_fee_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_fees_fee_id.a46960ff2f", "fqn": ["customer_360", "staging", "not_null_stg_fees_fee_id"], "alias": "not_null_stg_fees_fee_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.425204, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_fees_fee_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fee_id", "file_key_name": "models.stg_fees", "attached_node": "model.customer_360.stg_fees", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fee_id", "model": "{{ get_where_subquery(ref('stg_fees')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_interest_accruals_accrual_id.0501254279": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_interest_accruals_accrual_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_interest_accruals_accrual_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_interest_accruals_accrual_id.0501254279", "fqn": ["customer_360", "staging", "unique_stg_interest_accruals_accrual_id"], "alias": "unique_stg_interest_accruals_accrual_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.42622, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_interest_accruals_accrual_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_interest_accruals", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_interest_accruals"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "accrual_id", "file_key_name": "models.stg_interest_accruals", "attached_node": "model.customer_360.stg_interest_accruals", "test_metadata": {"name": "unique", "kwargs": {"column_name": "accrual_id", "model": "{{ get_where_subquery(ref('stg_interest_accruals')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_interest_accruals_accrual_id.0816e5042a": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_interest_accruals_accrual_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_interest_accruals_accrual_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_interest_accruals_accrual_id.0816e5042a", "fqn": ["customer_360", "staging", "not_null_stg_interest_accruals_accrual_id"], "alias": "not_null_stg_interest_accruals_accrual_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.42697, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_interest_accruals_accrual_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_interest_accruals", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_interest_accruals"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "accrual_id", "file_key_name": "models.stg_interest_accruals", "attached_node": "model.customer_360.stg_interest_accruals", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "accrual_id", "model": "{{ get_where_subquery(ref('stg_interest_accruals')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_account_balances_balance_id.2ea52af5ab": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_account_balances_balance_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_account_balances_balance_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_account_balances_balance_id.2ea52af5ab", "fqn": ["customer_360", "staging", "unique_stg_account_balances_balance_id"], "alias": "unique_stg_account_balances_balance_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.427705, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_account_balances_balance_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_account_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_account_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "balance_id", "file_key_name": "models.stg_account_balances", "attached_node": "model.customer_360.stg_account_balances", "test_metadata": {"name": "unique", "kwargs": {"column_name": "balance_id", "model": "{{ get_where_subquery(ref('stg_account_balances')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_account_balances_balance_id.3f2784ad64": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_account_balances_balance_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_account_balances_balance_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_account_balances_balance_id.3f2784ad64", "fqn": ["customer_360", "staging", "not_null_stg_account_balances_balance_id"], "alias": "not_null_stg_account_balances_balance_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.428449, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_account_balances_balance_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_account_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_account_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "balance_id", "file_key_name": "models.stg_account_balances", "attached_node": "model.customer_360.stg_account_balances", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "balance_id", "model": "{{ get_where_subquery(ref('stg_account_balances')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_cards_card_id.f326b4cb4d": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_cards_card_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_cards_card_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_cards_card_id.f326b4cb4d", "fqn": ["customer_360", "staging", "unique_stg_cards_card_id"], "alias": "unique_stg_cards_card_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.4291809, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_cards_card_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "card_id", "file_key_name": "models.stg_cards", "attached_node": "model.customer_360.stg_cards", "test_metadata": {"name": "unique", "kwargs": {"column_name": "card_id", "model": "{{ get_where_subquery(ref('stg_cards')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_cards_card_id.9f9047ca6a": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_cards_card_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_cards_card_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_cards_card_id.9f9047ca6a", "fqn": ["customer_360", "staging", "not_null_stg_cards_card_id"], "alias": "not_null_stg_cards_card_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.429904, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_cards_card_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "card_id", "file_key_name": "models.stg_cards", "attached_node": "model.customer_360.stg_cards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "card_id", "model": "{{ get_where_subquery(ref('stg_cards')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_loans_loan_id.be67636b63": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_loans_loan_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_loans_loan_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_loans_loan_id.be67636b63", "fqn": ["customer_360", "staging", "unique_stg_loans_loan_id"], "alias": "unique_stg_loans_loan_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.430625, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_loans_loan_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_loans", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_loans"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "loan_id", "file_key_name": "models.stg_loans", "attached_node": "model.customer_360.stg_loans", "test_metadata": {"name": "unique", "kwargs": {"column_name": "loan_id", "model": "{{ get_where_subquery(ref('stg_loans')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_loans_loan_id.b77c69982c": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_loans_loan_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_loans_loan_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_loans_loan_id.b77c69982c", "fqn": ["customer_360", "staging", "not_null_stg_loans_loan_id"], "alias": "not_null_stg_loans_loan_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.431347, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_loans_loan_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_loans", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_loans"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "loan_id", "file_key_name": "models.stg_loans", "attached_node": "model.customer_360.stg_loans", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "loan_id", "model": "{{ get_where_subquery(ref('stg_loans')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_credit_scores_score_id.559f99da3b": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_credit_scores_score_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_credit_scores_score_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_credit_scores_score_id.559f99da3b", "fqn": ["customer_360", "staging", "unique_stg_credit_scores_score_id"], "alias": "unique_stg_credit_scores_score_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.432084, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_credit_scores_score_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_credit_scores", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_credit_scores"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "score_id", "file_key_name": "models.stg_credit_scores", "attached_node": "model.customer_360.stg_credit_scores", "test_metadata": {"name": "unique", "kwargs": {"column_name": "score_id", "model": "{{ get_where_subquery(ref('stg_credit_scores')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_credit_scores_score_id.422dc7f911": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_credit_scores_score_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_credit_scores_score_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_credit_scores_score_id.422dc7f911", "fqn": ["customer_360", "staging", "not_null_stg_credit_scores_score_id"], "alias": "not_null_stg_credit_scores_score_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.432811, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_credit_scores_score_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_credit_scores", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_credit_scores"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "score_id", "file_key_name": "models.stg_credit_scores", "attached_node": "model.customer_360.stg_credit_scores", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "score_id", "model": "{{ get_where_subquery(ref('stg_credit_scores')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_credit_scores_credit_score.7796f78aa8": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_credit_scores_credit_score", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_credit_scores_credit_score.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_credit_scores_credit_score.7796f78aa8", "fqn": ["customer_360", "staging", "not_null_stg_credit_scores_credit_score"], "alias": "not_null_stg_credit_scores_credit_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.433555, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_credit_scores_credit_score\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_credit_scores", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_credit_scores"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "credit_score", "file_key_name": "models.stg_credit_scores", "attached_node": "model.customer_360.stg_credit_scores", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "credit_score", "model": "{{ get_where_subquery(ref('stg_credit_scores')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_investments_holding_id.fc8fb05352": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_investments_holding_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_investments_holding_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_investments_holding_id.fc8fb05352", "fqn": ["customer_360", "staging", "unique_stg_investments_holding_id"], "alias": "unique_stg_investments_holding_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.434284, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_investments_holding_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_investments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_investments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "holding_id", "file_key_name": "models.stg_investments", "attached_node": "model.customer_360.stg_investments", "test_metadata": {"name": "unique", "kwargs": {"column_name": "holding_id", "model": "{{ get_where_subquery(ref('stg_investments')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_investments_holding_id.9f33621334": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_investments_holding_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_investments_holding_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_investments_holding_id.9f33621334", "fqn": ["customer_360", "staging", "not_null_stg_investments_holding_id"], "alias": "not_null_stg_investments_holding_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.435005, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_investments_holding_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_investments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_investments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "holding_id", "file_key_name": "models.stg_investments", "attached_node": "model.customer_360.stg_investments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "holding_id", "model": "{{ get_where_subquery(ref('stg_investments')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_insurance_policies_policy_id.3fb13c969f": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_insurance_policies_policy_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_insurance_policies_policy_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_insurance_policies_policy_id.3fb13c969f", "fqn": ["customer_360", "staging", "unique_stg_insurance_policies_policy_id"], "alias": "unique_stg_insurance_policies_policy_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.435843, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_insurance_policies_policy_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_insurance_policies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_insurance_policies"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "policy_id", "file_key_name": "models.stg_insurance_policies", "attached_node": "model.customer_360.stg_insurance_policies", "test_metadata": {"name": "unique", "kwargs": {"column_name": "policy_id", "model": "{{ get_where_subquery(ref('stg_insurance_policies')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_insurance_policies_policy_id.557b8b16a2": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_insurance_policies_policy_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_insurance_policies_policy_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_insurance_policies_policy_id.557b8b16a2", "fqn": ["customer_360", "staging", "not_null_stg_insurance_policies_policy_id"], "alias": "not_null_stg_insurance_policies_policy_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.436864, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_insurance_policies_policy_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_insurance_policies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_insurance_policies"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "policy_id", "file_key_name": "models.stg_insurance_policies", "attached_node": "model.customer_360.stg_insurance_policies", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "policy_id", "model": "{{ get_where_subquery(ref('stg_insurance_policies')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_customer_interactions_interaction_id.0376adc910": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_customer_interactions_interaction_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_customer_interactions_interaction_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_customer_interactions_interaction_id.0376adc910", "fqn": ["customer_360", "staging", "unique_stg_customer_interactions_interaction_id"], "alias": "unique_stg_customer_interactions_interaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.437991, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_customer_interactions_interaction_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customer_interactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_customer_interactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "interaction_id", "file_key_name": "models.stg_customer_interactions", "attached_node": "model.customer_360.stg_customer_interactions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "interaction_id", "model": "{{ get_where_subquery(ref('stg_customer_interactions')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_customer_interactions_interaction_id.06068526a4": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_customer_interactions_interaction_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_customer_interactions_interaction_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_customer_interactions_interaction_id.06068526a4", "fqn": ["customer_360", "staging", "not_null_stg_customer_interactions_interaction_id"], "alias": "not_null_stg_customer_interactions_interaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.438889, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_customer_interactions_interaction_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customer_interactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_customer_interactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "interaction_id", "file_key_name": "models.stg_customer_interactions", "attached_node": "model.customer_360.stg_customer_interactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "interaction_id", "model": "{{ get_where_subquery(ref('stg_customer_interactions')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_marketing_campaigns_campaign_response_id.b987efe876": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_marketing_campaigns_campaign_response_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_marketing_campaigns_campaign_response_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_marketing_campaigns_campaign_response_id.b987efe876", "fqn": ["customer_360", "staging", "unique_stg_marketing_campaigns_campaign_response_id"], "alias": "unique_stg_marketing_campaigns_campaign_response_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.43965, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_marketing_campaigns_campaign_response_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_marketing_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_marketing_campaigns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "campaign_response_id", "file_key_name": "models.stg_marketing_campaigns", "attached_node": "model.customer_360.stg_marketing_campaigns", "test_metadata": {"name": "unique", "kwargs": {"column_name": "campaign_response_id", "model": "{{ get_where_subquery(ref('stg_marketing_campaigns')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_marketing_campaigns_campaign_response_id.45766a5749": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_marketing_campaigns_campaign_response_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_marketing_campaigns_campaign_response_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_marketing_campaigns_campaign_response_id.45766a5749", "fqn": ["customer_360", "staging", "not_null_stg_marketing_campaigns_campaign_response_id"], "alias": "not_null_stg_marketing_campaigns_campaign_response_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.440416, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_marketing_campaigns_campaign_response_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_marketing_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_marketing_campaigns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "campaign_response_id", "file_key_name": "models.stg_marketing_campaigns", "attached_node": "model.customer_360.stg_marketing_campaigns", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_response_id", "model": "{{ get_where_subquery(ref('stg_marketing_campaigns')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_digital_activity_activity_id.6f0e8f4cc4": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_digital_activity_activity_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_digital_activity_activity_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_digital_activity_activity_id.6f0e8f4cc4", "fqn": ["customer_360", "staging", "unique_stg_digital_activity_activity_id"], "alias": "unique_stg_digital_activity_activity_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.441167, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_digital_activity_activity_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_digital_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_digital_activity"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "activity_id", "file_key_name": "models.stg_digital_activity", "attached_node": "model.customer_360.stg_digital_activity", "test_metadata": {"name": "unique", "kwargs": {"column_name": "activity_id", "model": "{{ get_where_subquery(ref('stg_digital_activity')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_digital_activity_activity_id.81e37ba655": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_digital_activity_activity_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_digital_activity_activity_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_digital_activity_activity_id.81e37ba655", "fqn": ["customer_360", "staging", "not_null_stg_digital_activity_activity_id"], "alias": "not_null_stg_digital_activity_activity_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.441921, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_digital_activity_activity_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_digital_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_digital_activity"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "activity_id", "file_key_name": "models.stg_digital_activity", "attached_node": "model.customer_360.stg_digital_activity", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "activity_id", "model": "{{ get_where_subquery(ref('stg_digital_activity')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_channel_usage_usage_id.e3fbcbb409": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_channel_usage_usage_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_channel_usage_usage_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_channel_usage_usage_id.e3fbcbb409", "fqn": ["customer_360", "staging", "unique_stg_channel_usage_usage_id"], "alias": "unique_stg_channel_usage_usage_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.4426649, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_channel_usage_usage_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_channel_usage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_channel_usage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "usage_id", "file_key_name": "models.stg_channel_usage", "attached_node": "model.customer_360.stg_channel_usage", "test_metadata": {"name": "unique", "kwargs": {"column_name": "usage_id", "model": "{{ get_where_subquery(ref('stg_channel_usage')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_channel_usage_usage_id.37b9a2f3ad": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_channel_usage_usage_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_channel_usage_usage_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_channel_usage_usage_id.37b9a2f3ad", "fqn": ["customer_360", "staging", "not_null_stg_channel_usage_usage_id"], "alias": "not_null_stg_channel_usage_usage_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.443424, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_channel_usage_usage_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_channel_usage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_channel_usage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "usage_id", "file_key_name": "models.stg_channel_usage", "attached_node": "model.customer_360.stg_channel_usage", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "usage_id", "model": "{{ get_where_subquery(ref('stg_channel_usage')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_product_usage_usage_id.8cfe23816f": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_product_usage_usage_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_product_usage_usage_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_product_usage_usage_id.8cfe23816f", "fqn": ["customer_360", "staging", "unique_stg_product_usage_usage_id"], "alias": "unique_stg_product_usage_usage_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.444173, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_product_usage_usage_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_product_usage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_product_usage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "usage_id", "file_key_name": "models.stg_product_usage", "attached_node": "model.customer_360.stg_product_usage", "test_metadata": {"name": "unique", "kwargs": {"column_name": "usage_id", "model": "{{ get_where_subquery(ref('stg_product_usage')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_product_usage_usage_id.be0d138046": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_product_usage_usage_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_product_usage_usage_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_product_usage_usage_id.be0d138046", "fqn": ["customer_360", "staging", "not_null_stg_product_usage_usage_id"], "alias": "not_null_stg_product_usage_usage_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.4449248, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_product_usage_usage_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_product_usage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_product_usage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "usage_id", "file_key_name": "models.stg_product_usage", "attached_node": "model.customer_360.stg_product_usage", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "usage_id", "model": "{{ get_where_subquery(ref('stg_product_usage')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_customer_segments_segment_id.5a59ccd216": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_customer_segments_segment_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_customer_segments_segment_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_customer_segments_segment_id.5a59ccd216", "fqn": ["customer_360", "staging", "unique_stg_customer_segments_segment_id"], "alias": "unique_stg_customer_segments_segment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.445652, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_customer_segments_segment_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customer_segments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_customer_segments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "segment_id", "file_key_name": "models.stg_customer_segments", "attached_node": "model.customer_360.stg_customer_segments", "test_metadata": {"name": "unique", "kwargs": {"column_name": "segment_id", "model": "{{ get_where_subquery(ref('stg_customer_segments')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_customer_segments_segment_id.fbfbf2d859": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_customer_segments_segment_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_customer_segments_segment_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_customer_segments_segment_id.fbfbf2d859", "fqn": ["customer_360", "staging", "not_null_stg_customer_segments_segment_id"], "alias": "not_null_stg_customer_segments_segment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.446375, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_customer_segments_segment_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customer_segments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_customer_segments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "segment_id", "file_key_name": "models.stg_customer_segments", "attached_node": "model.customer_360.stg_customer_segments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "segment_id", "model": "{{ get_where_subquery(ref('stg_customer_segments')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_retention_events_event_id.245d36dcaa": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_retention_events_event_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_retention_events_event_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_retention_events_event_id.245d36dcaa", "fqn": ["customer_360", "staging", "unique_stg_retention_events_event_id"], "alias": "unique_stg_retention_events_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.4471092, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_retention_events_event_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_retention_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_retention_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_retention_events", "attached_node": "model.customer_360.stg_retention_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_retention_events')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_retention_events_event_id.038395d757": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_retention_events_event_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_retention_events_event_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_retention_events_event_id.038395d757", "fqn": ["customer_360", "staging", "not_null_stg_retention_events_event_id"], "alias": "not_null_stg_retention_events_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.4478312, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_retention_events_event_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_retention_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_retention_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_retention_events", "attached_node": "model.customer_360.stg_retention_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_retention_events')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_risk_assessments_assessment_id.301f1fb1b6": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_risk_assessments_assessment_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_risk_assessments_assessment_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_risk_assessments_assessment_id.301f1fb1b6", "fqn": ["customer_360", "staging", "unique_stg_risk_assessments_assessment_id"], "alias": "unique_stg_risk_assessments_assessment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.448562, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_risk_assessments_assessment_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_risk_assessments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_risk_assessments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "assessment_id", "file_key_name": "models.stg_risk_assessments", "attached_node": "model.customer_360.stg_risk_assessments", "test_metadata": {"name": "unique", "kwargs": {"column_name": "assessment_id", "model": "{{ get_where_subquery(ref('stg_risk_assessments')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_risk_assessments_assessment_id.e8dcbe5ef6": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_risk_assessments_assessment_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_risk_assessments_assessment_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_risk_assessments_assessment_id.e8dcbe5ef6", "fqn": ["customer_360", "staging", "not_null_stg_risk_assessments_assessment_id"], "alias": "not_null_stg_risk_assessments_assessment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.449465, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_risk_assessments_assessment_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_risk_assessments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_risk_assessments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "assessment_id", "file_key_name": "models.stg_risk_assessments", "attached_node": "model.customer_360.stg_risk_assessments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "assessment_id", "model": "{{ get_where_subquery(ref('stg_risk_assessments')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_kyc_records_kyc_id.1349285655": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_kyc_records_kyc_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_kyc_records_kyc_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_kyc_records_kyc_id.1349285655", "fqn": ["customer_360", "staging", "unique_stg_kyc_records_kyc_id"], "alias": "unique_stg_kyc_records_kyc_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.4502, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_kyc_records_kyc_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_kyc_records", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_kyc_records"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "kyc_id", "file_key_name": "models.stg_kyc_records", "attached_node": "model.customer_360.stg_kyc_records", "test_metadata": {"name": "unique", "kwargs": {"column_name": "kyc_id", "model": "{{ get_where_subquery(ref('stg_kyc_records')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_kyc_records_kyc_id.93e1addfcf": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_kyc_records_kyc_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_kyc_records_kyc_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_kyc_records_kyc_id.93e1addfcf", "fqn": ["customer_360", "staging", "not_null_stg_kyc_records_kyc_id"], "alias": "not_null_stg_kyc_records_kyc_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.450922, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_kyc_records_kyc_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_kyc_records", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_kyc_records"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "kyc_id", "file_key_name": "models.stg_kyc_records", "attached_node": "model.customer_360.stg_kyc_records", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "kyc_id", "model": "{{ get_where_subquery(ref('stg_kyc_records')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_compliance_records_compliance_id.c7420a7ff0": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_compliance_records_compliance_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_compliance_records_compliance_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_compliance_records_compliance_id.c7420a7ff0", "fqn": ["customer_360", "staging", "unique_stg_compliance_records_compliance_id"], "alias": "unique_stg_compliance_records_compliance_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.451808, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_compliance_records_compliance_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_compliance_records", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_compliance_records"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "compliance_id", "file_key_name": "models.stg_compliance_records", "attached_node": "model.customer_360.stg_compliance_records", "test_metadata": {"name": "unique", "kwargs": {"column_name": "compliance_id", "model": "{{ get_where_subquery(ref('stg_compliance_records')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_compliance_records_compliance_id.3153c76fca": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_compliance_records_compliance_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_compliance_records_compliance_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_compliance_records_compliance_id.3153c76fca", "fqn": ["customer_360", "staging", "not_null_stg_compliance_records_compliance_id"], "alias": "not_null_stg_compliance_records_compliance_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.4526038, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_compliance_records_compliance_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_compliance_records", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_compliance_records"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "compliance_id", "file_key_name": "models.stg_compliance_records", "attached_node": "model.customer_360.stg_compliance_records", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "compliance_id", "model": "{{ get_where_subquery(ref('stg_compliance_records')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_fraud_alerts_alert_id.e84886bf88": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_fraud_alerts_alert_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_fraud_alerts_alert_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_fraud_alerts_alert_id.e84886bf88", "fqn": ["customer_360", "staging", "unique_stg_fraud_alerts_alert_id"], "alias": "unique_stg_fraud_alerts_alert_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.4533582, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_fraud_alerts_alert_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_fraud_alerts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_fraud_alerts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "alert_id", "file_key_name": "models.stg_fraud_alerts", "attached_node": "model.customer_360.stg_fraud_alerts", "test_metadata": {"name": "unique", "kwargs": {"column_name": "alert_id", "model": "{{ get_where_subquery(ref('stg_fraud_alerts')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_fraud_alerts_alert_id.d3eab05de4": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_fraud_alerts_alert_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_fraud_alerts_alert_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_fraud_alerts_alert_id.d3eab05de4", "fqn": ["customer_360", "staging", "not_null_stg_fraud_alerts_alert_id"], "alias": "not_null_stg_fraud_alerts_alert_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.45411, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_fraud_alerts_alert_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_fraud_alerts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_fraud_alerts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "alert_id", "file_key_name": "models.stg_fraud_alerts", "attached_node": "model.customer_360.stg_fraud_alerts", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "alert_id", "model": "{{ get_where_subquery(ref('stg_fraud_alerts')) }}"}, "namespace": null}}, "test.customer_360.unique_stg_account_alerts_alert_id.8a82f61d9e": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_stg_account_alerts_alert_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_stg_account_alerts_alert_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.unique_stg_account_alerts_alert_id.8a82f61d9e", "fqn": ["customer_360", "staging", "unique_stg_account_alerts_alert_id"], "alias": "unique_stg_account_alerts_alert_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.454874, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_stg_account_alerts_alert_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_account_alerts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.stg_account_alerts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "alert_id", "file_key_name": "models.stg_account_alerts", "attached_node": "model.customer_360.stg_account_alerts", "test_metadata": {"name": "unique", "kwargs": {"column_name": "alert_id", "model": "{{ get_where_subquery(ref('stg_account_alerts')) }}"}, "namespace": null}}, "test.customer_360.not_null_stg_account_alerts_alert_id.dc874d5de8": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_stg_account_alerts_alert_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_stg_account_alerts_alert_id.sql", "original_file_path": "models/staging/staging_schema.yml", "unique_id": "test.customer_360.not_null_stg_account_alerts_alert_id.dc874d5de8", "fqn": ["customer_360", "staging", "not_null_stg_account_alerts_alert_id"], "alias": "not_null_stg_account_alerts_alert_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.455636, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_stg_account_alerts_alert_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_account_alerts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.stg_account_alerts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "alert_id", "file_key_name": "models.stg_account_alerts", "attached_node": "model.customer_360.stg_account_alerts", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "alert_id", "model": "{{ get_where_subquery(ref('stg_account_alerts')) }}"}, "namespace": null}}, "test.customer_360.not_null_executive_customer_dashboard_dashboard_section.9e476ee539": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_executive_customer_dashboard_dashboard_section", "resource_type": "test", "package_name": "customer_360", "path": "not_null_executive_customer_dashboard_dashboard_section.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.not_null_executive_customer_dashboard_dashboard_section.9e476ee539", "fqn": ["customer_360", "marts", "not_null_executive_customer_dashboard_dashboard_section"], "alias": "not_null_executive_customer_dashboard_dashboard_section", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.461302, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_executive_customer_dashboard_dashboard_section\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "executive_customer_dashboard", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.executive_customer_dashboard"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dashboard_section", "file_key_name": "models.executive_customer_dashboard", "attached_node": "model.customer_360.executive_customer_dashboard", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dashboard_section", "model": "{{ get_where_subquery(ref('executive_customer_dashboard')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_executive_customer_dashboard_dashboard_section__EXECUTIVE_SUMMARY__SEGMENT_PERFORMANCE.64a13a820f": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_executive_customer_dashboard_dashboard_section__EXECUTIVE_SUMMARY__SEGMENT_PERFORMANCE", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_executive_cust_7bb6b916b7d016e36b0d73116eb32d9d.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.accepted_values_executive_customer_dashboard_dashboard_section__EXECUTIVE_SUMMARY__SEGMENT_PERFORMANCE.64a13a820f", "fqn": ["customer_360", "marts", "accepted_values_executive_customer_dashboard_dashboard_section__EXECUTIVE_SUMMARY__SEGMENT_PERFORMANCE"], "alias": "accepted_values_executive_cust_7bb6b916b7d016e36b0d73116eb32d9d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_executive_cust_7bb6b916b7d016e36b0d73116eb32d9d", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_executive_cust_7bb6b916b7d016e36b0d73116eb32d9d"}, "created_at": 1755857463.462412, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_executive_cust_7bb6b916b7d016e36b0d73116eb32d9d\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_executive_cust_7bb6b916b7d016e36b0d73116eb32d9d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "executive_customer_dashboard", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.executive_customer_dashboard"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dashboard_section", "file_key_name": "models.executive_customer_dashboard", "attached_node": "model.customer_360.executive_customer_dashboard", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["EXECUTIVE_SUMMARY", "SEGMENT_PERFORMANCE"], "column_name": "dashboard_section", "model": "{{ get_where_subquery(ref('executive_customer_dashboard')) }}"}, "namespace": null}}, "test.customer_360.not_null_executive_customer_dashboard_total_customers.61c16a4ef0": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_executive_customer_dashboard_total_customers", "resource_type": "test", "package_name": "customer_360", "path": "not_null_executive_customer_dashboard_total_customers.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.not_null_executive_customer_dashboard_total_customers.61c16a4ef0", "fqn": ["customer_360", "marts", "not_null_executive_customer_dashboard_total_customers"], "alias": "not_null_executive_customer_dashboard_total_customers", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.4649081, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_executive_customer_dashboard_total_customers\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "executive_customer_dashboard", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.executive_customer_dashboard"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_customers", "file_key_name": "models.executive_customer_dashboard", "attached_node": "model.customer_360.executive_customer_dashboard", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_customers", "model": "{{ get_where_subquery(ref('executive_customer_dashboard')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_executive_customer_dashboard_portfolio_health__STRONG_VALUE_MIX__BALANCED_PORTFOLIO__GROWTH_OPPORTUNITY.6820918840": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_executive_customer_dashboard_portfolio_health__STRONG_VALUE_MIX__BALANCED_PORTFOLIO__GROWTH_OPPORTUNITY", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_executive_cust_1ff447e672ba1f87704322759b898d5f.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.accepted_values_executive_customer_dashboard_portfolio_health__STRONG_VALUE_MIX__BALANCED_PORTFOLIO__GROWTH_OPPORTUNITY.6820918840", "fqn": ["customer_360", "marts", "accepted_values_executive_customer_dashboard_portfolio_health__STRONG_VALUE_MIX__BALANCED_PORTFOLIO__GROWTH_OPPORTUNITY"], "alias": "accepted_values_executive_cust_1ff447e672ba1f87704322759b898d5f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_executive_cust_1ff447e672ba1f87704322759b898d5f", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_executive_cust_1ff447e672ba1f87704322759b898d5f"}, "created_at": 1755857463.465675, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_executive_cust_1ff447e672ba1f87704322759b898d5f\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_executive_cust_1ff447e672ba1f87704322759b898d5f\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "executive_customer_dashboard", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.executive_customer_dashboard"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "portfolio_health", "file_key_name": "models.executive_customer_dashboard", "attached_node": "model.customer_360.executive_customer_dashboard", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["STRONG_VALUE_MIX", "BALANCED_PORTFOLIO", "GROWTH_OPPORTUNITY"], "column_name": "portfolio_health", "model": "{{ get_where_subquery(ref('executive_customer_dashboard')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_executive_customer_dashboard_digital_maturity__DIGITAL_LEADER__DIGITAL_PROGRESSIVE__DIGITAL_OPPORTUNITY.adc26321fe": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_executive_customer_dashboard_digital_maturity__DIGITAL_LEADER__DIGITAL_PROGRESSIVE__DIGITAL_OPPORTUNITY", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_executive_cust_538c452a931eb140e820b1c8adfd5c5a.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.accepted_values_executive_customer_dashboard_digital_maturity__DIGITAL_LEADER__DIGITAL_PROGRESSIVE__DIGITAL_OPPORTUNITY.adc26321fe", "fqn": ["customer_360", "marts", "accepted_values_executive_customer_dashboard_digital_maturity__DIGITAL_LEADER__DIGITAL_PROGRESSIVE__DIGITAL_OPPORTUNITY"], "alias": "accepted_values_executive_cust_538c452a931eb140e820b1c8adfd5c5a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_executive_cust_538c452a931eb140e820b1c8adfd5c5a", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_executive_cust_538c452a931eb140e820b1c8adfd5c5a"}, "created_at": 1755857463.4680698, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_executive_cust_538c452a931eb140e820b1c8adfd5c5a\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_executive_cust_538c452a931eb140e820b1c8adfd5c5a\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "executive_customer_dashboard", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.executive_customer_dashboard"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "digital_maturity", "file_key_name": "models.executive_customer_dashboard", "attached_node": "model.customer_360.executive_customer_dashboard", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["DIGITAL_LEADER", "DIGITAL_PROGRESSIVE", "DIGITAL_OPPORTUNITY"], "column_name": "digital_maturity", "model": "{{ get_where_subquery(ref('executive_customer_dashboard')) }}"}, "namespace": null}}, "test.customer_360.not_null_financial_performance_summary_total_customers.5a254908de": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_financial_performance_summary_total_customers", "resource_type": "test", "package_name": "customer_360", "path": "not_null_financial_performance_summary_total_customers.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.not_null_financial_performance_summary_total_customers.5a254908de", "fqn": ["customer_360", "marts", "not_null_financial_performance_summary_total_customers"], "alias": "not_null_financial_performance_summary_total_customers", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.4704661, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_financial_performance_summary_total_customers\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "financial_performance_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.financial_performance_summary"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_customers", "file_key_name": "models.financial_performance_summary", "attached_node": "model.customer_360.financial_performance_summary", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_customers", "model": "{{ get_where_subquery(ref('financial_performance_summary')) }}"}, "namespace": null}}, "test.customer_360.not_null_financial_performance_summary_total_aum.a3330056d7": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_financial_performance_summary_total_aum", "resource_type": "test", "package_name": "customer_360", "path": "not_null_financial_performance_summary_total_aum.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.not_null_financial_performance_summary_total_aum.a3330056d7", "fqn": ["customer_360", "marts", "not_null_financial_performance_summary_total_aum"], "alias": "not_null_financial_performance_summary_total_aum", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.471576, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_financial_performance_summary_total_aum\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "financial_performance_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.financial_performance_summary"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_aum", "file_key_name": "models.financial_performance_summary", "attached_node": "model.customer_360.financial_performance_summary", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_aum", "model": "{{ get_where_subquery(ref('financial_performance_summary')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_financial_performance_summary_portfolio_yield_assessment__HIGH_YIELD_PORTFOLIO__STRONG_YIELD__MODERATE_YIELD__YIELD_IMPROVEMENT_NEEDED.9bf7a9d784": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_financial_performance_summary_portfolio_yield_assessment__HIGH_YIELD_PORTFOLIO__STRONG_YIELD__MODERATE_YIELD__YIELD_IMPROVEMENT_NEEDED", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_financial_perf_14e8d28f8f2aa00e1df1bca9bc07e553.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.accepted_values_financial_performance_summary_portfolio_yield_assessment__HIGH_YIELD_PORTFOLIO__STRONG_YIELD__MODERATE_YIELD__YIELD_IMPROVEMENT_NEEDED.9bf7a9d784", "fqn": ["customer_360", "marts", "accepted_values_financial_performance_summary_portfolio_yield_assessment__HIGH_YIELD_PORTFOLIO__STRONG_YIELD__MODERATE_YIELD__YIELD_IMPROVEMENT_NEEDED"], "alias": "accepted_values_financial_perf_14e8d28f8f2aa00e1df1bca9bc07e553", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_financial_perf_14e8d28f8f2aa00e1df1bca9bc07e553", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_financial_perf_14e8d28f8f2aa00e1df1bca9bc07e553"}, "created_at": 1755857463.472349, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_financial_perf_14e8d28f8f2aa00e1df1bca9bc07e553\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_financial_perf_14e8d28f8f2aa00e1df1bca9bc07e553\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "financial_performance_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.financial_performance_summary"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "portfolio_yield_assessment", "file_key_name": "models.financial_performance_summary", "attached_node": "model.customer_360.financial_performance_summary", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["HIGH_YIELD_PORTFOLIO", "STRONG_YIELD", "MODERATE_YIELD", "YIELD_IMPROVEMENT_NEEDED"], "column_name": "portfolio_yield_assessment", "model": "{{ get_where_subquery(ref('financial_performance_summary')) }}"}, "namespace": null}}, "test.customer_360.not_null_risk_management_dashboard_dashboard_section.e9949c930b": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_risk_management_dashboard_dashboard_section", "resource_type": "test", "package_name": "customer_360", "path": "not_null_risk_management_dashboard_dashboard_section.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.not_null_risk_management_dashboard_dashboard_section.e9949c930b", "fqn": ["customer_360", "marts", "not_null_risk_management_dashboard_dashboard_section"], "alias": "not_null_risk_management_dashboard_dashboard_section", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.474865, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_risk_management_dashboard_dashboard_section\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "risk_management_dashboard", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.risk_management_dashboard"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dashboard_section", "file_key_name": "models.risk_management_dashboard", "attached_node": "model.customer_360.risk_management_dashboard", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dashboard_section", "model": "{{ get_where_subquery(ref('risk_management_dashboard')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_risk_management_dashboard_dashboard_section__RISK_OVERVIEW__WEALTH_TIER_RISK_BREAKDOWN.d4b443037b": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_risk_management_dashboard_dashboard_section__RISK_OVERVIEW__WEALTH_TIER_RISK_BREAKDOWN", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_risk_managemen_0c97d9e357870d4cebbc0085e9dc9b44.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.accepted_values_risk_management_dashboard_dashboard_section__RISK_OVERVIEW__WEALTH_TIER_RISK_BREAKDOWN.d4b443037b", "fqn": ["customer_360", "marts", "accepted_values_risk_management_dashboard_dashboard_section__RISK_OVERVIEW__WEALTH_TIER_RISK_BREAKDOWN"], "alias": "accepted_values_risk_managemen_0c97d9e357870d4cebbc0085e9dc9b44", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_risk_managemen_0c97d9e357870d4cebbc0085e9dc9b44", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_risk_managemen_0c97d9e357870d4cebbc0085e9dc9b44"}, "created_at": 1755857463.47562, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_risk_managemen_0c97d9e357870d4cebbc0085e9dc9b44\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_risk_managemen_0c97d9e357870d4cebbc0085e9dc9b44\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "risk_management_dashboard", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.risk_management_dashboard"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dashboard_section", "file_key_name": "models.risk_management_dashboard", "attached_node": "model.customer_360.risk_management_dashboard", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["RISK_OVERVIEW", "WEALTH_TIER_RISK_BREAKDOWN"], "column_name": "dashboard_section", "model": "{{ get_where_subquery(ref('risk_management_dashboard')) }}"}, "namespace": null}}, "test.customer_360.not_null_risk_management_dashboard_total_customers.f0dae1992c": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_risk_management_dashboard_total_customers", "resource_type": "test", "package_name": "customer_360", "path": "not_null_risk_management_dashboard_total_customers.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.not_null_risk_management_dashboard_total_customers.f0dae1992c", "fqn": ["customer_360", "marts", "not_null_risk_management_dashboard_total_customers"], "alias": "not_null_risk_management_dashboard_total_customers", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.477839, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_risk_management_dashboard_total_customers\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "risk_management_dashboard", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.risk_management_dashboard"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_customers", "file_key_name": "models.risk_management_dashboard", "attached_node": "model.customer_360.risk_management_dashboard", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_customers", "model": "{{ get_where_subquery(ref('risk_management_dashboard')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_risk_management_dashboard_portfolio_risk_status__CRITICAL_RISK_PORTFOLIO__HIGH_RISK_CONCENTRATION__COMPLIANCE_ISSUES__RISK_DETERIORATION__MANAGED_RISK_PROFILE.12838d5721": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_risk_management_dashboard_portfolio_risk_status__CRITICAL_RISK_PORTFOLIO__HIGH_RISK_CONCENTRATION__COMPLIANCE_ISSUES__RISK_DETERIORATION__MANAGED_RISK_PROFILE", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_risk_managemen_ae4446f6ff4e90592b0326323299f295.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.accepted_values_risk_management_dashboard_portfolio_risk_status__CRITICAL_RISK_PORTFOLIO__HIGH_RISK_CONCENTRATION__COMPLIANCE_ISSUES__RISK_DETERIORATION__MANAGED_RISK_PROFILE.12838d5721", "fqn": ["customer_360", "marts", "accepted_values_risk_management_dashboard_portfolio_risk_status__CRITICAL_RISK_PORTFOLIO__HIGH_RISK_CONCENTRATION__COMPLIANCE_ISSUES__RISK_DETERIORATION__MANAGED_RISK_PROFILE"], "alias": "accepted_values_risk_managemen_ae4446f6ff4e90592b0326323299f295", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_risk_managemen_ae4446f6ff4e90592b0326323299f295", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_risk_managemen_ae4446f6ff4e90592b0326323299f295"}, "created_at": 1755857463.478612, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_risk_managemen_ae4446f6ff4e90592b0326323299f295\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_risk_managemen_ae4446f6ff4e90592b0326323299f295\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "risk_management_dashboard", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.risk_management_dashboard"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "portfolio_risk_status", "file_key_name": "models.risk_management_dashboard", "attached_node": "model.customer_360.risk_management_dashboard", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["CRITICAL_RISK_PORTFOLIO", "HIGH_RISK_CONCENTRATION", "COMPLIANCE_ISSUES", "RISK_DETERIORATION", "MANAGED_RISK_PROFILE"], "column_name": "portfolio_risk_status", "model": "{{ get_where_subquery(ref('risk_management_dashboard')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_risk_management_dashboard_compliance_health_status__COMPLIANCE_CRISIS__COMPLIANCE_ATTENTION_NEEDED__COMPLIANCE_MONITORING_REQUIRED__COMPLIANCE_HEALTHY.8c1932fcae": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_risk_management_dashboard_compliance_health_status__COMPLIANCE_CRISIS__COMPLIANCE_ATTENTION_NEEDED__COMPLIANCE_MONITORING_REQUIRED__COMPLIANCE_HEALTHY", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_risk_managemen_7914a46a9189257b7ee33270e24da9e5.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.accepted_values_risk_management_dashboard_compliance_health_status__COMPLIANCE_CRISIS__COMPLIANCE_ATTENTION_NEEDED__COMPLIANCE_MONITORING_REQUIRED__COMPLIANCE_HEALTHY.8c1932fcae", "fqn": ["customer_360", "marts", "accepted_values_risk_management_dashboard_compliance_health_status__COMPLIANCE_CRISIS__COMPLIANCE_ATTENTION_NEEDED__COMPLIANCE_MONITORING_REQUIRED__COMPLIANCE_HEALTHY"], "alias": "accepted_values_risk_managemen_7914a46a9189257b7ee33270e24da9e5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_risk_managemen_7914a46a9189257b7ee33270e24da9e5", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_risk_managemen_7914a46a9189257b7ee33270e24da9e5"}, "created_at": 1755857463.481633, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_risk_managemen_7914a46a9189257b7ee33270e24da9e5\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_risk_managemen_7914a46a9189257b7ee33270e24da9e5\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "risk_management_dashboard", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.risk_management_dashboard"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "compliance_health_status", "file_key_name": "models.risk_management_dashboard", "attached_node": "model.customer_360.risk_management_dashboard", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["COMPLIANCE_CRISIS", "COMPLIANCE_ATTENTION_NEEDED", "COMPLIANCE_MONITORING_REQUIRED", "COMPLIANCE_HEALTHY"], "column_name": "compliance_health_status", "model": "{{ get_where_subquery(ref('risk_management_dashboard')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_risk_management_dashboard_recommended_action__IMMEDIATE_RISK_COMMITTEE_MEETING__COMPLIANCE_REMEDIATION_PLAN__FRAUD_INVESTIGATION_SURGE__HIGH_VALUE_CUSTOMER_REVIEW__STANDARD_RISK_MONITORING.4b09296707": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_risk_management_dashboard_recommended_action__IMMEDIATE_RISK_COMMITTEE_MEETING__COMPLIANCE_REMEDIATION_PLAN__FRAUD_INVESTIGATION_SURGE__HIGH_VALUE_CUSTOMER_REVIEW__STANDARD_RISK_MONITORING", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_risk_managemen_8d9e992fd51c36babe922e1868305ceb.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.accepted_values_risk_management_dashboard_recommended_action__IMMEDIATE_RISK_COMMITTEE_MEETING__COMPLIANCE_REMEDIATION_PLAN__FRAUD_INVESTIGATION_SURGE__HIGH_VALUE_CUSTOMER_REVIEW__STANDARD_RISK_MONITORING.4b09296707", "fqn": ["customer_360", "marts", "accepted_values_risk_management_dashboard_recommended_action__IMMEDIATE_RISK_COMMITTEE_MEETING__COMPLIANCE_REMEDIATION_PLAN__FRAUD_INVESTIGATION_SURGE__HIGH_VALUE_CUSTOMER_REVIEW__STANDARD_RISK_MONITORING"], "alias": "accepted_values_risk_managemen_8d9e992fd51c36babe922e1868305ceb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_risk_managemen_8d9e992fd51c36babe922e1868305ceb", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_risk_managemen_8d9e992fd51c36babe922e1868305ceb"}, "created_at": 1755857463.4842088, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_risk_managemen_8d9e992fd51c36babe922e1868305ceb\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_risk_managemen_8d9e992fd51c36babe922e1868305ceb\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "risk_management_dashboard", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.risk_management_dashboard"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "recommended_action", "file_key_name": "models.risk_management_dashboard", "attached_node": "model.customer_360.risk_management_dashboard", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["IMMEDIATE_RISK_COMMITTEE_MEETING", "COMPLIANCE_REMEDIATION_PLAN", "FRAUD_INVESTIGATION_SURGE", "HIGH_VALUE_CUSTOMER_REVIEW", "STANDARD_RISK_MONITORING"], "column_name": "recommended_action", "model": "{{ get_where_subquery(ref('risk_management_dashboard')) }}"}, "namespace": null}}, "test.customer_360.not_null_customer_segmentation_analysis_analysis_section.71c4545a0f": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_customer_segmentation_analysis_analysis_section", "resource_type": "test", "package_name": "customer_360", "path": "not_null_customer_segmentation_analysis_analysis_section.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.not_null_customer_segmentation_analysis_analysis_section.71c4545a0f", "fqn": ["customer_360", "marts", "not_null_customer_segmentation_analysis_analysis_section"], "alias": "not_null_customer_segmentation_analysis_analysis_section", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.4868, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_customer_segmentation_analysis_analysis_section\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "customer_segmentation_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.customer_segmentation_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "analysis_section", "file_key_name": "models.customer_segmentation_analysis", "attached_node": "model.customer_360.customer_segmentation_analysis", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "analysis_section", "model": "{{ get_where_subquery(ref('customer_segmentation_analysis')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_customer_segmentation_analysis_analysis_section__SEGMENT_OVERVIEW__LIFECYCLE_ANALYSIS.96a959b417": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_customer_segmentation_analysis_analysis_section__SEGMENT_OVERVIEW__LIFECYCLE_ANALYSIS", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_customer_segme_ceffe69c0c0b57595b74f5e15528cd7a.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.accepted_values_customer_segmentation_analysis_analysis_section__SEGMENT_OVERVIEW__LIFECYCLE_ANALYSIS.96a959b417", "fqn": ["customer_360", "marts", "accepted_values_customer_segmentation_analysis_analysis_section__SEGMENT_OVERVIEW__LIFECYCLE_ANALYSIS"], "alias": "accepted_values_customer_segme_ceffe69c0c0b57595b74f5e15528cd7a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_customer_segme_ceffe69c0c0b57595b74f5e15528cd7a", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_customer_segme_ceffe69c0c0b57595b74f5e15528cd7a"}, "created_at": 1755857463.48756, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_customer_segme_ceffe69c0c0b57595b74f5e15528cd7a\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_customer_segme_ceffe69c0c0b57595b74f5e15528cd7a\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "customer_segmentation_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.customer_segmentation_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "analysis_section", "file_key_name": "models.customer_segmentation_analysis", "attached_node": "model.customer_360.customer_segmentation_analysis", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["SEGMENT_OVERVIEW", "LIFECYCLE_ANALYSIS"], "column_name": "analysis_section", "model": "{{ get_where_subquery(ref('customer_segmentation_analysis')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_customer_segmentation_analysis_segment_strategic_importance__PRIMARY_VALUE_DRIVER__MAJOR_CONTRIBUTOR__SIGNIFICANT_SEGMENT__NICHE_SEGMENT__LIFECYCLE_STAGE.cd65ef5b62": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_customer_segmentation_analysis_segment_strategic_importance__PRIMARY_VALUE_DRIVER__MAJOR_CONTRIBUTOR__SIGNIFICANT_SEGMENT__NICHE_SEGMENT__LIFECYCLE_STAGE", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_customer_segme_d7a848691b8973c99deba7fd4c22aa44.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.accepted_values_customer_segmentation_analysis_segment_strategic_importance__PRIMARY_VALUE_DRIVER__MAJOR_CONTRIBUTOR__SIGNIFICANT_SEGMENT__NICHE_SEGMENT__LIFECYCLE_STAGE.cd65ef5b62", "fqn": ["customer_360", "marts", "accepted_values_customer_segmentation_analysis_segment_strategic_importance__PRIMARY_VALUE_DRIVER__MAJOR_CONTRIBUTOR__SIGNIFICANT_SEGMENT__NICHE_SEGMENT__LIFECYCLE_STAGE"], "alias": "accepted_values_customer_segme_d7a848691b8973c99deba7fd4c22aa44", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_customer_segme_d7a848691b8973c99deba7fd4c22aa44", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_customer_segme_d7a848691b8973c99deba7fd4c22aa44"}, "created_at": 1755857463.490061, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_customer_segme_d7a848691b8973c99deba7fd4c22aa44\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_customer_segme_d7a848691b8973c99deba7fd4c22aa44\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "customer_segmentation_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.customer_segmentation_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "segment_strategic_importance", "file_key_name": "models.customer_segmentation_analysis", "attached_node": "model.customer_360.customer_segmentation_analysis", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["PRIMARY_VALUE_DRIVER", "MAJOR_CONTRIBUTOR", "SIGNIFICANT_SEGMENT", "NICHE_SEGMENT", "LIFECYCLE_STAGE"], "column_name": "segment_strategic_importance", "model": "{{ get_where_subquery(ref('customer_segmentation_analysis')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_customer_segmentation_analysis_marketing_effectiveness__HIGHLY_MARKETABLE__MODERATELY_MARKETABLE__SELECTIVE_MARKETING__MARKETING_CHALLENGE.df3216ee7b": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_customer_segmentation_analysis_marketing_effectiveness__HIGHLY_MARKETABLE__MODERATELY_MARKETABLE__SELECTIVE_MARKETING__MARKETING_CHALLENGE", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_customer_segme_09d741d98d973cfa9e8c9a62185a1820.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.accepted_values_customer_segmentation_analysis_marketing_effectiveness__HIGHLY_MARKETABLE__MODERATELY_MARKETABLE__SELECTIVE_MARKETING__MARKETING_CHALLENGE.df3216ee7b", "fqn": ["customer_360", "marts", "accepted_values_customer_segmentation_analysis_marketing_effectiveness__HIGHLY_MARKETABLE__MODERATELY_MARKETABLE__SELECTIVE_MARKETING__MARKETING_CHALLENGE"], "alias": "accepted_values_customer_segme_09d741d98d973cfa9e8c9a62185a1820", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_customer_segme_09d741d98d973cfa9e8c9a62185a1820", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_customer_segme_09d741d98d973cfa9e8c9a62185a1820"}, "created_at": 1755857463.492855, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_customer_segme_09d741d98d973cfa9e8c9a62185a1820\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_customer_segme_09d741d98d973cfa9e8c9a62185a1820\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "customer_segmentation_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.customer_segmentation_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "marketing_effectiveness", "file_key_name": "models.customer_segmentation_analysis", "attached_node": "model.customer_360.customer_segmentation_analysis", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["HIGHLY_MARKETABLE", "MODERATELY_MARKETABLE", "SELECTIVE_MARKETING", "MARKETING_CHALLENGE"], "column_name": "marketing_effectiveness", "model": "{{ get_where_subquery(ref('customer_segmentation_analysis')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_customer_segmentation_analysis_digital_strategy_classification__DIGITAL_NATIVE__DIGITAL_ADOPTER__DIGITAL_OPPORTUNITY__TRADITIONAL_PREFERRED.39b4308baa": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_customer_segmentation_analysis_digital_strategy_classification__DIGITAL_NATIVE__DIGITAL_ADOPTER__DIGITAL_OPPORTUNITY__TRADITIONAL_PREFERRED", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_customer_segme_8f38dd5b44ac8dc06b8c60b05594b5eb.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.accepted_values_customer_segmentation_analysis_digital_strategy_classification__DIGITAL_NATIVE__DIGITAL_ADOPTER__DIGITAL_OPPORTUNITY__TRADITIONAL_PREFERRED.39b4308baa", "fqn": ["customer_360", "marts", "accepted_values_customer_segmentation_analysis_digital_strategy_classification__DIGITAL_NATIVE__DIGITAL_ADOPTER__DIGITAL_OPPORTUNITY__TRADITIONAL_PREFERRED"], "alias": "accepted_values_customer_segme_8f38dd5b44ac8dc06b8c60b05594b5eb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_customer_segme_8f38dd5b44ac8dc06b8c60b05594b5eb", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_customer_segme_8f38dd5b44ac8dc06b8c60b05594b5eb"}, "created_at": 1755857463.4953952, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_customer_segme_8f38dd5b44ac8dc06b8c60b05594b5eb\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_customer_segme_8f38dd5b44ac8dc06b8c60b05594b5eb\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "customer_segmentation_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.customer_segmentation_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "digital_strategy_classification", "file_key_name": "models.customer_segmentation_analysis", "attached_node": "model.customer_360.customer_segmentation_analysis", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["DIGITAL_NATIVE", "DIGITAL_ADOPTER", "DIGITAL_OPPORTUNITY", "TRADITIONAL_PREFERRED"], "column_name": "digital_strategy_classification", "model": "{{ get_where_subquery(ref('customer_segmentation_analysis')) }}"}, "namespace": null}}, "test.customer_360.not_null_product_performance_analytics_analytics_section.196c586494": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_product_performance_analytics_analytics_section", "resource_type": "test", "package_name": "customer_360", "path": "not_null_product_performance_analytics_analytics_section.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.not_null_product_performance_analytics_analytics_section.196c586494", "fqn": ["customer_360", "marts", "not_null_product_performance_analytics_analytics_section"], "alias": "not_null_product_performance_analytics_analytics_section", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.4981298, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_product_performance_analytics_analytics_section\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "product_performance_analytics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.product_performance_analytics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "analytics_section", "file_key_name": "models.product_performance_analytics", "attached_node": "model.customer_360.product_performance_analytics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "analytics_section", "model": "{{ get_where_subquery(ref('product_performance_analytics')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_product_performance_analytics_analytics_section__PRODUCT_PORTFOLIO_OVERVIEW__SEGMENT_PRODUCT_PERFORMANCE__NEXT_BEST_PRODUCT_OPPORTUNITIES.e9807c2d7c": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_product_performance_analytics_analytics_section__PRODUCT_PORTFOLIO_OVERVIEW__SEGMENT_PRODUCT_PERFORMANCE__NEXT_BEST_PRODUCT_OPPORTUNITIES", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_product_perfor_44a2fe0c17921230970617a5b1cfc78e.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.accepted_values_product_performance_analytics_analytics_section__PRODUCT_PORTFOLIO_OVERVIEW__SEGMENT_PRODUCT_PERFORMANCE__NEXT_BEST_PRODUCT_OPPORTUNITIES.e9807c2d7c", "fqn": ["customer_360", "marts", "accepted_values_product_performance_analytics_analytics_section__PRODUCT_PORTFOLIO_OVERVIEW__SEGMENT_PRODUCT_PERFORMANCE__NEXT_BEST_PRODUCT_OPPORTUNITIES"], "alias": "accepted_values_product_perfor_44a2fe0c17921230970617a5b1cfc78e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_product_perfor_44a2fe0c17921230970617a5b1cfc78e", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_product_perfor_44a2fe0c17921230970617a5b1cfc78e"}, "created_at": 1755857463.498921, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_product_perfor_44a2fe0c17921230970617a5b1cfc78e\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_product_perfor_44a2fe0c17921230970617a5b1cfc78e\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "product_performance_analytics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.product_performance_analytics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "analytics_section", "file_key_name": "models.product_performance_analytics", "attached_node": "model.customer_360.product_performance_analytics", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["PRODUCT_PORTFOLIO_OVERVIEW", "SEGMENT_PRODUCT_PERFORMANCE", "NEXT_BEST_PRODUCT_OPPORTUNITIES"], "column_name": "analytics_section", "model": "{{ get_where_subquery(ref('product_performance_analytics')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_product_performance_analytics_cross_sell_performance_status__EXCELLENT_CROSS_SELL_PERFORMANCE__STRONG_CROSS_SELL_PERFORMANCE__MODERATE_CROSS_SELL_PERFORMANCE__CROSS_SELL_IMPROVEMENT_NEEDED__NEXT_BEST_PRODUCT.9ee7715bee": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_product_performance_analytics_cross_sell_performance_status__EXCELLENT_CROSS_SELL_PERFORMANCE__STRONG_CROSS_SELL_PERFORMANCE__MODERATE_CROSS_SELL_PERFORMANCE__CROSS_SELL_IMPROVEMENT_NEEDED__NEXT_BEST_PRODUCT", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_product_perfor_f52b3b15978c154766002acc771d1fc5.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.accepted_values_product_performance_analytics_cross_sell_performance_status__EXCELLENT_CROSS_SELL_PERFORMANCE__STRONG_CROSS_SELL_PERFORMANCE__MODERATE_CROSS_SELL_PERFORMANCE__CROSS_SELL_IMPROVEMENT_NEEDED__NEXT_BEST_PRODUCT.9ee7715bee", "fqn": ["customer_360", "marts", "accepted_values_product_performance_analytics_cross_sell_performance_status__EXCELLENT_CROSS_SELL_PERFORMANCE__STRONG_CROSS_SELL_PERFORMANCE__MODERATE_CROSS_SELL_PERFORMANCE__CROSS_SELL_IMPROVEMENT_NEEDED__NEXT_BEST_PRODUCT"], "alias": "accepted_values_product_perfor_f52b3b15978c154766002acc771d1fc5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_product_perfor_f52b3b15978c154766002acc771d1fc5", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_product_perfor_f52b3b15978c154766002acc771d1fc5"}, "created_at": 1755857463.501277, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_product_perfor_f52b3b15978c154766002acc771d1fc5\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_product_perfor_f52b3b15978c154766002acc771d1fc5\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "product_performance_analytics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.product_performance_analytics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cross_sell_performance_status", "file_key_name": "models.product_performance_analytics", "attached_node": "model.customer_360.product_performance_analytics", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["EXCELLENT_CROSS_SELL_PERFORMANCE", "STRONG_CROSS_SELL_PERFORMANCE", "MODERATE_CROSS_SELL_PERFORMANCE", "CROSS_SELL_IMPROVEMENT_NEEDED", "NEXT_BEST_PRODUCT"], "column_name": "cross_sell_performance_status", "model": "{{ get_where_subquery(ref('product_performance_analytics')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_product_performance_analytics_digital_product_maturity__DIGITAL_PRODUCT_LEADER__DIGITAL_PROGRESSIVE__DIGITAL_DEVELOPING__DIGITAL_TRANSFORMATION_NEEDED.4af581acd7": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_product_performance_analytics_digital_product_maturity__DIGITAL_PRODUCT_LEADER__DIGITAL_PROGRESSIVE__DIGITAL_DEVELOPING__DIGITAL_TRANSFORMATION_NEEDED", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_product_perfor_cf51d820caee743da532f60151570c17.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.accepted_values_product_performance_analytics_digital_product_maturity__DIGITAL_PRODUCT_LEADER__DIGITAL_PROGRESSIVE__DIGITAL_DEVELOPING__DIGITAL_TRANSFORMATION_NEEDED.4af581acd7", "fqn": ["customer_360", "marts", "accepted_values_product_performance_analytics_digital_product_maturity__DIGITAL_PRODUCT_LEADER__DIGITAL_PROGRESSIVE__DIGITAL_DEVELOPING__DIGITAL_TRANSFORMATION_NEEDED"], "alias": "accepted_values_product_perfor_cf51d820caee743da532f60151570c17", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_product_perfor_cf51d820caee743da532f60151570c17", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_product_perfor_cf51d820caee743da532f60151570c17"}, "created_at": 1755857463.503894, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_product_perfor_cf51d820caee743da532f60151570c17\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_product_perfor_cf51d820caee743da532f60151570c17\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "product_performance_analytics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.product_performance_analytics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "digital_product_maturity", "file_key_name": "models.product_performance_analytics", "attached_node": "model.customer_360.product_performance_analytics", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["DIGITAL_PRODUCT_LEADER", "DIGITAL_PROGRESSIVE", "DIGITAL_DEVELOPING", "DIGITAL_TRANSFORMATION_NEEDED"], "column_name": "digital_product_maturity", "model": "{{ get_where_subquery(ref('product_performance_analytics')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_product_performance_analytics_recommended_product_strategy__AGGRESSIVE_CROSS_SELL_CAMPAIGN__WEALTH_PRODUCT_FOCUS__DIGITAL_PRODUCT_ENHANCEMENT__PRODUCT_BUNDLING_STRATEGY__OPTIMIZE_CURRENT_PORTFOLIO.bf7cd9e1a6": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_product_performance_analytics_recommended_product_strategy__AGGRESSIVE_CROSS_SELL_CAMPAIGN__WEALTH_PRODUCT_FOCUS__DIGITAL_PRODUCT_ENHANCEMENT__PRODUCT_BUNDLING_STRATEGY__OPTIMIZE_CURRENT_PORTFOLIO", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_product_perfor_ef3bdb079e9ac2e52cba04ba7a7522b1.sql", "original_file_path": "models/marts/marts_schema.yml", "unique_id": "test.customer_360.accepted_values_product_performance_analytics_recommended_product_strategy__AGGRESSIVE_CROSS_SELL_CAMPAIGN__WEALTH_PRODUCT_FOCUS__DIGITAL_PRODUCT_ENHANCEMENT__PRODUCT_BUNDLING_STRATEGY__OPTIMIZE_CURRENT_PORTFOLIO.bf7cd9e1a6", "fqn": ["customer_360", "marts", "accepted_values_product_performance_analytics_recommended_product_strategy__AGGRESSIVE_CROSS_SELL_CAMPAIGN__WEALTH_PRODUCT_FOCUS__DIGITAL_PRODUCT_ENHANCEMENT__PRODUCT_BUNDLING_STRATEGY__OPTIMIZE_CURRENT_PORTFOLIO"], "alias": "accepted_values_product_perfor_ef3bdb079e9ac2e52cba04ba7a7522b1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_product_perfor_ef3bdb079e9ac2e52cba04ba7a7522b1", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_product_perfor_ef3bdb079e9ac2e52cba04ba7a7522b1"}, "created_at": 1755857463.506241, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_product_perfor_ef3bdb079e9ac2e52cba04ba7a7522b1\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_product_perfor_ef3bdb079e9ac2e52cba04ba7a7522b1\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "product_performance_analytics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.product_performance_analytics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "recommended_product_strategy", "file_key_name": "models.product_performance_analytics", "attached_node": "model.customer_360.product_performance_analytics", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["AGGRESSIVE_CROSS_SELL_CAMPAIGN", "WEALTH_PRODUCT_FOCUS", "DIGITAL_PRODUCT_ENHANCEMENT", "PRODUCT_BUNDLING_STRATEGY", "OPTIMIZE_CURRENT_PORTFOLIO"], "column_name": "recommended_product_strategy", "model": "{{ get_where_subquery(ref('product_performance_analytics')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_customer_profile_customer_id.43eecb28af": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_customer_profile_customer_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_customer_profile_customer_id.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_customer_profile_customer_id.43eecb28af", "fqn": ["customer_360", "intermediate", "not_null_int_customer_profile_customer_id"], "alias": "not_null_int_customer_profile_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.517525, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_customer_profile_customer_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_customer_profile"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.int_customer_profile", "attached_node": "model.customer_360.int_customer_profile", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('int_customer_profile')) }}"}, "namespace": null}}, "test.customer_360.unique_int_customer_profile_customer_id.e7331e83b5": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_int_customer_profile_customer_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_int_customer_profile_customer_id.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.unique_int_customer_profile_customer_id.e7331e83b5", "fqn": ["customer_360", "intermediate", "unique_int_customer_profile_customer_id"], "alias": "unique_int_customer_profile_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.518395, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_int_customer_profile_customer_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.int_customer_profile"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.int_customer_profile", "attached_node": "model.customer_360.int_customer_profile", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('int_customer_profile')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_customer_profile_full_name.6e928c57ff": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_customer_profile_full_name", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_customer_profile_full_name.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_customer_profile_full_name.6e928c57ff", "fqn": ["customer_360", "intermediate", "not_null_int_customer_profile_full_name"], "alias": "not_null_int_customer_profile_full_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.519145, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_customer_profile_full_name\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_customer_profile"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "full_name", "file_key_name": "models.int_customer_profile", "attached_node": "model.customer_360.int_customer_profile", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "full_name", "model": "{{ get_where_subquery(ref('int_customer_profile')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_int_customer_profile_engagement_level__HIGHLY_ENGAGED__MODERATELY_ENGAGED__LIGHTLY_ENGAGED__MINIMAL_ENGAGEMENT.300fcbc429": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_int_customer_profile_engagement_level__HIGHLY_ENGAGED__MODERATELY_ENGAGED__LIGHTLY_ENGAGED__MINIMAL_ENGAGEMENT", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_int_customer_p_140217daf89a812d06241678bc833830.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.accepted_values_int_customer_profile_engagement_level__HIGHLY_ENGAGED__MODERATELY_ENGAGED__LIGHTLY_ENGAGED__MINIMAL_ENGAGEMENT.300fcbc429", "fqn": ["customer_360", "intermediate", "accepted_values_int_customer_profile_engagement_level__HIGHLY_ENGAGED__MODERATELY_ENGAGED__LIGHTLY_ENGAGED__MINIMAL_ENGAGEMENT"], "alias": "accepted_values_int_customer_p_140217daf89a812d06241678bc833830", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_customer_p_140217daf89a812d06241678bc833830", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_int_customer_p_140217daf89a812d06241678bc833830"}, "created_at": 1755857463.5198998, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_int_customer_p_140217daf89a812d06241678bc833830\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_customer_p_140217daf89a812d06241678bc833830\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.int_customer_profile"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "engagement_level", "file_key_name": "models.int_customer_profile", "attached_node": "model.customer_360.int_customer_profile", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["HIGHLY_ENGAGED", "MODERATELY_ENGAGED", "LIGHTLY_ENGAGED", "MINIMAL_ENGAGEMENT"], "column_name": "engagement_level", "model": "{{ get_where_subquery(ref('int_customer_profile')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_int_customer_profile_digital_preference__MOBILE_PREFERRED__WEB_PREFERRED__MULTI_CHANNEL__NON_DIGITAL.8e07d3a36f": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_int_customer_profile_digital_preference__MOBILE_PREFERRED__WEB_PREFERRED__MULTI_CHANNEL__NON_DIGITAL", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_int_customer_p_37ac0e50f7c48f8c46a067ee286def04.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.accepted_values_int_customer_profile_digital_preference__MOBILE_PREFERRED__WEB_PREFERRED__MULTI_CHANNEL__NON_DIGITAL.8e07d3a36f", "fqn": ["customer_360", "intermediate", "accepted_values_int_customer_profile_digital_preference__MOBILE_PREFERRED__WEB_PREFERRED__MULTI_CHANNEL__NON_DIGITAL"], "alias": "accepted_values_int_customer_p_37ac0e50f7c48f8c46a067ee286def04", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_customer_p_37ac0e50f7c48f8c46a067ee286def04", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_int_customer_p_37ac0e50f7c48f8c46a067ee286def04"}, "created_at": 1755857463.522497, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_int_customer_p_37ac0e50f7c48f8c46a067ee286def04\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_customer_p_37ac0e50f7c48f8c46a067ee286def04\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.int_customer_profile"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "digital_preference", "file_key_name": "models.int_customer_profile", "attached_node": "model.customer_360.int_customer_profile", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["MOBILE_PREFERRED", "WEB_PREFERRED", "MULTI_CHANNEL", "NON_DIGITAL"], "column_name": "digital_preference", "model": "{{ get_where_subquery(ref('int_customer_profile')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_customer_profile_at_risk_customer.cb82b9183d": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_customer_profile_at_risk_customer", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_customer_profile_at_risk_customer.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_customer_profile_at_risk_customer.cb82b9183d", "fqn": ["customer_360", "intermediate", "not_null_int_customer_profile_at_risk_customer"], "alias": "not_null_int_customer_profile_at_risk_customer", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.525804, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_customer_profile_at_risk_customer\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_customer_profile"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "at_risk_customer", "file_key_name": "models.int_customer_profile", "attached_node": "model.customer_360.int_customer_profile", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "at_risk_customer", "model": "{{ get_where_subquery(ref('int_customer_profile')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_customer_360_master_customer_id.2db315d47c": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_customer_360_master_customer_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_customer_360_master_customer_id.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_customer_360_master_customer_id.2db315d47c", "fqn": ["customer_360", "intermediate", "not_null_int_customer_360_master_customer_id"], "alias": "not_null_int_customer_360_master_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.526567, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_customer_360_master_customer_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_360_master", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_customer_360_master"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.int_customer_360_master", "attached_node": "model.customer_360.int_customer_360_master", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('int_customer_360_master')) }}"}, "namespace": null}}, "test.customer_360.unique_int_customer_360_master_customer_id.1ef8c74659": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_int_customer_360_master_customer_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_int_customer_360_master_customer_id.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.unique_int_customer_360_master_customer_id.1ef8c74659", "fqn": ["customer_360", "intermediate", "unique_int_customer_360_master_customer_id"], "alias": "unique_int_customer_360_master_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.527315, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_int_customer_360_master_customer_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_360_master", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.int_customer_360_master"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.int_customer_360_master", "attached_node": "model.customer_360.int_customer_360_master", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('int_customer_360_master')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_customer_360_master_customer_lifetime_value_score.59abc397bb": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_customer_360_master_customer_lifetime_value_score", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_customer_360_master_customer_lifetime_value_score.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_customer_360_master_customer_lifetime_value_score.59abc397bb", "fqn": ["customer_360", "intermediate", "not_null_int_customer_360_master_customer_lifetime_value_score"], "alias": "not_null_int_customer_360_master_customer_lifetime_value_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.528058, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_customer_360_master_customer_lifetime_value_score\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_360_master", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_customer_360_master"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_lifetime_value_score", "file_key_name": "models.int_customer_360_master", "attached_node": "model.customer_360.int_customer_360_master", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_lifetime_value_score", "model": "{{ get_where_subquery(ref('int_customer_360_master')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_customer_360_master_churn_risk_score.251e2a4d6d": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_customer_360_master_churn_risk_score", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_customer_360_master_churn_risk_score.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_customer_360_master_churn_risk_score.251e2a4d6d", "fqn": ["customer_360", "intermediate", "not_null_int_customer_360_master_churn_risk_score"], "alias": "not_null_int_customer_360_master_churn_risk_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.52882, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_customer_360_master_churn_risk_score\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_360_master", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_customer_360_master"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "churn_risk_score", "file_key_name": "models.int_customer_360_master", "attached_node": "model.customer_360.int_customer_360_master", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "churn_risk_score", "model": "{{ get_where_subquery(ref('int_customer_360_master')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_int_customer_360_master_executive_customer_tier__ULTRA_HIGH_NET_WORTH__HIGH_NET_WORTH__PLATINUM_CUSTOMER__GOLD_CUSTOMER__SILVER_CUSTOMER__BRONZE_CUSTOMER.cd269b07a8": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_int_customer_360_master_executive_customer_tier__ULTRA_HIGH_NET_WORTH__HIGH_NET_WORTH__PLATINUM_CUSTOMER__GOLD_CUSTOMER__SILVER_CUSTOMER__BRONZE_CUSTOMER", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_int_customer_3_3c193330494ee7b3b12c3e0fd160bb5c.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.accepted_values_int_customer_360_master_executive_customer_tier__ULTRA_HIGH_NET_WORTH__HIGH_NET_WORTH__PLATINUM_CUSTOMER__GOLD_CUSTOMER__SILVER_CUSTOMER__BRONZE_CUSTOMER.cd269b07a8", "fqn": ["customer_360", "intermediate", "accepted_values_int_customer_360_master_executive_customer_tier__ULTRA_HIGH_NET_WORTH__HIGH_NET_WORTH__PLATINUM_CUSTOMER__GOLD_CUSTOMER__SILVER_CUSTOMER__BRONZE_CUSTOMER"], "alias": "accepted_values_int_customer_3_3c193330494ee7b3b12c3e0fd160bb5c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_customer_3_3c193330494ee7b3b12c3e0fd160bb5c", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_int_customer_3_3c193330494ee7b3b12c3e0fd160bb5c"}, "created_at": 1755857463.529566, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_int_customer_3_3c193330494ee7b3b12c3e0fd160bb5c\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_customer_3_3c193330494ee7b3b12c3e0fd160bb5c\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_360_master", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.int_customer_360_master"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "executive_customer_tier", "file_key_name": "models.int_customer_360_master", "attached_node": "model.customer_360.int_customer_360_master", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["ULTRA_HIGH_NET_WORTH", "HIGH_NET_WORTH", "PLATINUM_CUSTOMER", "GOLD_CUSTOMER", "SILVER_CUSTOMER", "BRONZE_CUSTOMER"], "column_name": "executive_customer_tier", "model": "{{ get_where_subquery(ref('int_customer_360_master')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_customer_360_master_next_best_action.7de42dfb1e": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_customer_360_master_next_best_action", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_customer_360_master_next_best_action.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_customer_360_master_next_best_action.7de42dfb1e", "fqn": ["customer_360", "intermediate", "not_null_int_customer_360_master_next_best_action"], "alias": "not_null_int_customer_360_master_next_best_action", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.532355, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_customer_360_master_next_best_action\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_360_master", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_customer_360_master"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "next_best_action", "file_key_name": "models.int_customer_360_master", "attached_node": "model.customer_360.int_customer_360_master", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "next_best_action", "model": "{{ get_where_subquery(ref('int_customer_360_master')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_customer_retention_analytics_customer_id.8c8fd202ae": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_customer_retention_analytics_customer_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_customer_retention_analytics_customer_id.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_customer_retention_analytics_customer_id.8c8fd202ae", "fqn": ["customer_360", "intermediate", "not_null_int_customer_retention_analytics_customer_id"], "alias": "not_null_int_customer_retention_analytics_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.533113, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_customer_retention_analytics_customer_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_retention_analytics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_customer_retention_analytics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.int_customer_retention_analytics", "attached_node": "model.customer_360.int_customer_retention_analytics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('int_customer_retention_analytics')) }}"}, "namespace": null}}, "test.customer_360.unique_int_customer_retention_analytics_customer_id.f62b41c0e0": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_int_customer_retention_analytics_customer_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_int_customer_retention_analytics_customer_id.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.unique_int_customer_retention_analytics_customer_id.f62b41c0e0", "fqn": ["customer_360", "intermediate", "unique_int_customer_retention_analytics_customer_id"], "alias": "unique_int_customer_retention_analytics_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.5338502, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_int_customer_retention_analytics_customer_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_retention_analytics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.int_customer_retention_analytics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.int_customer_retention_analytics", "attached_node": "model.customer_360.int_customer_retention_analytics", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('int_customer_retention_analytics')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_customer_retention_analytics_churn_risk_score.ade9154dcd": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_customer_retention_analytics_churn_risk_score", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_customer_retention_analytics_churn_risk_score.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_customer_retention_analytics_churn_risk_score.ade9154dcd", "fqn": ["customer_360", "intermediate", "not_null_int_customer_retention_analytics_churn_risk_score"], "alias": "not_null_int_customer_retention_analytics_churn_risk_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.5345721, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_customer_retention_analytics_churn_risk_score\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_retention_analytics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_customer_retention_analytics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "churn_risk_score", "file_key_name": "models.int_customer_retention_analytics", "attached_node": "model.customer_360.int_customer_retention_analytics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "churn_risk_score", "model": "{{ get_where_subquery(ref('int_customer_retention_analytics')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_customer_retention_analytics_retention_opportunity_score.87bbcb25cf": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_customer_retention_analytics_retention_opportunity_score", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_customer_retentio_f223030582a6bc916b11149310f78362.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_customer_retention_analytics_retention_opportunity_score.87bbcb25cf", "fqn": ["customer_360", "intermediate", "not_null_int_customer_retention_analytics_retention_opportunity_score"], "alias": "not_null_int_customer_retentio_f223030582a6bc916b11149310f78362", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_customer_retentio_f223030582a6bc916b11149310f78362", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "not_null_int_customer_retentio_f223030582a6bc916b11149310f78362"}, "created_at": 1755857463.535597, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_customer_retentio_f223030582a6bc916b11149310f78362\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_customer_retentio_f223030582a6bc916b11149310f78362\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_retention_analytics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_customer_retention_analytics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "retention_opportunity_score", "file_key_name": "models.int_customer_retention_analytics", "attached_node": "model.customer_360.int_customer_retention_analytics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "retention_opportunity_score", "model": "{{ get_where_subquery(ref('int_customer_retention_analytics')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_int_customer_retention_analytics_retention_lifecycle_stage__CHURNED__HIGH_CHURN_RISK__DISSATISFIED__DISENGAGED__COMPLAINT_PATTERN__SUCCESSFULLY_RETAINED__LOYAL__STABLE.bbc1e63adc": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_int_customer_retention_analytics_retention_lifecycle_stage__CHURNED__HIGH_CHURN_RISK__DISSATISFIED__DISENGAGED__COMPLAINT_PATTERN__SUCCESSFULLY_RETAINED__LOYAL__STABLE", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_int_customer_r_20eaf123460c7135aab9192a491fb213.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.accepted_values_int_customer_retention_analytics_retention_lifecycle_stage__CHURNED__HIGH_CHURN_RISK__DISSATISFIED__DISENGAGED__COMPLAINT_PATTERN__SUCCESSFULLY_RETAINED__LOYAL__STABLE.bbc1e63adc", "fqn": ["customer_360", "intermediate", "accepted_values_int_customer_retention_analytics_retention_lifecycle_stage__CHURNED__HIGH_CHURN_RISK__DISSATISFIED__DISENGAGED__COMPLAINT_PATTERN__SUCCESSFULLY_RETAINED__LOYAL__STABLE"], "alias": "accepted_values_int_customer_r_20eaf123460c7135aab9192a491fb213", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_customer_r_20eaf123460c7135aab9192a491fb213", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_int_customer_r_20eaf123460c7135aab9192a491fb213"}, "created_at": 1755857463.536375, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_int_customer_r_20eaf123460c7135aab9192a491fb213\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_customer_r_20eaf123460c7135aab9192a491fb213\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_retention_analytics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.int_customer_retention_analytics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "retention_lifecycle_stage", "file_key_name": "models.int_customer_retention_analytics", "attached_node": "model.customer_360.int_customer_retention_analytics", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["CHURNED", "HIGH_CHURN_RISK", "DISSATISFIED", "DISENGAGED", "COMPLAINT_PATTERN", "SUCCESSFULLY_RETAINED", "LOYAL", "STABLE"], "column_name": "retention_lifecycle_stage", "model": "{{ get_where_subquery(ref('int_customer_retention_analytics')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_int_customer_retention_analytics_retention_priority__WIN_BACK__CRITICAL__HIGH__MEDIUM__LOW__MONITOR.0674658e8e": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_int_customer_retention_analytics_retention_priority__WIN_BACK__CRITICAL__HIGH__MEDIUM__LOW__MONITOR", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_int_customer_r_26be56e3f588bb8df549d7bc9c5ede81.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.accepted_values_int_customer_retention_analytics_retention_priority__WIN_BACK__CRITICAL__HIGH__MEDIUM__LOW__MONITOR.0674658e8e", "fqn": ["customer_360", "intermediate", "accepted_values_int_customer_retention_analytics_retention_priority__WIN_BACK__CRITICAL__HIGH__MEDIUM__LOW__MONITOR"], "alias": "accepted_values_int_customer_r_26be56e3f588bb8df549d7bc9c5ede81", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_customer_r_26be56e3f588bb8df549d7bc9c5ede81", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_int_customer_r_26be56e3f588bb8df549d7bc9c5ede81"}, "created_at": 1755857463.539469, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_int_customer_r_26be56e3f588bb8df549d7bc9c5ede81\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_customer_r_26be56e3f588bb8df549d7bc9c5ede81\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_retention_analytics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.int_customer_retention_analytics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "retention_priority", "file_key_name": "models.int_customer_retention_analytics", "attached_node": "model.customer_360.int_customer_retention_analytics", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["WIN_BACK", "CRITICAL", "HIGH", "MEDIUM", "LOW", "MONITOR"], "column_name": "retention_priority", "model": "{{ get_where_subquery(ref('int_customer_retention_analytics')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_customer_financial_summary_customer_id.597254ced9": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_customer_financial_summary_customer_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_customer_financial_summary_customer_id.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_customer_financial_summary_customer_id.597254ced9", "fqn": ["customer_360", "intermediate", "not_null_int_customer_financial_summary_customer_id"], "alias": "not_null_int_customer_financial_summary_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.542128, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_customer_financial_summary_customer_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_financial_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_customer_financial_summary"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.int_customer_financial_summary", "attached_node": "model.customer_360.int_customer_financial_summary", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('int_customer_financial_summary')) }}"}, "namespace": null}}, "test.customer_360.unique_int_customer_financial_summary_customer_id.c179ab9577": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_int_customer_financial_summary_customer_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_int_customer_financial_summary_customer_id.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.unique_int_customer_financial_summary_customer_id.c179ab9577", "fqn": ["customer_360", "intermediate", "unique_int_customer_financial_summary_customer_id"], "alias": "unique_int_customer_financial_summary_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.542876, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_int_customer_financial_summary_customer_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_financial_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.int_customer_financial_summary"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.int_customer_financial_summary", "attached_node": "model.customer_360.int_customer_financial_summary", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('int_customer_financial_summary')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_customer_financial_summary_total_relationship_value.1e3b9d217f": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_customer_financial_summary_total_relationship_value", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_customer_financia_68c34006ca2c85ddb21e079411fa82a6.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_customer_financial_summary_total_relationship_value.1e3b9d217f", "fqn": ["customer_360", "intermediate", "not_null_int_customer_financial_summary_total_relationship_value"], "alias": "not_null_int_customer_financia_68c34006ca2c85ddb21e079411fa82a6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_customer_financia_68c34006ca2c85ddb21e079411fa82a6", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "not_null_int_customer_financia_68c34006ca2c85ddb21e079411fa82a6"}, "created_at": 1755857463.543617, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_customer_financia_68c34006ca2c85ddb21e079411fa82a6\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_customer_financia_68c34006ca2c85ddb21e079411fa82a6\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_financial_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_customer_financial_summary"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_relationship_value", "file_key_name": "models.int_customer_financial_summary", "attached_node": "model.customer_360.int_customer_financial_summary", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_relationship_value", "model": "{{ get_where_subquery(ref('int_customer_financial_summary')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_customer_financial_summary_net_worth_with_bank.8ff5a4bcf5": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_customer_financial_summary_net_worth_with_bank", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_customer_financial_summary_net_worth_with_bank.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_customer_financial_summary_net_worth_with_bank.8ff5a4bcf5", "fqn": ["customer_360", "intermediate", "not_null_int_customer_financial_summary_net_worth_with_bank"], "alias": "not_null_int_customer_financial_summary_net_worth_with_bank", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.544717, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_customer_financial_summary_net_worth_with_bank\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_financial_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_customer_financial_summary"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "net_worth_with_bank", "file_key_name": "models.int_customer_financial_summary", "attached_node": "model.customer_360.int_customer_financial_summary", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "net_worth_with_bank", "model": "{{ get_where_subquery(ref('int_customer_financial_summary')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_customer_financial_summary_product_penetration_score.e43c8b0969": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_customer_financial_summary_product_penetration_score", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_customer_financia_c2e477bc92ff05fbe2a9e80e5f8b1497.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_customer_financial_summary_product_penetration_score.e43c8b0969", "fqn": ["customer_360", "intermediate", "not_null_int_customer_financial_summary_product_penetration_score"], "alias": "not_null_int_customer_financia_c2e477bc92ff05fbe2a9e80e5f8b1497", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_customer_financia_c2e477bc92ff05fbe2a9e80e5f8b1497", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "not_null_int_customer_financia_c2e477bc92ff05fbe2a9e80e5f8b1497"}, "created_at": 1755857463.545509, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_customer_financia_c2e477bc92ff05fbe2a9e80e5f8b1497\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_customer_financia_c2e477bc92ff05fbe2a9e80e5f8b1497\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_financial_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_customer_financial_summary"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_penetration_score", "file_key_name": "models.int_customer_financial_summary", "attached_node": "model.customer_360.int_customer_financial_summary", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_penetration_score", "model": "{{ get_where_subquery(ref('int_customer_financial_summary')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_int_customer_financial_summary_wealth_tier__PRIVATE_BANKING__WEALTH_MANAGEMENT__PREFERRED__SELECT__STANDARD.31846be754": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_int_customer_financial_summary_wealth_tier__PRIVATE_BANKING__WEALTH_MANAGEMENT__PREFERRED__SELECT__STANDARD", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_int_customer_f_97d406fe1539ebcf995bcf88c0fd4d68.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.accepted_values_int_customer_financial_summary_wealth_tier__PRIVATE_BANKING__WEALTH_MANAGEMENT__PREFERRED__SELECT__STANDARD.31846be754", "fqn": ["customer_360", "intermediate", "accepted_values_int_customer_financial_summary_wealth_tier__PRIVATE_BANKING__WEALTH_MANAGEMENT__PREFERRED__SELECT__STANDARD"], "alias": "accepted_values_int_customer_f_97d406fe1539ebcf995bcf88c0fd4d68", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_customer_f_97d406fe1539ebcf995bcf88c0fd4d68", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_int_customer_f_97d406fe1539ebcf995bcf88c0fd4d68"}, "created_at": 1755857463.546273, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_int_customer_f_97d406fe1539ebcf995bcf88c0fd4d68\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_customer_f_97d406fe1539ebcf995bcf88c0fd4d68\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_financial_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.int_customer_financial_summary"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "wealth_tier", "file_key_name": "models.int_customer_financial_summary", "attached_node": "model.customer_360.int_customer_financial_summary", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["PRIVATE_BANKING", "WEALTH_MANAGEMENT", "PREFERRED", "SELECT", "STANDARD"], "column_name": "wealth_tier", "model": "{{ get_where_subquery(ref('int_customer_financial_summary')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_int_customer_financial_summary_financial_risk_level__HIGH_RISK__MEDIUM_RISK__LOW_RISK.1e7cd9ab71": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_int_customer_financial_summary_financial_risk_level__HIGH_RISK__MEDIUM_RISK__LOW_RISK", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_int_customer_f_56b3eb46a7da1824ffd99ea1f7a59581.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.accepted_values_int_customer_financial_summary_financial_risk_level__HIGH_RISK__MEDIUM_RISK__LOW_RISK.1e7cd9ab71", "fqn": ["customer_360", "intermediate", "accepted_values_int_customer_financial_summary_financial_risk_level__HIGH_RISK__MEDIUM_RISK__LOW_RISK"], "alias": "accepted_values_int_customer_f_56b3eb46a7da1824ffd99ea1f7a59581", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_customer_f_56b3eb46a7da1824ffd99ea1f7a59581", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_int_customer_f_56b3eb46a7da1824ffd99ea1f7a59581"}, "created_at": 1755857463.548856, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_int_customer_f_56b3eb46a7da1824ffd99ea1f7a59581\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_customer_f_56b3eb46a7da1824ffd99ea1f7a59581\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_customer_financial_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.int_customer_financial_summary"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "financial_risk_level", "file_key_name": "models.int_customer_financial_summary", "attached_node": "model.customer_360.int_customer_financial_summary", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["HIGH_RISK", "MEDIUM_RISK", "LOW_RISK"], "column_name": "financial_risk_level", "model": "{{ get_where_subquery(ref('int_customer_financial_summary')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_transaction_analytics_account_id.a6aa75c445": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_transaction_analytics_account_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_transaction_analytics_account_id.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_transaction_analytics_account_id.a6aa75c445", "fqn": ["customer_360", "intermediate", "not_null_int_transaction_analytics_account_id"], "alias": "not_null_int_transaction_analytics_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.551123, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_transaction_analytics_account_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_transaction_analytics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_transaction_analytics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_id", "file_key_name": "models.int_transaction_analytics", "attached_node": "model.customer_360.int_transaction_analytics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('int_transaction_analytics')) }}"}, "namespace": null}}, "test.customer_360.unique_int_transaction_analytics_account_id.e7fd42642d": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_int_transaction_analytics_account_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_int_transaction_analytics_account_id.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.unique_int_transaction_analytics_account_id.e7fd42642d", "fqn": ["customer_360", "intermediate", "unique_int_transaction_analytics_account_id"], "alias": "unique_int_transaction_analytics_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.551883, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_int_transaction_analytics_account_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_transaction_analytics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.int_transaction_analytics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_id", "file_key_name": "models.int_transaction_analytics", "attached_node": "model.customer_360.int_transaction_analytics", "test_metadata": {"name": "unique", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('int_transaction_analytics')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_transaction_analytics_total_transaction_volume.d69fd0b417": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_transaction_analytics_total_transaction_volume", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_transaction_analytics_total_transaction_volume.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_transaction_analytics_total_transaction_volume.d69fd0b417", "fqn": ["customer_360", "intermediate", "not_null_int_transaction_analytics_total_transaction_volume"], "alias": "not_null_int_transaction_analytics_total_transaction_volume", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.552616, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_transaction_analytics_total_transaction_volume\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_transaction_analytics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_transaction_analytics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_transaction_volume", "file_key_name": "models.int_transaction_analytics", "attached_node": "model.customer_360.int_transaction_analytics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_transaction_volume", "model": "{{ get_where_subquery(ref('int_transaction_analytics')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_transaction_analytics_net_cash_flow.a46ebce986": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_transaction_analytics_net_cash_flow", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_transaction_analytics_net_cash_flow.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_transaction_analytics_net_cash_flow.a46ebce986", "fqn": ["customer_360", "intermediate", "not_null_int_transaction_analytics_net_cash_flow"], "alias": "not_null_int_transaction_analytics_net_cash_flow", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.553337, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_transaction_analytics_net_cash_flow\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_transaction_analytics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_transaction_analytics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "net_cash_flow", "file_key_name": "models.int_transaction_analytics", "attached_node": "model.customer_360.int_transaction_analytics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "net_cash_flow", "model": "{{ get_where_subquery(ref('int_transaction_analytics')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_transaction_analytics_digital_transaction_percentage.f7c36e9a33": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_transaction_analytics_digital_transaction_percentage", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_transaction_analy_ebbe72dd6d20b7cf79d4f7f1f7a8d618.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_transaction_analytics_digital_transaction_percentage.f7c36e9a33", "fqn": ["customer_360", "intermediate", "not_null_int_transaction_analytics_digital_transaction_percentage"], "alias": "not_null_int_transaction_analy_ebbe72dd6d20b7cf79d4f7f1f7a8d618", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_transaction_analy_ebbe72dd6d20b7cf79d4f7f1f7a8d618", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "not_null_int_transaction_analy_ebbe72dd6d20b7cf79d4f7f1f7a8d618"}, "created_at": 1755857463.5543628, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_transaction_analy_ebbe72dd6d20b7cf79d4f7f1f7a8d618\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_transaction_analy_ebbe72dd6d20b7cf79d4f7f1f7a8d618\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_transaction_analytics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_transaction_analytics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "digital_transaction_percentage", "file_key_name": "models.int_transaction_analytics", "attached_node": "model.customer_360.int_transaction_analytics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "digital_transaction_percentage", "model": "{{ get_where_subquery(ref('int_transaction_analytics')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_int_transaction_analytics_activity_level__VERY_ACTIVE__ACTIVE__MODERATE__LIGHT__MINIMAL.608a7926e5": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_int_transaction_analytics_activity_level__VERY_ACTIVE__ACTIVE__MODERATE__LIGHT__MINIMAL", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_int_transactio_087049d2089129df9f7274d774a40bd9.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.accepted_values_int_transaction_analytics_activity_level__VERY_ACTIVE__ACTIVE__MODERATE__LIGHT__MINIMAL.608a7926e5", "fqn": ["customer_360", "intermediate", "accepted_values_int_transaction_analytics_activity_level__VERY_ACTIVE__ACTIVE__MODERATE__LIGHT__MINIMAL"], "alias": "accepted_values_int_transactio_087049d2089129df9f7274d774a40bd9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_transactio_087049d2089129df9f7274d774a40bd9", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_int_transactio_087049d2089129df9f7274d774a40bd9"}, "created_at": 1755857463.555134, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_int_transactio_087049d2089129df9f7274d774a40bd9\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_transactio_087049d2089129df9f7274d774a40bd9\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_transaction_analytics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.int_transaction_analytics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "activity_level", "file_key_name": "models.int_transaction_analytics", "attached_node": "model.customer_360.int_transaction_analytics", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["VERY_ACTIVE", "ACTIVE", "MODERATE", "LIGHT", "MINIMAL"], "column_name": "activity_level", "model": "{{ get_where_subquery(ref('int_transaction_analytics')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_int_transaction_analytics_spending_category__HIGH_SPENDER__MEDIUM_SPENDER__MODERATE_SPENDER__LOW_SPENDER.da01838831": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_int_transaction_analytics_spending_category__HIGH_SPENDER__MEDIUM_SPENDER__MODERATE_SPENDER__LOW_SPENDER", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_int_transactio_10769b1822531cbd335d15d0e08e204d.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.accepted_values_int_transaction_analytics_spending_category__HIGH_SPENDER__MEDIUM_SPENDER__MODERATE_SPENDER__LOW_SPENDER.da01838831", "fqn": ["customer_360", "intermediate", "accepted_values_int_transaction_analytics_spending_category__HIGH_SPENDER__MEDIUM_SPENDER__MODERATE_SPENDER__LOW_SPENDER"], "alias": "accepted_values_int_transactio_10769b1822531cbd335d15d0e08e204d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_transactio_10769b1822531cbd335d15d0e08e204d", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_int_transactio_10769b1822531cbd335d15d0e08e204d"}, "created_at": 1755857463.557617, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_int_transactio_10769b1822531cbd335d15d0e08e204d\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_transactio_10769b1822531cbd335d15d0e08e204d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_transaction_analytics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.int_transaction_analytics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "spending_category", "file_key_name": "models.int_transaction_analytics", "attached_node": "model.customer_360.int_transaction_analytics", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["HIGH_SPENDER", "MEDIUM_SPENDER", "MODERATE_SPENDER", "LOW_SPENDER"], "column_name": "spending_category", "model": "{{ get_where_subquery(ref('int_transaction_analytics')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_account_performance_dashboard_account_id.08b381f2c5": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_account_performance_dashboard_account_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_account_performance_dashboard_account_id.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_account_performance_dashboard_account_id.08b381f2c5", "fqn": ["customer_360", "intermediate", "not_null_int_account_performance_dashboard_account_id"], "alias": "not_null_int_account_performance_dashboard_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.560211, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_account_performance_dashboard_account_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_account_performance_dashboard", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_account_performance_dashboard"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_id", "file_key_name": "models.int_account_performance_dashboard", "attached_node": "model.customer_360.int_account_performance_dashboard", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('int_account_performance_dashboard')) }}"}, "namespace": null}}, "test.customer_360.unique_int_account_performance_dashboard_account_id.989b83e73b": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_int_account_performance_dashboard_account_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_int_account_performance_dashboard_account_id.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.unique_int_account_performance_dashboard_account_id.989b83e73b", "fqn": ["customer_360", "intermediate", "unique_int_account_performance_dashboard_account_id"], "alias": "unique_int_account_performance_dashboard_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.5609758, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_int_account_performance_dashboard_account_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_account_performance_dashboard", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.int_account_performance_dashboard"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_id", "file_key_name": "models.int_account_performance_dashboard", "attached_node": "model.customer_360.int_account_performance_dashboard", "test_metadata": {"name": "unique", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('int_account_performance_dashboard')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_account_performance_dashboard_customer_id.60c125118b": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_account_performance_dashboard_customer_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_account_performance_dashboard_customer_id.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_account_performance_dashboard_customer_id.60c125118b", "fqn": ["customer_360", "intermediate", "not_null_int_account_performance_dashboard_customer_id"], "alias": "not_null_int_account_performance_dashboard_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.561718, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_account_performance_dashboard_customer_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_account_performance_dashboard", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_account_performance_dashboard"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.int_account_performance_dashboard", "attached_node": "model.customer_360.int_account_performance_dashboard", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('int_account_performance_dashboard')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_account_performance_dashboard_account_profitability_score.37af99624c": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_account_performance_dashboard_account_profitability_score", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_account_performan_5f48eadeff64a833eb668b9e6b8dc706.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_account_performance_dashboard_account_profitability_score.37af99624c", "fqn": ["customer_360", "intermediate", "not_null_int_account_performance_dashboard_account_profitability_score"], "alias": "not_null_int_account_performan_5f48eadeff64a833eb668b9e6b8dc706", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_account_performan_5f48eadeff64a833eb668b9e6b8dc706", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "not_null_int_account_performan_5f48eadeff64a833eb668b9e6b8dc706"}, "created_at": 1755857463.562453, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_account_performan_5f48eadeff64a833eb668b9e6b8dc706\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_account_performan_5f48eadeff64a833eb668b9e6b8dc706\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_account_performance_dashboard", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_account_performance_dashboard"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_profitability_score", "file_key_name": "models.int_account_performance_dashboard", "attached_node": "model.customer_360.int_account_performance_dashboard", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_profitability_score", "model": "{{ get_where_subquery(ref('int_account_performance_dashboard')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_account_performance_dashboard_account_health_score.e2fd76c341": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_account_performance_dashboard_account_health_score", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_account_performance_dashboard_account_health_score.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_account_performance_dashboard_account_health_score.e2fd76c341", "fqn": ["customer_360", "intermediate", "not_null_int_account_performance_dashboard_account_health_score"], "alias": "not_null_int_account_performance_dashboard_account_health_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.56317, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_account_performance_dashboard_account_health_score\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_account_performance_dashboard", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_account_performance_dashboard"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_health_score", "file_key_name": "models.int_account_performance_dashboard", "attached_node": "model.customer_360.int_account_performance_dashboard", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_health_score", "model": "{{ get_where_subquery(ref('int_account_performance_dashboard')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_int_account_performance_dashboard_account_risk_flag__IMMEDIATE_REVIEW_REQUIRED__ENHANCED_MONITORING__CUSTOMER_AT_RISK__DORMANT_ACCOUNT__NEGATIVE_BALANCE__NORMAL.2ec4526af6": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_int_account_performance_dashboard_account_risk_flag__IMMEDIATE_REVIEW_REQUIRED__ENHANCED_MONITORING__CUSTOMER_AT_RISK__DORMANT_ACCOUNT__NEGATIVE_BALANCE__NORMAL", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_int_account_pe_1e8c93d9aa6e8d5f67544ab65ff9e796.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.accepted_values_int_account_performance_dashboard_account_risk_flag__IMMEDIATE_REVIEW_REQUIRED__ENHANCED_MONITORING__CUSTOMER_AT_RISK__DORMANT_ACCOUNT__NEGATIVE_BALANCE__NORMAL.2ec4526af6", "fqn": ["customer_360", "intermediate", "accepted_values_int_account_performance_dashboard_account_risk_flag__IMMEDIATE_REVIEW_REQUIRED__ENHANCED_MONITORING__CUSTOMER_AT_RISK__DORMANT_ACCOUNT__NEGATIVE_BALANCE__NORMAL"], "alias": "accepted_values_int_account_pe_1e8c93d9aa6e8d5f67544ab65ff9e796", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_account_pe_1e8c93d9aa6e8d5f67544ab65ff9e796", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_int_account_pe_1e8c93d9aa6e8d5f67544ab65ff9e796"}, "created_at": 1755857463.564224, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_int_account_pe_1e8c93d9aa6e8d5f67544ab65ff9e796\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_account_pe_1e8c93d9aa6e8d5f67544ab65ff9e796\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_account_performance_dashboard", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.int_account_performance_dashboard"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_risk_flag", "file_key_name": "models.int_account_performance_dashboard", "attached_node": "model.customer_360.int_account_performance_dashboard", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["IMMEDIATE_REVIEW_REQUIRED", "ENHANCED_MONITORING", "CUSTOMER_AT_RISK", "DORMANT_ACCOUNT", "NEGATIVE_BALANCE", "NORMAL"], "column_name": "account_risk_flag", "model": "{{ get_where_subquery(ref('int_account_performance_dashboard')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_int_account_performance_dashboard_account_service_tier__PRIVATE_BANKING__WEALTH_MANAGEMENT__PREMIUM__PREFERRED__ACTIVE__STANDARD.d4209fe3d4": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_int_account_performance_dashboard_account_service_tier__PRIVATE_BANKING__WEALTH_MANAGEMENT__PREMIUM__PREFERRED__ACTIVE__STANDARD", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_int_account_pe_d0149e6852938a535c8d484352ef75e6.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.accepted_values_int_account_performance_dashboard_account_service_tier__PRIVATE_BANKING__WEALTH_MANAGEMENT__PREMIUM__PREFERRED__ACTIVE__STANDARD.d4209fe3d4", "fqn": ["customer_360", "intermediate", "accepted_values_int_account_performance_dashboard_account_service_tier__PRIVATE_BANKING__WEALTH_MANAGEMENT__PREMIUM__PREFERRED__ACTIVE__STANDARD"], "alias": "accepted_values_int_account_pe_d0149e6852938a535c8d484352ef75e6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_account_pe_d0149e6852938a535c8d484352ef75e6", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_int_account_pe_d0149e6852938a535c8d484352ef75e6"}, "created_at": 1755857463.567084, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_int_account_pe_d0149e6852938a535c8d484352ef75e6\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_account_pe_d0149e6852938a535c8d484352ef75e6\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_account_performance_dashboard", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.int_account_performance_dashboard"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_service_tier", "file_key_name": "models.int_account_performance_dashboard", "attached_node": "model.customer_360.int_account_performance_dashboard", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["PRIVATE_BANKING", "WEALTH_MANAGEMENT", "PREMIUM", "PREFERRED", "ACTIVE", "STANDARD"], "column_name": "account_service_tier", "model": "{{ get_where_subquery(ref('int_account_performance_dashboard')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_comprehensive_risk_profile_customer_id.3fabbe3c3c": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_comprehensive_risk_profile_customer_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_comprehensive_risk_profile_customer_id.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_comprehensive_risk_profile_customer_id.3fabbe3c3c", "fqn": ["customer_360", "intermediate", "not_null_int_comprehensive_risk_profile_customer_id"], "alias": "not_null_int_comprehensive_risk_profile_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.5691369, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_comprehensive_risk_profile_customer_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_comprehensive_risk_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_comprehensive_risk_profile"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.int_comprehensive_risk_profile", "attached_node": "model.customer_360.int_comprehensive_risk_profile", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('int_comprehensive_risk_profile')) }}"}, "namespace": null}}, "test.customer_360.unique_int_comprehensive_risk_profile_customer_id.29fd957e69": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_int_comprehensive_risk_profile_customer_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_int_comprehensive_risk_profile_customer_id.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.unique_int_comprehensive_risk_profile_customer_id.29fd957e69", "fqn": ["customer_360", "intermediate", "unique_int_comprehensive_risk_profile_customer_id"], "alias": "unique_int_comprehensive_risk_profile_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.5698822, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_int_comprehensive_risk_profile_customer_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_comprehensive_risk_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.int_comprehensive_risk_profile"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.int_comprehensive_risk_profile", "attached_node": "model.customer_360.int_comprehensive_risk_profile", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('int_comprehensive_risk_profile')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_comprehensive_risk_profile_composite_risk_score.fa558d26b5": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_comprehensive_risk_profile_composite_risk_score", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_comprehensive_risk_profile_composite_risk_score.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_comprehensive_risk_profile_composite_risk_score.fa558d26b5", "fqn": ["customer_360", "intermediate", "not_null_int_comprehensive_risk_profile_composite_risk_score"], "alias": "not_null_int_comprehensive_risk_profile_composite_risk_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.5706189, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_comprehensive_risk_profile_composite_risk_score\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_comprehensive_risk_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_comprehensive_risk_profile"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "composite_risk_score", "file_key_name": "models.int_comprehensive_risk_profile", "attached_node": "model.customer_360.int_comprehensive_risk_profile", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "composite_risk_score", "model": "{{ get_where_subquery(ref('int_comprehensive_risk_profile')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_int_comprehensive_risk_profile_overall_risk_level__CRITICAL_RISK__HIGH_RISK__ELEVATED_RISK__MODERATE_RISK__LOW_RISK.d1c7910b6f": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_int_comprehensive_risk_profile_overall_risk_level__CRITICAL_RISK__HIGH_RISK__ELEVATED_RISK__MODERATE_RISK__LOW_RISK", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_int_comprehens_22f87f72efa81e6b3474fac45bc76573.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.accepted_values_int_comprehensive_risk_profile_overall_risk_level__CRITICAL_RISK__HIGH_RISK__ELEVATED_RISK__MODERATE_RISK__LOW_RISK.d1c7910b6f", "fqn": ["customer_360", "intermediate", "accepted_values_int_comprehensive_risk_profile_overall_risk_level__CRITICAL_RISK__HIGH_RISK__ELEVATED_RISK__MODERATE_RISK__LOW_RISK"], "alias": "accepted_values_int_comprehens_22f87f72efa81e6b3474fac45bc76573", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_comprehens_22f87f72efa81e6b3474fac45bc76573", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_int_comprehens_22f87f72efa81e6b3474fac45bc76573"}, "created_at": 1755857463.571384, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_int_comprehens_22f87f72efa81e6b3474fac45bc76573\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_comprehens_22f87f72efa81e6b3474fac45bc76573\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_comprehensive_risk_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.int_comprehensive_risk_profile"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "overall_risk_level", "file_key_name": "models.int_comprehensive_risk_profile", "attached_node": "model.customer_360.int_comprehensive_risk_profile", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["CRITICAL_RISK", "HIGH_RISK", "ELEVATED_RISK", "MODERATE_RISK", "LOW_RISK"], "column_name": "overall_risk_level", "model": "{{ get_where_subquery(ref('int_comprehensive_risk_profile')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_int_comprehensive_risk_profile_compliance_status__NON_COMPLIANT__REVIEW_REQUIRED__COMPLIANT__PENDING_VERIFICATION.007f3a1488": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_int_comprehensive_risk_profile_compliance_status__NON_COMPLIANT__REVIEW_REQUIRED__COMPLIANT__PENDING_VERIFICATION", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_int_comprehens_7dcc10a7814ead692b551c1d91ef96ef.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.accepted_values_int_comprehensive_risk_profile_compliance_status__NON_COMPLIANT__REVIEW_REQUIRED__COMPLIANT__PENDING_VERIFICATION.007f3a1488", "fqn": ["customer_360", "intermediate", "accepted_values_int_comprehensive_risk_profile_compliance_status__NON_COMPLIANT__REVIEW_REQUIRED__COMPLIANT__PENDING_VERIFICATION"], "alias": "accepted_values_int_comprehens_7dcc10a7814ead692b551c1d91ef96ef", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_comprehens_7dcc10a7814ead692b551c1d91ef96ef", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_int_comprehens_7dcc10a7814ead692b551c1d91ef96ef"}, "created_at": 1755857463.574162, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_int_comprehens_7dcc10a7814ead692b551c1d91ef96ef\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_comprehens_7dcc10a7814ead692b551c1d91ef96ef\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_comprehensive_risk_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.int_comprehensive_risk_profile"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "compliance_status", "file_key_name": "models.int_comprehensive_risk_profile", "attached_node": "model.customer_360.int_comprehensive_risk_profile", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["NON_COMPLIANT", "REVIEW_REQUIRED", "COMPLIANT", "PENDING_VERIFICATION"], "column_name": "compliance_status", "model": "{{ get_where_subquery(ref('int_comprehensive_risk_profile')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_comprehensive_risk_profile_requires_enhanced_monitoring.e084253125": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_comprehensive_risk_profile_requires_enhanced_monitoring", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_comprehensive_ris_c2e896385195fc77b99534ecdf15858d.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_comprehensive_risk_profile_requires_enhanced_monitoring.e084253125", "fqn": ["customer_360", "intermediate", "not_null_int_comprehensive_risk_profile_requires_enhanced_monitoring"], "alias": "not_null_int_comprehensive_ris_c2e896385195fc77b99534ecdf15858d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_comprehensive_ris_c2e896385195fc77b99534ecdf15858d", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "not_null_int_comprehensive_ris_c2e896385195fc77b99534ecdf15858d"}, "created_at": 1755857463.5766652, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_comprehensive_ris_c2e896385195fc77b99534ecdf15858d\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_comprehensive_ris_c2e896385195fc77b99534ecdf15858d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_comprehensive_risk_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_comprehensive_risk_profile"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "requires_enhanced_monitoring", "file_key_name": "models.int_comprehensive_risk_profile", "attached_node": "model.customer_360.int_comprehensive_risk_profile", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "requires_enhanced_monitoring", "model": "{{ get_where_subquery(ref('int_comprehensive_risk_profile')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_comprehensive_risk_profile_requires_immediate_review.bedeea5a0d": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_comprehensive_risk_profile_requires_immediate_review", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_comprehensive_ris_f9dbc1ac3dd1acba1435f72e01a89afb.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_comprehensive_risk_profile_requires_immediate_review.bedeea5a0d", "fqn": ["customer_360", "intermediate", "not_null_int_comprehensive_risk_profile_requires_immediate_review"], "alias": "not_null_int_comprehensive_ris_f9dbc1ac3dd1acba1435f72e01a89afb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_comprehensive_ris_f9dbc1ac3dd1acba1435f72e01a89afb", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "not_null_int_comprehensive_ris_f9dbc1ac3dd1acba1435f72e01a89afb"}, "created_at": 1755857463.577407, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_comprehensive_ris_f9dbc1ac3dd1acba1435f72e01a89afb\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_comprehensive_ris_f9dbc1ac3dd1acba1435f72e01a89afb\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_comprehensive_risk_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_comprehensive_risk_profile"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "requires_immediate_review", "file_key_name": "models.int_comprehensive_risk_profile", "attached_node": "model.customer_360.int_comprehensive_risk_profile", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "requires_immediate_review", "model": "{{ get_where_subquery(ref('int_comprehensive_risk_profile')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_int_comprehensive_risk_profile_risk_trend__VOLATILE__DETERIORATING__UNSTABLE__STABLE.96f61c242b": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_int_comprehensive_risk_profile_risk_trend__VOLATILE__DETERIORATING__UNSTABLE__STABLE", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_int_comprehens_1c4ef98554f1b70ee963dfe5fb87a01f.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.accepted_values_int_comprehensive_risk_profile_risk_trend__VOLATILE__DETERIORATING__UNSTABLE__STABLE.96f61c242b", "fqn": ["customer_360", "intermediate", "accepted_values_int_comprehensive_risk_profile_risk_trend__VOLATILE__DETERIORATING__UNSTABLE__STABLE"], "alias": "accepted_values_int_comprehens_1c4ef98554f1b70ee963dfe5fb87a01f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_comprehens_1c4ef98554f1b70ee963dfe5fb87a01f", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_int_comprehens_1c4ef98554f1b70ee963dfe5fb87a01f"}, "created_at": 1755857463.578143, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_int_comprehens_1c4ef98554f1b70ee963dfe5fb87a01f\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_comprehens_1c4ef98554f1b70ee963dfe5fb87a01f\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_comprehensive_risk_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.int_comprehensive_risk_profile"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "risk_trend", "file_key_name": "models.int_comprehensive_risk_profile", "attached_node": "model.customer_360.int_comprehensive_risk_profile", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["VOLATILE", "DETERIORATING", "UNSTABLE", "STABLE"], "column_name": "risk_trend", "model": "{{ get_where_subquery(ref('int_comprehensive_risk_profile')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_product_penetration_analysis_customer_id.5f30d340cd": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_product_penetration_analysis_customer_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_product_penetration_analysis_customer_id.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_product_penetration_analysis_customer_id.5f30d340cd", "fqn": ["customer_360", "intermediate", "not_null_int_product_penetration_analysis_customer_id"], "alias": "not_null_int_product_penetration_analysis_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.5804641, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_product_penetration_analysis_customer_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_product_penetration_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_product_penetration_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.int_product_penetration_analysis", "attached_node": "model.customer_360.int_product_penetration_analysis", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('int_product_penetration_analysis')) }}"}, "namespace": null}}, "test.customer_360.unique_int_product_penetration_analysis_customer_id.b3f926ca57": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_int_product_penetration_analysis_customer_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_int_product_penetration_analysis_customer_id.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.unique_int_product_penetration_analysis_customer_id.b3f926ca57", "fqn": ["customer_360", "intermediate", "unique_int_product_penetration_analysis_customer_id"], "alias": "unique_int_product_penetration_analysis_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.581215, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_int_product_penetration_analysis_customer_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_product_penetration_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.int_product_penetration_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.int_product_penetration_analysis", "attached_node": "model.customer_360.int_product_penetration_analysis", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('int_product_penetration_analysis')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_product_penetration_analysis_product_penetration_score.c7f32f2beb": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_product_penetration_analysis_product_penetration_score", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_product_penetrati_d753478ea24f5ac3706b0fad337cede0.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_product_penetration_analysis_product_penetration_score.c7f32f2beb", "fqn": ["customer_360", "intermediate", "not_null_int_product_penetration_analysis_product_penetration_score"], "alias": "not_null_int_product_penetrati_d753478ea24f5ac3706b0fad337cede0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_product_penetrati_d753478ea24f5ac3706b0fad337cede0", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "not_null_int_product_penetrati_d753478ea24f5ac3706b0fad337cede0"}, "created_at": 1755857463.58195, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_product_penetrati_d753478ea24f5ac3706b0fad337cede0\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_product_penetrati_d753478ea24f5ac3706b0fad337cede0\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_product_penetration_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_product_penetration_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_penetration_score", "file_key_name": "models.int_product_penetration_analysis", "attached_node": "model.customer_360.int_product_penetration_analysis", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_penetration_score", "model": "{{ get_where_subquery(ref('int_product_penetration_analysis')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_int_product_penetration_analysis_digital_adoption_level__DIGITAL_NATIVE__DIGITAL_ADOPTER__DIGITAL_BEGINNER__NON_DIGITAL.f2a4124904": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_int_product_penetration_analysis_digital_adoption_level__DIGITAL_NATIVE__DIGITAL_ADOPTER__DIGITAL_BEGINNER__NON_DIGITAL", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_int_product_pe_eea9e9fe1d96efcf1eeb03cdde647b15.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.accepted_values_int_product_penetration_analysis_digital_adoption_level__DIGITAL_NATIVE__DIGITAL_ADOPTER__DIGITAL_BEGINNER__NON_DIGITAL.f2a4124904", "fqn": ["customer_360", "intermediate", "accepted_values_int_product_penetration_analysis_digital_adoption_level__DIGITAL_NATIVE__DIGITAL_ADOPTER__DIGITAL_BEGINNER__NON_DIGITAL"], "alias": "accepted_values_int_product_pe_eea9e9fe1d96efcf1eeb03cdde647b15", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_product_pe_eea9e9fe1d96efcf1eeb03cdde647b15", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_int_product_pe_eea9e9fe1d96efcf1eeb03cdde647b15"}, "created_at": 1755857463.582994, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_int_product_pe_eea9e9fe1d96efcf1eeb03cdde647b15\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_product_pe_eea9e9fe1d96efcf1eeb03cdde647b15\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_product_penetration_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.int_product_penetration_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "digital_adoption_level", "file_key_name": "models.int_product_penetration_analysis", "attached_node": "model.customer_360.int_product_penetration_analysis", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["DIGITAL_NATIVE", "DIGITAL_ADOPTER", "DIGITAL_BEGINNER", "NON_DIGITAL"], "column_name": "digital_adoption_level", "model": "{{ get_where_subquery(ref('int_product_penetration_analysis')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_int_product_penetration_analysis_marketing_responsiveness__UNTARGETED__HIGHLY_RESPONSIVE__MODERATELY_RESPONSIVE__LIGHTLY_RESPONSIVE__UNRESPONSIVE.63d13a1c1d": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_int_product_penetration_analysis_marketing_responsiveness__UNTARGETED__HIGHLY_RESPONSIVE__MODERATELY_RESPONSIVE__LIGHTLY_RESPONSIVE__UNRESPONSIVE", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_int_product_pe_169a18501b9216875373494d74d4211e.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.accepted_values_int_product_penetration_analysis_marketing_responsiveness__UNTARGETED__HIGHLY_RESPONSIVE__MODERATELY_RESPONSIVE__LIGHTLY_RESPONSIVE__UNRESPONSIVE.63d13a1c1d", "fqn": ["customer_360", "intermediate", "accepted_values_int_product_penetration_analysis_marketing_responsiveness__UNTARGETED__HIGHLY_RESPONSIVE__MODERATELY_RESPONSIVE__LIGHTLY_RESPONSIVE__UNRESPONSIVE"], "alias": "accepted_values_int_product_pe_169a18501b9216875373494d74d4211e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_product_pe_169a18501b9216875373494d74d4211e", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_int_product_pe_169a18501b9216875373494d74d4211e"}, "created_at": 1755857463.5851269, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_int_product_pe_169a18501b9216875373494d74d4211e\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_product_pe_169a18501b9216875373494d74d4211e\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_product_penetration_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.int_product_penetration_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "marketing_responsiveness", "file_key_name": "models.int_product_penetration_analysis", "attached_node": "model.customer_360.int_product_penetration_analysis", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["UNTARGETED", "HIGHLY_RESPONSIVE", "MODERATELY_RESPONSIVE", "LIGHTLY_RESPONSIVE", "UNRESPONSIVE"], "column_name": "marketing_responsiveness", "model": "{{ get_where_subquery(ref('int_product_penetration_analysis')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_product_penetration_analysis_cross_sell_opportunity_score.dfd228e7c3": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_product_penetration_analysis_cross_sell_opportunity_score", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_product_penetrati_d609c9be17208e092f54c8c66accb732.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_product_penetration_analysis_cross_sell_opportunity_score.dfd228e7c3", "fqn": ["customer_360", "intermediate", "not_null_int_product_penetration_analysis_cross_sell_opportunity_score"], "alias": "not_null_int_product_penetrati_d609c9be17208e092f54c8c66accb732", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_product_penetrati_d609c9be17208e092f54c8c66accb732", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "not_null_int_product_penetrati_d609c9be17208e092f54c8c66accb732"}, "created_at": 1755857463.587764, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_product_penetrati_d609c9be17208e092f54c8c66accb732\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_product_penetrati_d609c9be17208e092f54c8c66accb732\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_product_penetration_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_product_penetration_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cross_sell_opportunity_score", "file_key_name": "models.int_product_penetration_analysis", "attached_node": "model.customer_360.int_product_penetration_analysis", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cross_sell_opportunity_score", "model": "{{ get_where_subquery(ref('int_product_penetration_analysis')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_product_penetration_analysis_product_stickiness_score.b257e1760b": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_product_penetration_analysis_product_stickiness_score", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_product_penetrati_583cb7b723fb740cc527a40e9a7ec301.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_product_penetration_analysis_product_stickiness_score.b257e1760b", "fqn": ["customer_360", "intermediate", "not_null_int_product_penetration_analysis_product_stickiness_score"], "alias": "not_null_int_product_penetrati_583cb7b723fb740cc527a40e9a7ec301", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_product_penetrati_583cb7b723fb740cc527a40e9a7ec301", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "not_null_int_product_penetrati_583cb7b723fb740cc527a40e9a7ec301"}, "created_at": 1755857463.588515, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_product_penetrati_583cb7b723fb740cc527a40e9a7ec301\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_product_penetrati_583cb7b723fb740cc527a40e9a7ec301\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_product_penetration_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_product_penetration_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_stickiness_score", "file_key_name": "models.int_product_penetration_analysis", "attached_node": "model.customer_360.int_product_penetration_analysis", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_stickiness_score", "model": "{{ get_where_subquery(ref('int_product_penetration_analysis')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_channel_effectiveness_customer_id.1e4914581a": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_channel_effectiveness_customer_id", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_channel_effectiveness_customer_id.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_channel_effectiveness_customer_id.1e4914581a", "fqn": ["customer_360", "intermediate", "not_null_int_channel_effectiveness_customer_id"], "alias": "not_null_int_channel_effectiveness_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.589252, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_channel_effectiveness_customer_id\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_channel_effectiveness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_channel_effectiveness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.int_channel_effectiveness", "attached_node": "model.customer_360.int_channel_effectiveness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('int_channel_effectiveness')) }}"}, "namespace": null}}, "test.customer_360.unique_int_channel_effectiveness_customer_id.a362e2963f": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "unique_int_channel_effectiveness_customer_id", "resource_type": "test", "package_name": "customer_360", "path": "unique_int_channel_effectiveness_customer_id.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.unique_int_channel_effectiveness_customer_id.a362e2963f", "fqn": ["customer_360", "intermediate", "unique_int_channel_effectiveness_customer_id"], "alias": "unique_int_channel_effectiveness_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.589987, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"unique_int_channel_effectiveness_customer_id\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_channel_effectiveness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.customer_360.int_channel_effectiveness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.int_channel_effectiveness", "attached_node": "model.customer_360.int_channel_effectiveness", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('int_channel_effectiveness')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_channel_effectiveness_digital_adoption_score.017c75b92b": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_channel_effectiveness_digital_adoption_score", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_channel_effectiveness_digital_adoption_score.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_channel_effectiveness_digital_adoption_score.017c75b92b", "fqn": ["customer_360", "intermediate", "not_null_int_channel_effectiveness_digital_adoption_score"], "alias": "not_null_int_channel_effectiveness_digital_adoption_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.590733, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_channel_effectiveness_digital_adoption_score\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_channel_effectiveness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_channel_effectiveness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "digital_adoption_score", "file_key_name": "models.int_channel_effectiveness", "attached_node": "model.customer_360.int_channel_effectiveness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "digital_adoption_score", "model": "{{ get_where_subquery(ref('int_channel_effectiveness')) }}"}, "namespace": null}}, "test.customer_360.not_null_int_channel_effectiveness_channel_diversity_score.79c0c44702": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "not_null_int_channel_effectiveness_channel_diversity_score", "resource_type": "test", "package_name": "customer_360", "path": "not_null_int_channel_effectiveness_channel_diversity_score.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.not_null_int_channel_effectiveness_channel_diversity_score.79c0c44702", "fqn": ["customer_360", "intermediate", "not_null_int_channel_effectiveness_channel_diversity_score"], "alias": "not_null_int_channel_effectiveness_channel_diversity_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures"}, "created_at": 1755857463.5914612, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"not_null_int_channel_effectiveness_channel_diversity_score\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_channel_effectiveness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.customer_360.int_channel_effectiveness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "channel_diversity_score", "file_key_name": "models.int_channel_effectiveness", "attached_node": "model.customer_360.int_channel_effectiveness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "channel_diversity_score", "model": "{{ get_where_subquery(ref('int_channel_effectiveness')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_int_channel_effectiveness_channel_preference__DIGITAL_ONLY__DIGITAL_FIRST__DIGITAL_PREFERRED__PHYSICAL_PREFERRED__OMNI_CHANNEL__PHYSICAL_ONLY__MINIMAL_USAGE.b01950ca6b": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_int_channel_effectiveness_channel_preference__DIGITAL_ONLY__DIGITAL_FIRST__DIGITAL_PREFERRED__PHYSICAL_PREFERRED__OMNI_CHANNEL__PHYSICAL_ONLY__MINIMAL_USAGE", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_int_channel_ef_e12801bdd9ce5f285cb7e861ed7168fd.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.accepted_values_int_channel_effectiveness_channel_preference__DIGITAL_ONLY__DIGITAL_FIRST__DIGITAL_PREFERRED__PHYSICAL_PREFERRED__OMNI_CHANNEL__PHYSICAL_ONLY__MINIMAL_USAGE.b01950ca6b", "fqn": ["customer_360", "intermediate", "accepted_values_int_channel_effectiveness_channel_preference__DIGITAL_ONLY__DIGITAL_FIRST__DIGITAL_PREFERRED__PHYSICAL_PREFERRED__OMNI_CHANNEL__PHYSICAL_ONLY__MINIMAL_USAGE"], "alias": "accepted_values_int_channel_ef_e12801bdd9ce5f285cb7e861ed7168fd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_channel_ef_e12801bdd9ce5f285cb7e861ed7168fd", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_int_channel_ef_e12801bdd9ce5f285cb7e861ed7168fd"}, "created_at": 1755857463.592213, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_int_channel_ef_e12801bdd9ce5f285cb7e861ed7168fd\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_channel_ef_e12801bdd9ce5f285cb7e861ed7168fd\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_channel_effectiveness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.int_channel_effectiveness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "channel_preference", "file_key_name": "models.int_channel_effectiveness", "attached_node": "model.customer_360.int_channel_effectiveness", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["DIGITAL_ONLY", "DIGITAL_FIRST", "DIGITAL_PREFERRED", "PHYSICAL_PREFERRED", "OMNI_CHANNEL", "PHYSICAL_ONLY", "MINIMAL_USAGE"], "column_name": "channel_preference", "model": "{{ get_where_subquery(ref('int_channel_effectiveness')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_int_channel_effectiveness_channel_engagement_level__VERY_HIGH__HIGH__MEDIUM__LOW__MINIMAL__NONE.80e3c7469c": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_int_channel_effectiveness_channel_engagement_level__VERY_HIGH__HIGH__MEDIUM__LOW__MINIMAL__NONE", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_int_channel_ef_12404bb4256e37187ec9304e46357064.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.accepted_values_int_channel_effectiveness_channel_engagement_level__VERY_HIGH__HIGH__MEDIUM__LOW__MINIMAL__NONE.80e3c7469c", "fqn": ["customer_360", "intermediate", "accepted_values_int_channel_effectiveness_channel_engagement_level__VERY_HIGH__HIGH__MEDIUM__LOW__MINIMAL__NONE"], "alias": "accepted_values_int_channel_ef_12404bb4256e37187ec9304e46357064", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_channel_ef_12404bb4256e37187ec9304e46357064", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_int_channel_ef_12404bb4256e37187ec9304e46357064"}, "created_at": 1755857463.5953422, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_int_channel_ef_12404bb4256e37187ec9304e46357064\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_channel_ef_12404bb4256e37187ec9304e46357064\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_channel_effectiveness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.int_channel_effectiveness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "channel_engagement_level", "file_key_name": "models.int_channel_effectiveness", "attached_node": "model.customer_360.int_channel_effectiveness", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["VERY_HIGH", "HIGH", "MEDIUM", "LOW", "MINIMAL", "NONE"], "column_name": "channel_engagement_level", "model": "{{ get_where_subquery(ref('int_channel_effectiveness')) }}"}, "namespace": null}}, "test.customer_360.accepted_values_int_channel_effectiveness_digital_session_quality__HIGH_QUALITY__MEDIUM_QUALITY__LOW_QUALITY__BRIEF_SESSIONS__NO_SESSIONS.ff91ca2327": {"database": "cosmos", "schema": "cosmos_test_failures", "name": "accepted_values_int_channel_effectiveness_digital_session_quality__HIGH_QUALITY__MEDIUM_QUALITY__LOW_QUALITY__BRIEF_SESSIONS__NO_SESSIONS", "resource_type": "test", "package_name": "customer_360", "path": "accepted_values_int_channel_ef_4574bd976800a73e12559c4bd1f82e81.sql", "original_file_path": "models/intermediate/intermediate_schema.yml", "unique_id": "test.customer_360.accepted_values_int_channel_effectiveness_digital_session_quality__HIGH_QUALITY__MEDIUM_QUALITY__LOW_QUALITY__BRIEF_SESSIONS__NO_SESSIONS.ff91ca2327", "fqn": ["customer_360", "intermediate", "accepted_values_int_channel_effectiveness_digital_session_quality__HIGH_QUALITY__MEDIUM_QUALITY__LOW_QUALITY__BRIEF_SESSIONS__NO_SESSIONS"], "alias": "accepted_values_int_channel_ef_4574bd976800a73e12559c4bd1f82e81", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_channel_ef_4574bd976800a73e12559c4bd1f82e81", "schema": "test_failures", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "test_failures", "alias": "accepted_values_int_channel_ef_4574bd976800a73e12559c4bd1f82e81"}, "created_at": 1755857463.597496, "relation_name": "\"cosmos\".\"cosmos_test_failures\".\"accepted_values_int_channel_ef_4574bd976800a73e12559c4bd1f82e81\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_channel_ef_4574bd976800a73e12559c4bd1f82e81\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_channel_effectiveness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.customer_360.int_channel_effectiveness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "digital_session_quality", "file_key_name": "models.int_channel_effectiveness", "attached_node": "model.customer_360.int_channel_effectiveness", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["HIGH_QUALITY", "MEDIUM_QUALITY", "LOW_QUALITY", "BRIEF_SESSIONS", "NO_SESSIONS"], "column_name": "digital_session_quality", "model": "{{ get_where_subquery(ref('int_channel_effectiveness')) }}"}, "namespace": null}}}, "sources": {}, "macros": {"macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.574379, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.5745971, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.574692, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.57478, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.574867, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog_relations": {"name": "postgres__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog_relations", "macro_sql": "{% macro postgres__get_catalog_relations(information_schema, relations) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            when 'm' then 'MATERIALIZED VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n    where (\n      {%- for relation in relations -%}\n        {%- if relation.identifier -%}\n          (upper(sch.nspname) = upper('{{ relation.schema }}') and\n           upper(tbl.relname) = upper('{{ relation.identifier }}'))\n        {%- else-%}\n          upper(sch.nspname) = upper('{{ relation.schema }}')\n        {%- endif -%}\n        {%- if not loop.last %} or {% endif -%}\n      {%- endfor -%}\n    )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p', 'm') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table, [m]aterialized view. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.575715, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n  {%- set relations = [] -%}\n  {%- for schema in schemas -%}\n    {%- set dummy = relations.append({'schema': schema}) -%}\n  {%- endfor -%}\n  {{ return(postgres__get_catalog_relations(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.575993, "supported_languages": null}, "macro.dbt_postgres.postgres__get_relations": {"name": "postgres__get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres__get_relations", "macro_sql": "{% macro postgres__get_relations() -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v', 'm')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.576475, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations() %}\n  {{ return(postgres__get_relations()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.5765738, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {% endif -%}\n  {% if contract_config.enforced and (not temporary) -%}\n      {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} (\n      {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    )\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.default__get_column_names", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.5782678, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.578617, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.57884, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.579057, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.5793762, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.579674, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.579813, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.5800471, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.580322, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.580915, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.581054, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.5812721, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.58147, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.581933, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  {% if relation.type == 'materialized_view' -%}\n    {% set relation_type = \"materialized view\" %}\n  {%- else -%}\n    {%- set relation_type = relation.type -%}\n  {%- endif -%}\n  comment on {{ relation_type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.582197, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.582616, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.582774, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.582926, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_indexes_sql": {"name": "postgres__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_indexes_sql", "macro_sql": "{% macro postgres__get_show_indexes_sql(relation) %}\n    select\n        i.relname                                   as name,\n        m.amname                                    as method,\n        ix.indisunique                              as \"unique\",\n        array_to_string(array_agg(a.attname), ',')  as column_names\n    from pg_index ix\n    join pg_class i\n        on i.oid = ix.indexrelid\n    join pg_am m\n        on m.oid=i.relam\n    join pg_class t\n        on t.oid = ix.indrelid\n    join pg_namespace n\n        on n.oid = t.relnamespace\n    join pg_attribute a\n        on a.attrelid = t.oid\n        and a.attnum = ANY(ix.indkey)\n    where t.relname = '{{ relation.identifier }}'\n      and n.nspname = '{{ relation.schema }}'\n      and t.relkind in ('r', 'm')\n    group by 1, 2, 3\n    order by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.5830889, "supported_languages": null}, "macro.dbt_postgres.postgres__get_drop_index_sql": {"name": "postgres__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_drop_index_sql", "macro_sql": "\n\n\n{%- macro postgres__get_drop_index_sql(relation, index_name) -%}\n    drop index if exists \"{{ relation.schema }}\".\"{{ index_name }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.5832052, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.583545, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_microbatch_sql": {"name": "postgres__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_microbatch_sql", "macro_sql": "{% macro postgres__get_incremental_microbatch_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) %}\n  {% else %}\n    {{ exceptions.raise_compiler_error(\"dbt-postgres 'microbatch' requires a `unique_key` config\") }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql", "macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.583776, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    update {{ target }}\n    set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }}::text = {{ target }}.{{ columns.dbt_scd_id }}::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      {% if config.get(\"dbt_valid_to_current\") %}\n        and ({{ target }}.{{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }} or {{ target }}.{{ columns.dbt_valid_to }} is null);\n      {% else %}\n        and {{ target }}.{{ columns.dbt_valid_to }} is null;\n      {% endif %}\n\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.584655, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_materialized_view": {"name": "postgres__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_materialized_view", "macro_sql": "{% macro postgres__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.584797, "supported_languages": null}, "macro.dbt_postgres.postgres__describe_materialized_view": {"name": "postgres__describe_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/describe.sql", "original_file_path": "macros/relations/materialized_view/describe.sql", "unique_id": "macro.dbt_postgres.postgres__describe_materialized_view", "macro_sql": "{% macro postgres__describe_materialized_view(relation) %}\n    -- for now just get the indexes, we don't need the name or the query yet\n    {% set _indexes = run_query(get_show_indexes_sql(relation)) %}\n    {% do return({'indexes': _indexes}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.585032, "supported_languages": null}, "macro.dbt_postgres.postgres__refresh_materialized_view": {"name": "postgres__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_postgres.postgres__refresh_materialized_view", "macro_sql": "{% macro postgres__refresh_materialized_view(relation) %}\n    refresh materialized view {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.585151, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_materialized_view_sql": {"name": "postgres__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_materialized_view_sql", "macro_sql": "{% macro postgres__get_rename_materialized_view_sql(relation, new_name) %}\n    alter materialized view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.5852768, "supported_languages": null}, "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql": {"name": "postgres__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n\n        {{ postgres__update_indexes_on_materialized_view(relation, configuration_changes.indexes) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_postgres.postgres__update_indexes_on_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.585702, "supported_languages": null}, "macro.dbt_postgres.postgres__update_indexes_on_materialized_view": {"name": "postgres__update_indexes_on_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__update_indexes_on_materialized_view", "macro_sql": "\n\n\n{%- macro postgres__update_indexes_on_materialized_view(relation, index_changes) -%}\n    {{- log(\"Applying UPDATE INDEXES to: \" ~ relation) -}}\n\n    {%- for _index_change in index_changes -%}\n        {%- set _index = _index_change.context -%}\n\n        {%- if _index_change.action == \"drop\" -%}\n\n            {{ postgres__get_drop_index_sql(relation, _index.name) }}\n\n        {%- elif _index_change.action == \"create\" -%}\n\n            {{ postgres__get_create_index_sql(relation, _index.as_node_config) }}\n\n        {%- endif -%}\n\t{{ ';' if not loop.last else \"\" }}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql", "macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.586081, "supported_languages": null}, "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes": {"name": "postgres__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes", "macro_sql": "{% macro postgres__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = postgres__describe_materialized_view(existing_relation) %}\n    {% set _configuration_changes = existing_relation.get_materialized_view_config_change_collection(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__describe_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.5862951, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql": {"name": "postgres__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_create_materialized_view_as_sql(relation, sql) %}\n    create materialized view if not exists {{ relation }} as {{ sql }};\n\n    {% for _index_dict in config.get('indexes', []) -%}\n        {{- get_create_index_sql(relation, _index_dict) -}}{{ ';' if not loop.last else \"\" }}\n    {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.5866072, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_table": {"name": "postgres__drop_table", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_table", "macro_sql": "{% macro postgres__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.586714, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_table_sql": {"name": "postgres__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_table_sql", "macro_sql": "{% macro postgres__get_replace_table_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n            {{ get_table_columns_and_constraints() }}\n            {%- set sql = get_select_subquery(sql) %}\n        {% endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.587158, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_table_sql": {"name": "postgres__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_table_sql", "macro_sql": "{% macro postgres__get_rename_table_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.587287, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_view": {"name": "postgres__drop_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_view", "macro_sql": "{% macro postgres__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.5873861, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_view_sql": {"name": "postgres__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_view_sql", "macro_sql": "{% macro postgres__get_replace_view_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace view {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n        {%- endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.587757, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_view_sql": {"name": "postgres__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_view_sql", "macro_sql": "{% macro postgres__get_rename_view_sql(relation, new_name) %}\n    alter view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.587893, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.588052, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.5884259, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.589783, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.5899, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.5902379, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.590517, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.591125, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.591264, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.591371, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.591467, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.591564, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.5917718, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.591985, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.59219, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.592489, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.5930681, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.594551, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.594671, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.5948281, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.595489, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.595606, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.595726, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.59671, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.5977669, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.599335, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column {{ adapter.quote(column.name) }} {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.5995688, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.599689, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.599753, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.599854, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.599933, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.600072, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.600246, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and (\n               {{ strategy.row_changed }} {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n            )\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}  {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n            {%- if strategy.hard_deletes == 'new_record' %}\n            and not (\n                --avoid updating the record's valid_to if the latest entry is marked as deleted\n                snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n                and snapshotted_data.{{ columns.dbt_valid_to }} is null\n            )\n            {%- endif %}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set snapshotted_cols = get_list_of_column_names(get_columns_in_relation(target_relation)) %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {#\n                If a column has been added to the source it won't yet exist in the\n                snapshotted table so we insert a null value as a placeholder for the column.\n             #}\n            {%- for col in source_sql_cols -%}\n            {%- if col.name in snapshotted_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {%- else -%}\n            NULL as {{ adapter.quote(col.column) }},\n            {%- endif -%}\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n        and not (\n            --avoid inserting a new record if the latest one is marked as deleted\n            snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n            and snapshotted_data.{{ columns.dbt_valid_to }} is null\n            )\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_list_of_column_names", "macro.dbt.get_columns_in_relation", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.603224, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6033778, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.60373, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.604022, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.604445, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.604748, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.604943, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.605186, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6055849, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.605742, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.605881, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.608613, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n\n  {% set sql_with_limit %}\n    {{ get_limit_subquery_sql(sql, limit) }}\n  {% endset %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql_with_limit) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {# Since the test failures have already been saved to the database, reuse that result rather than querying again #}\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql_with_limit %}\n\n  {% endif %}\n\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {# The limit has already been included above, and we do not want to duplicate it again. We also want to be safe for macro overrides treating `limit` as a required parameter. #}\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit=none)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6101959, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6105962, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.61081, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.610967, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.611383, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.611615, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.611878, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- set column_name_to_quoted = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%-   do column_name_to_quoted.update({column.name|lower: column.quoted}) -%}\n  {%- endfor -%}\n\n  {%- set expected_column_names_quoted = [] -%}\n  {%- for column_name in tested_expected_column_names -%}\n  {%-   do expected_column_names_quoted.append(column_name_to_quoted[column_name|lower]) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types, column_name_to_quoted) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, expected_column_names_quoted) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.61315, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.614272, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.614551, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6147242, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.615623, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.615788, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.616235, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.617671, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6191092, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.619692, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.620061, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.620505, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.620679, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.621166, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6219509, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6231282, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.623311, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6238022, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6240158, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.624474, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6248991, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.625356, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.625513, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.625643, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.625839, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.625966, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.626157, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.626283, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.626463, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.626587, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.626691, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.626816, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6269262, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.627118, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.630074, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.630951, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.631762, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.632569, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6331468, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.633321, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.633402, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.633603, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.633725, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% if target_relation.database == defer_relation.database and\n            target_relation.schema == defer_relation.schema and\n            target_relation.identifier == defer_relation.identifier %}\n        {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n      {% else %}\n        {% call statement('main') %}\n            {{ create_or_replace_clone(target_relation, defer_relation) }}\n        {% endcall %}\n      {% endif %}\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.635443, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.637142, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.637855, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.638456, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6386182, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6389499, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.639082, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.639174, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.639269, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.639346, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.639454, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.639758, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.640079, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.640206, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.641014, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.641286, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.641552, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.641879, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.642068, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6422741, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.642536, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.64272, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6430368, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.64331, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.643438, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6435788, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.64371, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.644105, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.64491, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.645149, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.645322, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.64551, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.645656, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.645865, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.646005, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6463249, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.646615, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6467588, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6469681, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.647187, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6473758, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6476429, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.647943, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.648152, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.648293, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.648468, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.648554, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.648741, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.648843, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.649049, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.649142, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6493282, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6494322, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.649816, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.649947, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6501389, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.650242, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6504278, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6505349, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.651105, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.651191, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6515641, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.651683, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.651777, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.652645, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.652906, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6531441, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.653325, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.653412, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.653598, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.653701, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.653888, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6539898, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6544251, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.65455, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.654847, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.655324, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.655654, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.655788, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6559129, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6560938, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6561868, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.656571, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.656677, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.657671, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.65781, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.657971, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.658157, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.658259, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.658514, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6586251, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.658744, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6590478, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6592581, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.659462, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6596239, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.659978, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.660856, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.661246, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6614442, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.66196, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.66275, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.663255, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.663414, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.663573, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.663625, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.663989, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6643999, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6645591, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.664809, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.665031, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.665229, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6654441, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.665557, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6657228, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.665808, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6661131, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.666399, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.666529, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.666879, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.667056, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.667131, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.667347, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6674602, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.667615, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.667669, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.667857, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.667954, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.668152, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6682508, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.668565, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.668842, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6690629, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.669182, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6693819, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6694841, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6697059, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6699111, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.670091, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.670207, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.670379, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.67049, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.670686, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.670775, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.67095, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6710248, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6712132, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.671304, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.671477, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.67155, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.672068, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.672173, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.672283, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.672384, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6724951, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.672597, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6727061, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6728268, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6731598, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.673264, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6733701, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.673467, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.673575, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.673677, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.673864, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.67396, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6741261, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.674197, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6744168, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.674593, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.674696, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.674953, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.675071, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.675225, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.675415, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.675505, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.675764, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.675933, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.676131, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.676225, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6764421, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.676567, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6766798, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.676805, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.67713, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.677235, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6773329, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6774058, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_postgres.postgres__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6777349, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6778612, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.677919, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6780338, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6781461, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.678487, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.678582, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.678692, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6789608, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.679091, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6791859, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.679292, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.679379, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6798668, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.679986, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.680251, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.680453, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.680622, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6808472, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.680971, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.681099, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.681272, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.681653, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.681816, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6819131, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.68224, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.682528, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.682678, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.682901, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.683094, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.683249, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.684057, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.684135, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.684248, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6843252, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6845691, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.684708, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.684791, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6849449, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6850848, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.68524, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.685378, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.685528, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.686234, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.686364, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.686535, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.686687, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6874728, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.687752, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.687876, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.688001, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.688297, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.688412, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.688548, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.688661, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.688839, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6891599, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.689738, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.689913, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.690047, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6902232, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6903522, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.690465, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6905851, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.690748, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.690927, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.691156, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6912892, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.691404, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.691531, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6916459, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.691759, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6918652, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.692008, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.692131, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.692991, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.693103, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.693322, "supported_languages": null}, "macro.dbt.get_list_of_column_names": {"name": "get_list_of_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_list_of_column_names", "macro_sql": "\n\n{%- macro get_list_of_column_names(columns) -%}\n  {% set col_names = [] %}\n  {% for col in columns %}\n    {% do col_names.append(col.name) %}\n  {% endfor %}\n  {{ return(col_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.693526, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.693679, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.693824, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.693954, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.694786, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.695043, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.695176, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.695426, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6955929, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.696095, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.696286, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.quoted }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.quoted }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.696866, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   set column_name_to_quoted = {} -%}\n{%-   for column in columns_in_relation -%}\n\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-     do column_name_to_quoted.update({column.name|lower: column.quoted}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name_to_quoted[column_name] }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name_to_quoted[column_name] }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.698727, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types, column_name_to_quoted) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name_to_quoted[column_name] }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.6991339, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.699893, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.700038, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.700105, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.700635, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.700741, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7014, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7016802, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.702073, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7023969, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.702451, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.702786, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.702966, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.703181, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.703385, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7036018, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.703956, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.704226, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.704687, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7049081, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.705127, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7055402, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7064881, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.706911, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.707637, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.707974, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.708211, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7085881, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7091641, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.709454, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.709776, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.710115, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.710443, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.710731, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.710994, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.711318, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.711841, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.712141, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.712575, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7128441, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7130802, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.713332, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.713578, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.713883, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.714438, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.714819, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.715422, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.715789, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7164009, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7166688, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.716875, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.717459, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.718528, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.71873, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.718845, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7191591, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.719352, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.719485, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.71966, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.719776, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.720213, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.720711, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.721073, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7214699, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.721625, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7218711, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7221, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.72248, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.722691, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.722928, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.723275, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.723861, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7241821, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.724467, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.724596, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.724946, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.725279, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.72585, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7261171, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.726311, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.726814, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7277598, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7282739, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7293289, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7295291, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7296221, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7303748, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.732948, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.733181, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7333639, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.73377, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7339368, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7340832, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7342222, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.734344, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.734476, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.734731, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.734921, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.735167, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7355661, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.735795, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7360342, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.736518, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.736771, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7372549, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7376032, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.738119, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.739145, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.739734, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.740293, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.740583, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.741088, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.741406, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7417228, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.741859, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7421, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.742504, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7427578, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7431831, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.743428, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.7435288, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.743624, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.74372, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.744006, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.744511, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.74484, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.745027, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.745425, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755857462.74596, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.customer_360.stg_customers": ["seed.customer_360.age_cohorts", "seed.customer_360.credit_score_ranges", "seed.customer_360.income_brackets", "seed.customer_360.lifecycle_stages", "seed.customer_360.risk_categories"], "model.customer_360.stg_transactions": [], "model.customer_360.stg_retention_events": [], "model.customer_360.stg_withdrawals": [], "model.customer_360.stg_fees": [], "model.customer_360.stg_deposits": [], "model.customer_360.stg_customer_phones": [], "model.customer_360.stg_digital_activity": [], "model.customer_360.stg_loans": [], "model.customer_360.stg_accounts": ["seed.customer_360.product_catalog"], "model.customer_360.stg_risk_assessments": [], "model.customer_360.stg_cards": [], "model.customer_360.stg_customer_addresses": ["seed.customer_360.geographic_regions"], "model.customer_360.stg_credit_scores": [], "model.customer_360.stg_product_usage": [], "model.customer_360.stg_payments": [], "model.customer_360.stg_marketing_campaigns": [], "model.customer_360.stg_transfers": [], "model.customer_360.stg_compliance_records": [], "model.customer_360.stg_account_alerts": [], "model.customer_360.stg_channel_usage": [], "model.customer_360.stg_customer_segments": [], "model.customer_360.stg_investments": [], "model.customer_360.stg_fraud_alerts": [], "model.customer_360.stg_insurance_policies": [], "model.customer_360.stg_account_balances": [], "model.customer_360.stg_interest_accruals": [], "model.customer_360.stg_customer_interactions": [], "model.customer_360.stg_kyc_records": [], "model.customer_360.product_performance_analytics": ["model.customer_360.int_account_performance_dashboard", "model.customer_360.int_channel_effectiveness", "model.customer_360.int_customer_financial_summary", "model.customer_360.int_customer_profile", "model.customer_360.int_customer_retention_analytics", "model.customer_360.int_product_penetration_analysis"], "model.customer_360.risk_management_dashboard": ["model.customer_360.int_comprehensive_risk_profile", "model.customer_360.int_customer_financial_summary", "model.customer_360.int_customer_profile", "model.customer_360.int_customer_retention_analytics"], "model.customer_360.customer_segmentation_analysis": ["model.customer_360.int_channel_effectiveness", "model.customer_360.int_comprehensive_risk_profile", "model.customer_360.int_customer_financial_summary", "model.customer_360.int_customer_profile", "model.customer_360.int_customer_retention_analytics", "model.customer_360.int_product_penetration_analysis"], "model.customer_360.financial_performance_summary": ["model.customer_360.int_account_performance_dashboard", "model.customer_360.int_customer_financial_summary", "model.customer_360.int_customer_profile", "model.customer_360.int_product_penetration_analysis"], "model.customer_360.executive_customer_dashboard": ["model.customer_360.int_channel_effectiveness", "model.customer_360.int_comprehensive_risk_profile", "model.customer_360.int_customer_financial_summary", "model.customer_360.int_customer_profile", "model.customer_360.int_customer_retention_analytics", "model.customer_360.int_product_penetration_analysis"], "model.customer_360.int_comprehensive_risk_profile": ["model.customer_360.stg_account_alerts", "model.customer_360.stg_accounts", "model.customer_360.stg_compliance_records", "model.customer_360.stg_credit_scores", "model.customer_360.stg_fraud_alerts", "model.customer_360.stg_kyc_records", "model.customer_360.stg_risk_assessments"], "model.customer_360.int_transaction_analytics": ["model.customer_360.stg_deposits", "model.customer_360.stg_fees", "model.customer_360.stg_payments", "model.customer_360.stg_transactions", "model.customer_360.stg_transfers", "model.customer_360.stg_withdrawals"], "model.customer_360.int_customer_financial_summary": ["model.customer_360.stg_account_balances", "model.customer_360.stg_accounts", "model.customer_360.stg_cards", "model.customer_360.stg_insurance_policies", "model.customer_360.stg_investments", "model.customer_360.stg_loans"], "model.customer_360.int_account_performance_dashboard": ["model.customer_360.int_comprehensive_risk_profile", "model.customer_360.int_customer_financial_summary", "model.customer_360.int_customer_profile", "model.customer_360.int_product_penetration_analysis", "model.customer_360.int_transaction_analytics", "model.customer_360.stg_account_balances", "model.customer_360.stg_accounts"], "model.customer_360.int_product_penetration_analysis": ["model.customer_360.stg_channel_usage", "model.customer_360.stg_customer_segments", "model.customer_360.stg_marketing_campaigns", "model.customer_360.stg_product_usage"], "model.customer_360.int_channel_effectiveness": ["model.customer_360.stg_channel_usage", "model.customer_360.stg_customer_interactions", "model.customer_360.stg_digital_activity", "model.customer_360.stg_marketing_campaigns"], "model.customer_360.int_customer_360_master": ["model.customer_360.int_comprehensive_risk_profile", "model.customer_360.int_customer_financial_summary", "model.customer_360.int_customer_profile", "model.customer_360.int_transaction_analytics", "model.customer_360.stg_accounts"], "model.customer_360.int_customer_retention_analytics": ["model.customer_360.int_comprehensive_risk_profile", "model.customer_360.int_customer_profile", "model.customer_360.stg_customer_interactions", "model.customer_360.stg_digital_activity", "model.customer_360.stg_retention_events"], "model.customer_360.int_customer_profile": ["model.customer_360.stg_customer_addresses", "model.customer_360.stg_customer_interactions", "model.customer_360.stg_customer_phones", "model.customer_360.stg_customer_segments", "model.customer_360.stg_customers", "model.customer_360.stg_digital_activity"], "seed.customer_360.product_catalog": [], "seed.customer_360.marketing_segments": [], "seed.customer_360.income_brackets": [], "seed.customer_360.occupation_categories": [], "seed.customer_360.compliance_rules": [], "seed.customer_360.holiday_calendars": [], "seed.customer_360.interest_rate_tiers": [], "seed.customer_360.risk_categories": [], "seed.customer_360.economic_indicators": [], "seed.customer_360.geographic_regions": [], "seed.customer_360.currency_codes": [], "seed.customer_360.lifecycle_stages": [], "seed.customer_360.fee_structures": [], "seed.customer_360.age_cohorts": [], "seed.customer_360.country_risk_ratings": [], "seed.customer_360.regulatory_requirements": [], "seed.customer_360.channel_definitions": [], "seed.customer_360.service_level_agreements": [], "seed.customer_360.credit_score_ranges": [], "seed.customer_360.transaction_types": [], "test.customer_360.unique_product_catalog_product_id.ad58ab5fa8": ["seed.customer_360.product_catalog"], "test.customer_360.not_null_product_catalog_product_id.bd2ef1ab99": ["seed.customer_360.product_catalog"], "test.customer_360.unique_risk_categories_risk_category_id.531cdefb99": ["seed.customer_360.risk_categories"], "test.customer_360.not_null_risk_categories_risk_category_id.d514d55359": ["seed.customer_360.risk_categories"], "test.customer_360.unique_credit_score_ranges_score_range_id.500ec5b348": ["seed.customer_360.credit_score_ranges"], "test.customer_360.not_null_credit_score_ranges_score_range_id.099d22141f": ["seed.customer_360.credit_score_ranges"], "test.customer_360.unique_transaction_types_transaction_type_id.bb14a1d457": ["seed.customer_360.transaction_types"], "test.customer_360.not_null_transaction_types_transaction_type_id.bf9afad10e": ["seed.customer_360.transaction_types"], "test.customer_360.unique_channel_definitions_channel_id.f81e4e5ee3": ["seed.customer_360.channel_definitions"], "test.customer_360.not_null_channel_definitions_channel_id.fbefcb67e3": ["seed.customer_360.channel_definitions"], "test.customer_360.unique_geographic_regions_region_id.10d79a046e": ["seed.customer_360.geographic_regions"], "test.customer_360.not_null_geographic_regions_region_id.61a868b6cb": ["seed.customer_360.geographic_regions"], "test.customer_360.unique_income_brackets_bracket_id.89ac3ae36f": ["seed.customer_360.income_brackets"], "test.customer_360.not_null_income_brackets_bracket_id.e7289c2012": ["seed.customer_360.income_brackets"], "test.customer_360.unique_age_cohorts_cohort_id.a482d4358e": ["seed.customer_360.age_cohorts"], "test.customer_360.not_null_age_cohorts_cohort_id.5b4cef4196": ["seed.customer_360.age_cohorts"], "test.customer_360.unique_occupation_categories_occupation_id.aedeeac927": ["seed.customer_360.occupation_categories"], "test.customer_360.not_null_occupation_categories_occupation_id.049967923f": ["seed.customer_360.occupation_categories"], "test.customer_360.unique_regulatory_requirements_requirement_id.d4821a03e1": ["seed.customer_360.regulatory_requirements"], "test.customer_360.not_null_regulatory_requirements_requirement_id.f3e4797840": ["seed.customer_360.regulatory_requirements"], "test.customer_360.unique_compliance_rules_rule_id.2aab33c92d": ["seed.customer_360.compliance_rules"], "test.customer_360.not_null_compliance_rules_rule_id.4e9144f6fe": ["seed.customer_360.compliance_rules"], "test.customer_360.unique_currency_codes_currency_code.8f52dad5ba": ["seed.customer_360.currency_codes"], "test.customer_360.not_null_currency_codes_currency_code.d4e6f50f77": ["seed.customer_360.currency_codes"], "test.customer_360.unique_country_risk_ratings_country_code.d44b893501": ["seed.customer_360.country_risk_ratings"], "test.customer_360.not_null_country_risk_ratings_country_code.0beb7c4165": ["seed.customer_360.country_risk_ratings"], "test.customer_360.unique_fee_structures_fee_id.e372dadd52": ["seed.customer_360.fee_structures"], "test.customer_360.not_null_fee_structures_fee_id.24a91e8951": ["seed.customer_360.fee_structures"], "test.customer_360.unique_interest_rate_tiers_tier_id.a9a4ae154b": ["seed.customer_360.interest_rate_tiers"], "test.customer_360.not_null_interest_rate_tiers_tier_id.ba54cf404c": ["seed.customer_360.interest_rate_tiers"], "test.customer_360.unique_marketing_segments_segment_id.2adf6d69dc": ["seed.customer_360.marketing_segments"], "test.customer_360.not_null_marketing_segments_segment_id.372e2c52f7": ["seed.customer_360.marketing_segments"], "test.customer_360.unique_lifecycle_stages_stage_id.9ba4ece453": ["seed.customer_360.lifecycle_stages"], "test.customer_360.not_null_lifecycle_stages_stage_id.1f2f4aa529": ["seed.customer_360.lifecycle_stages"], "test.customer_360.unique_service_level_agreements_sla_id.38ff5304c7": ["seed.customer_360.service_level_agreements"], "test.customer_360.not_null_service_level_agreements_sla_id.cc1721d182": ["seed.customer_360.service_level_agreements"], "test.customer_360.unique_holiday_calendars_holiday_id.a1383e3e34": ["seed.customer_360.holiday_calendars"], "test.customer_360.not_null_holiday_calendars_holiday_id.852d7e9b65": ["seed.customer_360.holiday_calendars"], "test.customer_360.unique_economic_indicators_indicator_id.154e0631da": ["seed.customer_360.economic_indicators"], "test.customer_360.not_null_economic_indicators_indicator_id.80b34f2a6a": ["seed.customer_360.economic_indicators"], "test.customer_360.unique_stg_customers_customer_id.c7614daada": ["model.customer_360.stg_customers"], "test.customer_360.not_null_stg_customers_customer_id.e2cfb1f9aa": ["model.customer_360.stg_customers"], "test.customer_360.unique_stg_customers_customer_number.1c7b8445eb": ["model.customer_360.stg_customers"], "test.customer_360.not_null_stg_customers_customer_number.db9a067778": ["model.customer_360.stg_customers"], "test.customer_360.not_null_stg_customers_first_name.57f99cf033": ["model.customer_360.stg_customers"], "test.customer_360.not_null_stg_customers_last_name.fa1ab1e186": ["model.customer_360.stg_customers"], "test.customer_360.not_null_stg_customers_email_address.4ac431a034": ["model.customer_360.stg_customers"], "test.customer_360.not_null_stg_customers_credit_score.1a2b785b97": ["model.customer_360.stg_customers"], "test.customer_360.unique_stg_customer_addresses_address_id.3dc38ac7e4": ["model.customer_360.stg_customer_addresses"], "test.customer_360.not_null_stg_customer_addresses_address_id.012a63311d": ["model.customer_360.stg_customer_addresses"], "test.customer_360.not_null_stg_customer_addresses_customer_id.08250e83d9": ["model.customer_360.stg_customer_addresses"], "test.customer_360.unique_stg_customer_phones_phone_id.799d1b6bc9": ["model.customer_360.stg_customer_phones"], "test.customer_360.not_null_stg_customer_phones_phone_id.f20761ea7b": ["model.customer_360.stg_customer_phones"], "test.customer_360.not_null_stg_customer_phones_customer_id.6e3e0955c1": ["model.customer_360.stg_customer_phones"], "test.customer_360.unique_stg_accounts_account_id.cdf6252c79": ["model.customer_360.stg_accounts"], "test.customer_360.not_null_stg_accounts_account_id.182dfbc108": ["model.customer_360.stg_accounts"], "test.customer_360.not_null_stg_accounts_customer_id.0b54f014a3": ["model.customer_360.stg_accounts"], "test.customer_360.not_null_stg_accounts_product_type.58694c1112": ["model.customer_360.stg_accounts"], "test.customer_360.accepted_values_stg_accounts_account_status__ACTIVE__CLOSED__DORMANT__RESTRICTED.c71cafef9c": ["model.customer_360.stg_accounts"], "test.customer_360.unique_stg_transactions_transaction_id.ee9a78a396": ["model.customer_360.stg_transactions"], "test.customer_360.not_null_stg_transactions_transaction_id.1d00a8e2e4": ["model.customer_360.stg_transactions"], "test.customer_360.not_null_stg_transactions_account_id.a7d212da1d": ["model.customer_360.stg_transactions"], "test.customer_360.unique_stg_deposits_deposit_id.e141493b89": ["model.customer_360.stg_deposits"], "test.customer_360.not_null_stg_deposits_deposit_id.b6122931ab": ["model.customer_360.stg_deposits"], "test.customer_360.unique_stg_withdrawals_withdrawal_id.92674c3b97": ["model.customer_360.stg_withdrawals"], "test.customer_360.not_null_stg_withdrawals_withdrawal_id.ffb18dca4f": ["model.customer_360.stg_withdrawals"], "test.customer_360.unique_stg_transfers_transfer_id.f991b9cc9e": ["model.customer_360.stg_transfers"], "test.customer_360.not_null_stg_transfers_transfer_id.622a15efdc": ["model.customer_360.stg_transfers"], "test.customer_360.unique_stg_payments_payment_id.3744510712": ["model.customer_360.stg_payments"], "test.customer_360.not_null_stg_payments_payment_id.c19cc50075": ["model.customer_360.stg_payments"], "test.customer_360.unique_stg_fees_fee_id.81f1c62ec9": ["model.customer_360.stg_fees"], "test.customer_360.not_null_stg_fees_fee_id.a46960ff2f": ["model.customer_360.stg_fees"], "test.customer_360.unique_stg_interest_accruals_accrual_id.0501254279": ["model.customer_360.stg_interest_accruals"], "test.customer_360.not_null_stg_interest_accruals_accrual_id.0816e5042a": ["model.customer_360.stg_interest_accruals"], "test.customer_360.unique_stg_account_balances_balance_id.2ea52af5ab": ["model.customer_360.stg_account_balances"], "test.customer_360.not_null_stg_account_balances_balance_id.3f2784ad64": ["model.customer_360.stg_account_balances"], "test.customer_360.unique_stg_cards_card_id.f326b4cb4d": ["model.customer_360.stg_cards"], "test.customer_360.not_null_stg_cards_card_id.9f9047ca6a": ["model.customer_360.stg_cards"], "test.customer_360.unique_stg_loans_loan_id.be67636b63": ["model.customer_360.stg_loans"], "test.customer_360.not_null_stg_loans_loan_id.b77c69982c": ["model.customer_360.stg_loans"], "test.customer_360.unique_stg_credit_scores_score_id.559f99da3b": ["model.customer_360.stg_credit_scores"], "test.customer_360.not_null_stg_credit_scores_score_id.422dc7f911": ["model.customer_360.stg_credit_scores"], "test.customer_360.not_null_stg_credit_scores_credit_score.7796f78aa8": ["model.customer_360.stg_credit_scores"], "test.customer_360.unique_stg_investments_holding_id.fc8fb05352": ["model.customer_360.stg_investments"], "test.customer_360.not_null_stg_investments_holding_id.9f33621334": ["model.customer_360.stg_investments"], "test.customer_360.unique_stg_insurance_policies_policy_id.3fb13c969f": ["model.customer_360.stg_insurance_policies"], "test.customer_360.not_null_stg_insurance_policies_policy_id.557b8b16a2": ["model.customer_360.stg_insurance_policies"], "test.customer_360.unique_stg_customer_interactions_interaction_id.0376adc910": ["model.customer_360.stg_customer_interactions"], "test.customer_360.not_null_stg_customer_interactions_interaction_id.06068526a4": ["model.customer_360.stg_customer_interactions"], "test.customer_360.unique_stg_marketing_campaigns_campaign_response_id.b987efe876": ["model.customer_360.stg_marketing_campaigns"], "test.customer_360.not_null_stg_marketing_campaigns_campaign_response_id.45766a5749": ["model.customer_360.stg_marketing_campaigns"], "test.customer_360.unique_stg_digital_activity_activity_id.6f0e8f4cc4": ["model.customer_360.stg_digital_activity"], "test.customer_360.not_null_stg_digital_activity_activity_id.81e37ba655": ["model.customer_360.stg_digital_activity"], "test.customer_360.unique_stg_channel_usage_usage_id.e3fbcbb409": ["model.customer_360.stg_channel_usage"], "test.customer_360.not_null_stg_channel_usage_usage_id.37b9a2f3ad": ["model.customer_360.stg_channel_usage"], "test.customer_360.unique_stg_product_usage_usage_id.8cfe23816f": ["model.customer_360.stg_product_usage"], "test.customer_360.not_null_stg_product_usage_usage_id.be0d138046": ["model.customer_360.stg_product_usage"], "test.customer_360.unique_stg_customer_segments_segment_id.5a59ccd216": ["model.customer_360.stg_customer_segments"], "test.customer_360.not_null_stg_customer_segments_segment_id.fbfbf2d859": ["model.customer_360.stg_customer_segments"], "test.customer_360.unique_stg_retention_events_event_id.245d36dcaa": ["model.customer_360.stg_retention_events"], "test.customer_360.not_null_stg_retention_events_event_id.038395d757": ["model.customer_360.stg_retention_events"], "test.customer_360.unique_stg_risk_assessments_assessment_id.301f1fb1b6": ["model.customer_360.stg_risk_assessments"], "test.customer_360.not_null_stg_risk_assessments_assessment_id.e8dcbe5ef6": ["model.customer_360.stg_risk_assessments"], "test.customer_360.unique_stg_kyc_records_kyc_id.1349285655": ["model.customer_360.stg_kyc_records"], "test.customer_360.not_null_stg_kyc_records_kyc_id.93e1addfcf": ["model.customer_360.stg_kyc_records"], "test.customer_360.unique_stg_compliance_records_compliance_id.c7420a7ff0": ["model.customer_360.stg_compliance_records"], "test.customer_360.not_null_stg_compliance_records_compliance_id.3153c76fca": ["model.customer_360.stg_compliance_records"], "test.customer_360.unique_stg_fraud_alerts_alert_id.e84886bf88": ["model.customer_360.stg_fraud_alerts"], "test.customer_360.not_null_stg_fraud_alerts_alert_id.d3eab05de4": ["model.customer_360.stg_fraud_alerts"], "test.customer_360.unique_stg_account_alerts_alert_id.8a82f61d9e": ["model.customer_360.stg_account_alerts"], "test.customer_360.not_null_stg_account_alerts_alert_id.dc874d5de8": ["model.customer_360.stg_account_alerts"], "test.customer_360.not_null_executive_customer_dashboard_dashboard_section.9e476ee539": ["model.customer_360.executive_customer_dashboard"], "test.customer_360.accepted_values_executive_customer_dashboard_dashboard_section__EXECUTIVE_SUMMARY__SEGMENT_PERFORMANCE.64a13a820f": ["model.customer_360.executive_customer_dashboard"], "test.customer_360.not_null_executive_customer_dashboard_total_customers.61c16a4ef0": ["model.customer_360.executive_customer_dashboard"], "test.customer_360.accepted_values_executive_customer_dashboard_portfolio_health__STRONG_VALUE_MIX__BALANCED_PORTFOLIO__GROWTH_OPPORTUNITY.6820918840": ["model.customer_360.executive_customer_dashboard"], "test.customer_360.accepted_values_executive_customer_dashboard_digital_maturity__DIGITAL_LEADER__DIGITAL_PROGRESSIVE__DIGITAL_OPPORTUNITY.adc26321fe": ["model.customer_360.executive_customer_dashboard"], "test.customer_360.not_null_financial_performance_summary_total_customers.5a254908de": ["model.customer_360.financial_performance_summary"], "test.customer_360.not_null_financial_performance_summary_total_aum.a3330056d7": ["model.customer_360.financial_performance_summary"], "test.customer_360.accepted_values_financial_performance_summary_portfolio_yield_assessment__HIGH_YIELD_PORTFOLIO__STRONG_YIELD__MODERATE_YIELD__YIELD_IMPROVEMENT_NEEDED.9bf7a9d784": ["model.customer_360.financial_performance_summary"], "test.customer_360.not_null_risk_management_dashboard_dashboard_section.e9949c930b": ["model.customer_360.risk_management_dashboard"], "test.customer_360.accepted_values_risk_management_dashboard_dashboard_section__RISK_OVERVIEW__WEALTH_TIER_RISK_BREAKDOWN.d4b443037b": ["model.customer_360.risk_management_dashboard"], "test.customer_360.not_null_risk_management_dashboard_total_customers.f0dae1992c": ["model.customer_360.risk_management_dashboard"], "test.customer_360.accepted_values_risk_management_dashboard_portfolio_risk_status__CRITICAL_RISK_PORTFOLIO__HIGH_RISK_CONCENTRATION__COMPLIANCE_ISSUES__RISK_DETERIORATION__MANAGED_RISK_PROFILE.12838d5721": ["model.customer_360.risk_management_dashboard"], "test.customer_360.accepted_values_risk_management_dashboard_compliance_health_status__COMPLIANCE_CRISIS__COMPLIANCE_ATTENTION_NEEDED__COMPLIANCE_MONITORING_REQUIRED__COMPLIANCE_HEALTHY.8c1932fcae": ["model.customer_360.risk_management_dashboard"], "test.customer_360.accepted_values_risk_management_dashboard_recommended_action__IMMEDIATE_RISK_COMMITTEE_MEETING__COMPLIANCE_REMEDIATION_PLAN__FRAUD_INVESTIGATION_SURGE__HIGH_VALUE_CUSTOMER_REVIEW__STANDARD_RISK_MONITORING.4b09296707": ["model.customer_360.risk_management_dashboard"], "test.customer_360.not_null_customer_segmentation_analysis_analysis_section.71c4545a0f": ["model.customer_360.customer_segmentation_analysis"], "test.customer_360.accepted_values_customer_segmentation_analysis_analysis_section__SEGMENT_OVERVIEW__LIFECYCLE_ANALYSIS.96a959b417": ["model.customer_360.customer_segmentation_analysis"], "test.customer_360.accepted_values_customer_segmentation_analysis_segment_strategic_importance__PRIMARY_VALUE_DRIVER__MAJOR_CONTRIBUTOR__SIGNIFICANT_SEGMENT__NICHE_SEGMENT__LIFECYCLE_STAGE.cd65ef5b62": ["model.customer_360.customer_segmentation_analysis"], "test.customer_360.accepted_values_customer_segmentation_analysis_marketing_effectiveness__HIGHLY_MARKETABLE__MODERATELY_MARKETABLE__SELECTIVE_MARKETING__MARKETING_CHALLENGE.df3216ee7b": ["model.customer_360.customer_segmentation_analysis"], "test.customer_360.accepted_values_customer_segmentation_analysis_digital_strategy_classification__DIGITAL_NATIVE__DIGITAL_ADOPTER__DIGITAL_OPPORTUNITY__TRADITIONAL_PREFERRED.39b4308baa": ["model.customer_360.customer_segmentation_analysis"], "test.customer_360.not_null_product_performance_analytics_analytics_section.196c586494": ["model.customer_360.product_performance_analytics"], "test.customer_360.accepted_values_product_performance_analytics_analytics_section__PRODUCT_PORTFOLIO_OVERVIEW__SEGMENT_PRODUCT_PERFORMANCE__NEXT_BEST_PRODUCT_OPPORTUNITIES.e9807c2d7c": ["model.customer_360.product_performance_analytics"], "test.customer_360.accepted_values_product_performance_analytics_cross_sell_performance_status__EXCELLENT_CROSS_SELL_PERFORMANCE__STRONG_CROSS_SELL_PERFORMANCE__MODERATE_CROSS_SELL_PERFORMANCE__CROSS_SELL_IMPROVEMENT_NEEDED__NEXT_BEST_PRODUCT.9ee7715bee": ["model.customer_360.product_performance_analytics"], "test.customer_360.accepted_values_product_performance_analytics_digital_product_maturity__DIGITAL_PRODUCT_LEADER__DIGITAL_PROGRESSIVE__DIGITAL_DEVELOPING__DIGITAL_TRANSFORMATION_NEEDED.4af581acd7": ["model.customer_360.product_performance_analytics"], "test.customer_360.accepted_values_product_performance_analytics_recommended_product_strategy__AGGRESSIVE_CROSS_SELL_CAMPAIGN__WEALTH_PRODUCT_FOCUS__DIGITAL_PRODUCT_ENHANCEMENT__PRODUCT_BUNDLING_STRATEGY__OPTIMIZE_CURRENT_PORTFOLIO.bf7cd9e1a6": ["model.customer_360.product_performance_analytics"], "test.customer_360.not_null_int_customer_profile_customer_id.43eecb28af": ["model.customer_360.int_customer_profile"], "test.customer_360.unique_int_customer_profile_customer_id.e7331e83b5": ["model.customer_360.int_customer_profile"], "test.customer_360.not_null_int_customer_profile_full_name.6e928c57ff": ["model.customer_360.int_customer_profile"], "test.customer_360.accepted_values_int_customer_profile_engagement_level__HIGHLY_ENGAGED__MODERATELY_ENGAGED__LIGHTLY_ENGAGED__MINIMAL_ENGAGEMENT.300fcbc429": ["model.customer_360.int_customer_profile"], "test.customer_360.accepted_values_int_customer_profile_digital_preference__MOBILE_PREFERRED__WEB_PREFERRED__MULTI_CHANNEL__NON_DIGITAL.8e07d3a36f": ["model.customer_360.int_customer_profile"], "test.customer_360.not_null_int_customer_profile_at_risk_customer.cb82b9183d": ["model.customer_360.int_customer_profile"], "test.customer_360.not_null_int_customer_360_master_customer_id.2db315d47c": ["model.customer_360.int_customer_360_master"], "test.customer_360.unique_int_customer_360_master_customer_id.1ef8c74659": ["model.customer_360.int_customer_360_master"], "test.customer_360.not_null_int_customer_360_master_customer_lifetime_value_score.59abc397bb": ["model.customer_360.int_customer_360_master"], "test.customer_360.not_null_int_customer_360_master_churn_risk_score.251e2a4d6d": ["model.customer_360.int_customer_360_master"], "test.customer_360.accepted_values_int_customer_360_master_executive_customer_tier__ULTRA_HIGH_NET_WORTH__HIGH_NET_WORTH__PLATINUM_CUSTOMER__GOLD_CUSTOMER__SILVER_CUSTOMER__BRONZE_CUSTOMER.cd269b07a8": ["model.customer_360.int_customer_360_master"], "test.customer_360.not_null_int_customer_360_master_next_best_action.7de42dfb1e": ["model.customer_360.int_customer_360_master"], "test.customer_360.not_null_int_customer_retention_analytics_customer_id.8c8fd202ae": ["model.customer_360.int_customer_retention_analytics"], "test.customer_360.unique_int_customer_retention_analytics_customer_id.f62b41c0e0": ["model.customer_360.int_customer_retention_analytics"], "test.customer_360.not_null_int_customer_retention_analytics_churn_risk_score.ade9154dcd": ["model.customer_360.int_customer_retention_analytics"], "test.customer_360.not_null_int_customer_retention_analytics_retention_opportunity_score.87bbcb25cf": ["model.customer_360.int_customer_retention_analytics"], "test.customer_360.accepted_values_int_customer_retention_analytics_retention_lifecycle_stage__CHURNED__HIGH_CHURN_RISK__DISSATISFIED__DISENGAGED__COMPLAINT_PATTERN__SUCCESSFULLY_RETAINED__LOYAL__STABLE.bbc1e63adc": ["model.customer_360.int_customer_retention_analytics"], "test.customer_360.accepted_values_int_customer_retention_analytics_retention_priority__WIN_BACK__CRITICAL__HIGH__MEDIUM__LOW__MONITOR.0674658e8e": ["model.customer_360.int_customer_retention_analytics"], "test.customer_360.not_null_int_customer_financial_summary_customer_id.597254ced9": ["model.customer_360.int_customer_financial_summary"], "test.customer_360.unique_int_customer_financial_summary_customer_id.c179ab9577": ["model.customer_360.int_customer_financial_summary"], "test.customer_360.not_null_int_customer_financial_summary_total_relationship_value.1e3b9d217f": ["model.customer_360.int_customer_financial_summary"], "test.customer_360.not_null_int_customer_financial_summary_net_worth_with_bank.8ff5a4bcf5": ["model.customer_360.int_customer_financial_summary"], "test.customer_360.not_null_int_customer_financial_summary_product_penetration_score.e43c8b0969": ["model.customer_360.int_customer_financial_summary"], "test.customer_360.accepted_values_int_customer_financial_summary_wealth_tier__PRIVATE_BANKING__WEALTH_MANAGEMENT__PREFERRED__SELECT__STANDARD.31846be754": ["model.customer_360.int_customer_financial_summary"], "test.customer_360.accepted_values_int_customer_financial_summary_financial_risk_level__HIGH_RISK__MEDIUM_RISK__LOW_RISK.1e7cd9ab71": ["model.customer_360.int_customer_financial_summary"], "test.customer_360.not_null_int_transaction_analytics_account_id.a6aa75c445": ["model.customer_360.int_transaction_analytics"], "test.customer_360.unique_int_transaction_analytics_account_id.e7fd42642d": ["model.customer_360.int_transaction_analytics"], "test.customer_360.not_null_int_transaction_analytics_total_transaction_volume.d69fd0b417": ["model.customer_360.int_transaction_analytics"], "test.customer_360.not_null_int_transaction_analytics_net_cash_flow.a46ebce986": ["model.customer_360.int_transaction_analytics"], "test.customer_360.not_null_int_transaction_analytics_digital_transaction_percentage.f7c36e9a33": ["model.customer_360.int_transaction_analytics"], "test.customer_360.accepted_values_int_transaction_analytics_activity_level__VERY_ACTIVE__ACTIVE__MODERATE__LIGHT__MINIMAL.608a7926e5": ["model.customer_360.int_transaction_analytics"], "test.customer_360.accepted_values_int_transaction_analytics_spending_category__HIGH_SPENDER__MEDIUM_SPENDER__MODERATE_SPENDER__LOW_SPENDER.da01838831": ["model.customer_360.int_transaction_analytics"], "test.customer_360.not_null_int_account_performance_dashboard_account_id.08b381f2c5": ["model.customer_360.int_account_performance_dashboard"], "test.customer_360.unique_int_account_performance_dashboard_account_id.989b83e73b": ["model.customer_360.int_account_performance_dashboard"], "test.customer_360.not_null_int_account_performance_dashboard_customer_id.60c125118b": ["model.customer_360.int_account_performance_dashboard"], "test.customer_360.not_null_int_account_performance_dashboard_account_profitability_score.37af99624c": ["model.customer_360.int_account_performance_dashboard"], "test.customer_360.not_null_int_account_performance_dashboard_account_health_score.e2fd76c341": ["model.customer_360.int_account_performance_dashboard"], "test.customer_360.accepted_values_int_account_performance_dashboard_account_risk_flag__IMMEDIATE_REVIEW_REQUIRED__ENHANCED_MONITORING__CUSTOMER_AT_RISK__DORMANT_ACCOUNT__NEGATIVE_BALANCE__NORMAL.2ec4526af6": ["model.customer_360.int_account_performance_dashboard"], "test.customer_360.accepted_values_int_account_performance_dashboard_account_service_tier__PRIVATE_BANKING__WEALTH_MANAGEMENT__PREMIUM__PREFERRED__ACTIVE__STANDARD.d4209fe3d4": ["model.customer_360.int_account_performance_dashboard"], "test.customer_360.not_null_int_comprehensive_risk_profile_customer_id.3fabbe3c3c": ["model.customer_360.int_comprehensive_risk_profile"], "test.customer_360.unique_int_comprehensive_risk_profile_customer_id.29fd957e69": ["model.customer_360.int_comprehensive_risk_profile"], "test.customer_360.not_null_int_comprehensive_risk_profile_composite_risk_score.fa558d26b5": ["model.customer_360.int_comprehensive_risk_profile"], "test.customer_360.accepted_values_int_comprehensive_risk_profile_overall_risk_level__CRITICAL_RISK__HIGH_RISK__ELEVATED_RISK__MODERATE_RISK__LOW_RISK.d1c7910b6f": ["model.customer_360.int_comprehensive_risk_profile"], "test.customer_360.accepted_values_int_comprehensive_risk_profile_compliance_status__NON_COMPLIANT__REVIEW_REQUIRED__COMPLIANT__PENDING_VERIFICATION.007f3a1488": ["model.customer_360.int_comprehensive_risk_profile"], "test.customer_360.not_null_int_comprehensive_risk_profile_requires_enhanced_monitoring.e084253125": ["model.customer_360.int_comprehensive_risk_profile"], "test.customer_360.not_null_int_comprehensive_risk_profile_requires_immediate_review.bedeea5a0d": ["model.customer_360.int_comprehensive_risk_profile"], "test.customer_360.accepted_values_int_comprehensive_risk_profile_risk_trend__VOLATILE__DETERIORATING__UNSTABLE__STABLE.96f61c242b": ["model.customer_360.int_comprehensive_risk_profile"], "test.customer_360.not_null_int_product_penetration_analysis_customer_id.5f30d340cd": ["model.customer_360.int_product_penetration_analysis"], "test.customer_360.unique_int_product_penetration_analysis_customer_id.b3f926ca57": ["model.customer_360.int_product_penetration_analysis"], "test.customer_360.not_null_int_product_penetration_analysis_product_penetration_score.c7f32f2beb": ["model.customer_360.int_product_penetration_analysis"], "test.customer_360.accepted_values_int_product_penetration_analysis_digital_adoption_level__DIGITAL_NATIVE__DIGITAL_ADOPTER__DIGITAL_BEGINNER__NON_DIGITAL.f2a4124904": ["model.customer_360.int_product_penetration_analysis"], "test.customer_360.accepted_values_int_product_penetration_analysis_marketing_responsiveness__UNTARGETED__HIGHLY_RESPONSIVE__MODERATELY_RESPONSIVE__LIGHTLY_RESPONSIVE__UNRESPONSIVE.63d13a1c1d": ["model.customer_360.int_product_penetration_analysis"], "test.customer_360.not_null_int_product_penetration_analysis_cross_sell_opportunity_score.dfd228e7c3": ["model.customer_360.int_product_penetration_analysis"], "test.customer_360.not_null_int_product_penetration_analysis_product_stickiness_score.b257e1760b": ["model.customer_360.int_product_penetration_analysis"], "test.customer_360.not_null_int_channel_effectiveness_customer_id.1e4914581a": ["model.customer_360.int_channel_effectiveness"], "test.customer_360.unique_int_channel_effectiveness_customer_id.a362e2963f": ["model.customer_360.int_channel_effectiveness"], "test.customer_360.not_null_int_channel_effectiveness_digital_adoption_score.017c75b92b": ["model.customer_360.int_channel_effectiveness"], "test.customer_360.not_null_int_channel_effectiveness_channel_diversity_score.79c0c44702": ["model.customer_360.int_channel_effectiveness"], "test.customer_360.accepted_values_int_channel_effectiveness_channel_preference__DIGITAL_ONLY__DIGITAL_FIRST__DIGITAL_PREFERRED__PHYSICAL_PREFERRED__OMNI_CHANNEL__PHYSICAL_ONLY__MINIMAL_USAGE.b01950ca6b": ["model.customer_360.int_channel_effectiveness"], "test.customer_360.accepted_values_int_channel_effectiveness_channel_engagement_level__VERY_HIGH__HIGH__MEDIUM__LOW__MINIMAL__NONE.80e3c7469c": ["model.customer_360.int_channel_effectiveness"], "test.customer_360.accepted_values_int_channel_effectiveness_digital_session_quality__HIGH_QUALITY__MEDIUM_QUALITY__LOW_QUALITY__BRIEF_SESSIONS__NO_SESSIONS.ff91ca2327": ["model.customer_360.int_channel_effectiveness"]}, "child_map": {"model.customer_360.stg_customers": ["model.customer_360.int_customer_profile", "test.customer_360.not_null_stg_customers_credit_score.1a2b785b97", "test.customer_360.not_null_stg_customers_customer_id.e2cfb1f9aa", "test.customer_360.not_null_stg_customers_customer_number.db9a067778", "test.customer_360.not_null_stg_customers_email_address.4ac431a034", "test.customer_360.not_null_stg_customers_first_name.57f99cf033", "test.customer_360.not_null_stg_customers_last_name.fa1ab1e186", "test.customer_360.unique_stg_customers_customer_id.c7614daada", "test.customer_360.unique_stg_customers_customer_number.1c7b8445eb"], "model.customer_360.stg_transactions": ["model.customer_360.int_transaction_analytics", "test.customer_360.not_null_stg_transactions_account_id.a7d212da1d", "test.customer_360.not_null_stg_transactions_transaction_id.1d00a8e2e4", "test.customer_360.unique_stg_transactions_transaction_id.ee9a78a396"], "model.customer_360.stg_retention_events": ["model.customer_360.int_customer_retention_analytics", "test.customer_360.not_null_stg_retention_events_event_id.038395d757", "test.customer_360.unique_stg_retention_events_event_id.245d36dcaa"], "model.customer_360.stg_withdrawals": ["model.customer_360.int_transaction_analytics", "test.customer_360.not_null_stg_withdrawals_withdrawal_id.ffb18dca4f", "test.customer_360.unique_stg_withdrawals_withdrawal_id.92674c3b97"], "model.customer_360.stg_fees": ["model.customer_360.int_transaction_analytics", "test.customer_360.not_null_stg_fees_fee_id.a46960ff2f", "test.customer_360.unique_stg_fees_fee_id.81f1c62ec9"], "model.customer_360.stg_deposits": ["model.customer_360.int_transaction_analytics", "test.customer_360.not_null_stg_deposits_deposit_id.b6122931ab", "test.customer_360.unique_stg_deposits_deposit_id.e141493b89"], "model.customer_360.stg_customer_phones": ["model.customer_360.int_customer_profile", "test.customer_360.not_null_stg_customer_phones_customer_id.6e3e0955c1", "test.customer_360.not_null_stg_customer_phones_phone_id.f20761ea7b", "test.customer_360.unique_stg_customer_phones_phone_id.799d1b6bc9"], "model.customer_360.stg_digital_activity": ["model.customer_360.int_channel_effectiveness", "model.customer_360.int_customer_profile", "model.customer_360.int_customer_retention_analytics", "test.customer_360.not_null_stg_digital_activity_activity_id.81e37ba655", "test.customer_360.unique_stg_digital_activity_activity_id.6f0e8f4cc4"], "model.customer_360.stg_loans": ["model.customer_360.int_customer_financial_summary", "test.customer_360.not_null_stg_loans_loan_id.b77c69982c", "test.customer_360.unique_stg_loans_loan_id.be67636b63"], "model.customer_360.stg_accounts": ["model.customer_360.int_account_performance_dashboard", "model.customer_360.int_comprehensive_risk_profile", "model.customer_360.int_customer_360_master", "model.customer_360.int_customer_financial_summary", "test.customer_360.accepted_values_stg_accounts_account_status__ACTIVE__CLOSED__DORMANT__RESTRICTED.c71cafef9c", "test.customer_360.not_null_stg_accounts_account_id.182dfbc108", "test.customer_360.not_null_stg_accounts_customer_id.0b54f014a3", "test.customer_360.not_null_stg_accounts_product_type.58694c1112", "test.customer_360.unique_stg_accounts_account_id.cdf6252c79"], "model.customer_360.stg_risk_assessments": ["model.customer_360.int_comprehensive_risk_profile", "test.customer_360.not_null_stg_risk_assessments_assessment_id.e8dcbe5ef6", "test.customer_360.unique_stg_risk_assessments_assessment_id.301f1fb1b6"], "model.customer_360.stg_cards": ["model.customer_360.int_customer_financial_summary", "test.customer_360.not_null_stg_cards_card_id.9f9047ca6a", "test.customer_360.unique_stg_cards_card_id.f326b4cb4d"], "model.customer_360.stg_customer_addresses": ["model.customer_360.int_customer_profile", "test.customer_360.not_null_stg_customer_addresses_address_id.012a63311d", "test.customer_360.not_null_stg_customer_addresses_customer_id.08250e83d9", "test.customer_360.unique_stg_customer_addresses_address_id.3dc38ac7e4"], "model.customer_360.stg_credit_scores": ["model.customer_360.int_comprehensive_risk_profile", "test.customer_360.not_null_stg_credit_scores_credit_score.7796f78aa8", "test.customer_360.not_null_stg_credit_scores_score_id.422dc7f911", "test.customer_360.unique_stg_credit_scores_score_id.559f99da3b"], "model.customer_360.stg_product_usage": ["model.customer_360.int_product_penetration_analysis", "test.customer_360.not_null_stg_product_usage_usage_id.be0d138046", "test.customer_360.unique_stg_product_usage_usage_id.8cfe23816f"], "model.customer_360.stg_payments": ["model.customer_360.int_transaction_analytics", "test.customer_360.not_null_stg_payments_payment_id.c19cc50075", "test.customer_360.unique_stg_payments_payment_id.3744510712"], "model.customer_360.stg_marketing_campaigns": ["model.customer_360.int_channel_effectiveness", "model.customer_360.int_product_penetration_analysis", "test.customer_360.not_null_stg_marketing_campaigns_campaign_response_id.45766a5749", "test.customer_360.unique_stg_marketing_campaigns_campaign_response_id.b987efe876"], "model.customer_360.stg_transfers": ["model.customer_360.int_transaction_analytics", "test.customer_360.not_null_stg_transfers_transfer_id.622a15efdc", "test.customer_360.unique_stg_transfers_transfer_id.f991b9cc9e"], "model.customer_360.stg_compliance_records": ["model.customer_360.int_comprehensive_risk_profile", "test.customer_360.not_null_stg_compliance_records_compliance_id.3153c76fca", "test.customer_360.unique_stg_compliance_records_compliance_id.c7420a7ff0"], "model.customer_360.stg_account_alerts": ["model.customer_360.int_comprehensive_risk_profile", "test.customer_360.not_null_stg_account_alerts_alert_id.dc874d5de8", "test.customer_360.unique_stg_account_alerts_alert_id.8a82f61d9e"], "model.customer_360.stg_channel_usage": ["model.customer_360.int_channel_effectiveness", "model.customer_360.int_product_penetration_analysis", "test.customer_360.not_null_stg_channel_usage_usage_id.37b9a2f3ad", "test.customer_360.unique_stg_channel_usage_usage_id.e3fbcbb409"], "model.customer_360.stg_customer_segments": ["model.customer_360.int_customer_profile", "model.customer_360.int_product_penetration_analysis", "test.customer_360.not_null_stg_customer_segments_segment_id.fbfbf2d859", "test.customer_360.unique_stg_customer_segments_segment_id.5a59ccd216"], "model.customer_360.stg_investments": ["model.customer_360.int_customer_financial_summary", "test.customer_360.not_null_stg_investments_holding_id.9f33621334", "test.customer_360.unique_stg_investments_holding_id.fc8fb05352"], "model.customer_360.stg_fraud_alerts": ["model.customer_360.int_comprehensive_risk_profile", "test.customer_360.not_null_stg_fraud_alerts_alert_id.d3eab05de4", "test.customer_360.unique_stg_fraud_alerts_alert_id.e84886bf88"], "model.customer_360.stg_insurance_policies": ["model.customer_360.int_customer_financial_summary", "test.customer_360.not_null_stg_insurance_policies_policy_id.557b8b16a2", "test.customer_360.unique_stg_insurance_policies_policy_id.3fb13c969f"], "model.customer_360.stg_account_balances": ["model.customer_360.int_account_performance_dashboard", "model.customer_360.int_customer_financial_summary", "test.customer_360.not_null_stg_account_balances_balance_id.3f2784ad64", "test.customer_360.unique_stg_account_balances_balance_id.2ea52af5ab"], "model.customer_360.stg_interest_accruals": ["test.customer_360.not_null_stg_interest_accruals_accrual_id.0816e5042a", "test.customer_360.unique_stg_interest_accruals_accrual_id.0501254279"], "model.customer_360.stg_customer_interactions": ["model.customer_360.int_channel_effectiveness", "model.customer_360.int_customer_profile", "model.customer_360.int_customer_retention_analytics", "test.customer_360.not_null_stg_customer_interactions_interaction_id.06068526a4", "test.customer_360.unique_stg_customer_interactions_interaction_id.0376adc910"], "model.customer_360.stg_kyc_records": ["model.customer_360.int_comprehensive_risk_profile", "test.customer_360.not_null_stg_kyc_records_kyc_id.93e1addfcf", "test.customer_360.unique_stg_kyc_records_kyc_id.1349285655"], "model.customer_360.product_performance_analytics": ["test.customer_360.accepted_values_product_performance_analytics_analytics_section__PRODUCT_PORTFOLIO_OVERVIEW__SEGMENT_PRODUCT_PERFORMANCE__NEXT_BEST_PRODUCT_OPPORTUNITIES.e9807c2d7c", "test.customer_360.accepted_values_product_performance_analytics_cross_sell_performance_status__EXCELLENT_CROSS_SELL_PERFORMANCE__STRONG_CROSS_SELL_PERFORMANCE__MODERATE_CROSS_SELL_PERFORMANCE__CROSS_SELL_IMPROVEMENT_NEEDED__NEXT_BEST_PRODUCT.9ee7715bee", "test.customer_360.accepted_values_product_performance_analytics_digital_product_maturity__DIGITAL_PRODUCT_LEADER__DIGITAL_PROGRESSIVE__DIGITAL_DEVELOPING__DIGITAL_TRANSFORMATION_NEEDED.4af581acd7", "test.customer_360.accepted_values_product_performance_analytics_recommended_product_strategy__AGGRESSIVE_CROSS_SELL_CAMPAIGN__WEALTH_PRODUCT_FOCUS__DIGITAL_PRODUCT_ENHANCEMENT__PRODUCT_BUNDLING_STRATEGY__OPTIMIZE_CURRENT_PORTFOLIO.bf7cd9e1a6", "test.customer_360.not_null_product_performance_analytics_analytics_section.196c586494"], "model.customer_360.risk_management_dashboard": ["test.customer_360.accepted_values_risk_management_dashboard_compliance_health_status__COMPLIANCE_CRISIS__COMPLIANCE_ATTENTION_NEEDED__COMPLIANCE_MONITORING_REQUIRED__COMPLIANCE_HEALTHY.8c1932fcae", "test.customer_360.accepted_values_risk_management_dashboard_dashboard_section__RISK_OVERVIEW__WEALTH_TIER_RISK_BREAKDOWN.d4b443037b", "test.customer_360.accepted_values_risk_management_dashboard_portfolio_risk_status__CRITICAL_RISK_PORTFOLIO__HIGH_RISK_CONCENTRATION__COMPLIANCE_ISSUES__RISK_DETERIORATION__MANAGED_RISK_PROFILE.12838d5721", "test.customer_360.accepted_values_risk_management_dashboard_recommended_action__IMMEDIATE_RISK_COMMITTEE_MEETING__COMPLIANCE_REMEDIATION_PLAN__FRAUD_INVESTIGATION_SURGE__HIGH_VALUE_CUSTOMER_REVIEW__STANDARD_RISK_MONITORING.4b09296707", "test.customer_360.not_null_risk_management_dashboard_dashboard_section.e9949c930b", "test.customer_360.not_null_risk_management_dashboard_total_customers.f0dae1992c"], "model.customer_360.customer_segmentation_analysis": ["test.customer_360.accepted_values_customer_segmentation_analysis_analysis_section__SEGMENT_OVERVIEW__LIFECYCLE_ANALYSIS.96a959b417", "test.customer_360.accepted_values_customer_segmentation_analysis_digital_strategy_classification__DIGITAL_NATIVE__DIGITAL_ADOPTER__DIGITAL_OPPORTUNITY__TRADITIONAL_PREFERRED.39b4308baa", "test.customer_360.accepted_values_customer_segmentation_analysis_marketing_effectiveness__HIGHLY_MARKETABLE__MODERATELY_MARKETABLE__SELECTIVE_MARKETING__MARKETING_CHALLENGE.df3216ee7b", "test.customer_360.accepted_values_customer_segmentation_analysis_segment_strategic_importance__PRIMARY_VALUE_DRIVER__MAJOR_CONTRIBUTOR__SIGNIFICANT_SEGMENT__NICHE_SEGMENT__LIFECYCLE_STAGE.cd65ef5b62", "test.customer_360.not_null_customer_segmentation_analysis_analysis_section.71c4545a0f"], "model.customer_360.financial_performance_summary": ["test.customer_360.accepted_values_financial_performance_summary_portfolio_yield_assessment__HIGH_YIELD_PORTFOLIO__STRONG_YIELD__MODERATE_YIELD__YIELD_IMPROVEMENT_NEEDED.9bf7a9d784", "test.customer_360.not_null_financial_performance_summary_total_aum.a3330056d7", "test.customer_360.not_null_financial_performance_summary_total_customers.5a254908de"], "model.customer_360.executive_customer_dashboard": ["test.customer_360.accepted_values_executive_customer_dashboard_dashboard_section__EXECUTIVE_SUMMARY__SEGMENT_PERFORMANCE.64a13a820f", "test.customer_360.accepted_values_executive_customer_dashboard_digital_maturity__DIGITAL_LEADER__DIGITAL_PROGRESSIVE__DIGITAL_OPPORTUNITY.adc26321fe", "test.customer_360.accepted_values_executive_customer_dashboard_portfolio_health__STRONG_VALUE_MIX__BALANCED_PORTFOLIO__GROWTH_OPPORTUNITY.6820918840", "test.customer_360.not_null_executive_customer_dashboard_dashboard_section.9e476ee539", "test.customer_360.not_null_executive_customer_dashboard_total_customers.61c16a4ef0"], "model.customer_360.int_comprehensive_risk_profile": ["model.customer_360.customer_segmentation_analysis", "model.customer_360.executive_customer_dashboard", "model.customer_360.int_account_performance_dashboard", "model.customer_360.int_customer_360_master", "model.customer_360.int_customer_retention_analytics", "model.customer_360.risk_management_dashboard", "test.customer_360.accepted_values_int_comprehensive_risk_profile_compliance_status__NON_COMPLIANT__REVIEW_REQUIRED__COMPLIANT__PENDING_VERIFICATION.007f3a1488", "test.customer_360.accepted_values_int_comprehensive_risk_profile_overall_risk_level__CRITICAL_RISK__HIGH_RISK__ELEVATED_RISK__MODERATE_RISK__LOW_RISK.d1c7910b6f", "test.customer_360.accepted_values_int_comprehensive_risk_profile_risk_trend__VOLATILE__DETERIORATING__UNSTABLE__STABLE.96f61c242b", "test.customer_360.not_null_int_comprehensive_risk_profile_composite_risk_score.fa558d26b5", "test.customer_360.not_null_int_comprehensive_risk_profile_customer_id.3fabbe3c3c", "test.customer_360.not_null_int_comprehensive_risk_profile_requires_enhanced_monitoring.e084253125", "test.customer_360.not_null_int_comprehensive_risk_profile_requires_immediate_review.bedeea5a0d", "test.customer_360.unique_int_comprehensive_risk_profile_customer_id.29fd957e69"], "model.customer_360.int_transaction_analytics": ["model.customer_360.int_account_performance_dashboard", "model.customer_360.int_customer_360_master", "test.customer_360.accepted_values_int_transaction_analytics_activity_level__VERY_ACTIVE__ACTIVE__MODERATE__LIGHT__MINIMAL.608a7926e5", "test.customer_360.accepted_values_int_transaction_analytics_spending_category__HIGH_SPENDER__MEDIUM_SPENDER__MODERATE_SPENDER__LOW_SPENDER.da01838831", "test.customer_360.not_null_int_transaction_analytics_account_id.a6aa75c445", "test.customer_360.not_null_int_transaction_analytics_digital_transaction_percentage.f7c36e9a33", "test.customer_360.not_null_int_transaction_analytics_net_cash_flow.a46ebce986", "test.customer_360.not_null_int_transaction_analytics_total_transaction_volume.d69fd0b417", "test.customer_360.unique_int_transaction_analytics_account_id.e7fd42642d"], "model.customer_360.int_customer_financial_summary": ["model.customer_360.customer_segmentation_analysis", "model.customer_360.executive_customer_dashboard", "model.customer_360.financial_performance_summary", "model.customer_360.int_account_performance_dashboard", "model.customer_360.int_customer_360_master", "model.customer_360.product_performance_analytics", "model.customer_360.risk_management_dashboard", "test.customer_360.accepted_values_int_customer_financial_summary_financial_risk_level__HIGH_RISK__MEDIUM_RISK__LOW_RISK.1e7cd9ab71", "test.customer_360.accepted_values_int_customer_financial_summary_wealth_tier__PRIVATE_BANKING__WEALTH_MANAGEMENT__PREFERRED__SELECT__STANDARD.31846be754", "test.customer_360.not_null_int_customer_financial_summary_customer_id.597254ced9", "test.customer_360.not_null_int_customer_financial_summary_net_worth_with_bank.8ff5a4bcf5", "test.customer_360.not_null_int_customer_financial_summary_product_penetration_score.e43c8b0969", "test.customer_360.not_null_int_customer_financial_summary_total_relationship_value.1e3b9d217f", "test.customer_360.unique_int_customer_financial_summary_customer_id.c179ab9577"], "model.customer_360.int_account_performance_dashboard": ["model.customer_360.financial_performance_summary", "model.customer_360.product_performance_analytics", "test.customer_360.accepted_values_int_account_performance_dashboard_account_risk_flag__IMMEDIATE_REVIEW_REQUIRED__ENHANCED_MONITORING__CUSTOMER_AT_RISK__DORMANT_ACCOUNT__NEGATIVE_BALANCE__NORMAL.2ec4526af6", "test.customer_360.accepted_values_int_account_performance_dashboard_account_service_tier__PRIVATE_BANKING__WEALTH_MANAGEMENT__PREMIUM__PREFERRED__ACTIVE__STANDARD.d4209fe3d4", "test.customer_360.not_null_int_account_performance_dashboard_account_health_score.e2fd76c341", "test.customer_360.not_null_int_account_performance_dashboard_account_id.08b381f2c5", "test.customer_360.not_null_int_account_performance_dashboard_account_profitability_score.37af99624c", "test.customer_360.not_null_int_account_performance_dashboard_customer_id.60c125118b", "test.customer_360.unique_int_account_performance_dashboard_account_id.989b83e73b"], "model.customer_360.int_product_penetration_analysis": ["model.customer_360.customer_segmentation_analysis", "model.customer_360.executive_customer_dashboard", "model.customer_360.financial_performance_summary", "model.customer_360.int_account_performance_dashboard", "model.customer_360.product_performance_analytics", "test.customer_360.accepted_values_int_product_penetration_analysis_digital_adoption_level__DIGITAL_NATIVE__DIGITAL_ADOPTER__DIGITAL_BEGINNER__NON_DIGITAL.f2a4124904", "test.customer_360.accepted_values_int_product_penetration_analysis_marketing_responsiveness__UNTARGETED__HIGHLY_RESPONSIVE__MODERATELY_RESPONSIVE__LIGHTLY_RESPONSIVE__UNRESPONSIVE.63d13a1c1d", "test.customer_360.not_null_int_product_penetration_analysis_cross_sell_opportunity_score.dfd228e7c3", "test.customer_360.not_null_int_product_penetration_analysis_customer_id.5f30d340cd", "test.customer_360.not_null_int_product_penetration_analysis_product_penetration_score.c7f32f2beb", "test.customer_360.not_null_int_product_penetration_analysis_product_stickiness_score.b257e1760b", "test.customer_360.unique_int_product_penetration_analysis_customer_id.b3f926ca57"], "model.customer_360.int_channel_effectiveness": ["model.customer_360.customer_segmentation_analysis", "model.customer_360.executive_customer_dashboard", "model.customer_360.product_performance_analytics", "test.customer_360.accepted_values_int_channel_effectiveness_channel_engagement_level__VERY_HIGH__HIGH__MEDIUM__LOW__MINIMAL__NONE.80e3c7469c", "test.customer_360.accepted_values_int_channel_effectiveness_channel_preference__DIGITAL_ONLY__DIGITAL_FIRST__DIGITAL_PREFERRED__PHYSICAL_PREFERRED__OMNI_CHANNEL__PHYSICAL_ONLY__MINIMAL_USAGE.b01950ca6b", "test.customer_360.accepted_values_int_channel_effectiveness_digital_session_quality__HIGH_QUALITY__MEDIUM_QUALITY__LOW_QUALITY__BRIEF_SESSIONS__NO_SESSIONS.ff91ca2327", "test.customer_360.not_null_int_channel_effectiveness_channel_diversity_score.79c0c44702", "test.customer_360.not_null_int_channel_effectiveness_customer_id.1e4914581a", "test.customer_360.not_null_int_channel_effectiveness_digital_adoption_score.017c75b92b", "test.customer_360.unique_int_channel_effectiveness_customer_id.a362e2963f"], "model.customer_360.int_customer_360_master": ["test.customer_360.accepted_values_int_customer_360_master_executive_customer_tier__ULTRA_HIGH_NET_WORTH__HIGH_NET_WORTH__PLATINUM_CUSTOMER__GOLD_CUSTOMER__SILVER_CUSTOMER__BRONZE_CUSTOMER.cd269b07a8", "test.customer_360.not_null_int_customer_360_master_churn_risk_score.251e2a4d6d", "test.customer_360.not_null_int_customer_360_master_customer_id.2db315d47c", "test.customer_360.not_null_int_customer_360_master_customer_lifetime_value_score.59abc397bb", "test.customer_360.not_null_int_customer_360_master_next_best_action.7de42dfb1e", "test.customer_360.unique_int_customer_360_master_customer_id.1ef8c74659"], "model.customer_360.int_customer_retention_analytics": ["model.customer_360.customer_segmentation_analysis", "model.customer_360.executive_customer_dashboard", "model.customer_360.product_performance_analytics", "model.customer_360.risk_management_dashboard", "test.customer_360.accepted_values_int_customer_retention_analytics_retention_lifecycle_stage__CHURNED__HIGH_CHURN_RISK__DISSATISFIED__DISENGAGED__COMPLAINT_PATTERN__SUCCESSFULLY_RETAINED__LOYAL__STABLE.bbc1e63adc", "test.customer_360.accepted_values_int_customer_retention_analytics_retention_priority__WIN_BACK__CRITICAL__HIGH__MEDIUM__LOW__MONITOR.0674658e8e", "test.customer_360.not_null_int_customer_retention_analytics_churn_risk_score.ade9154dcd", "test.customer_360.not_null_int_customer_retention_analytics_customer_id.8c8fd202ae", "test.customer_360.not_null_int_customer_retention_analytics_retention_opportunity_score.87bbcb25cf", "test.customer_360.unique_int_customer_retention_analytics_customer_id.f62b41c0e0"], "model.customer_360.int_customer_profile": ["model.customer_360.customer_segmentation_analysis", "model.customer_360.executive_customer_dashboard", "model.customer_360.financial_performance_summary", "model.customer_360.int_account_performance_dashboard", "model.customer_360.int_customer_360_master", "model.customer_360.int_customer_retention_analytics", "model.customer_360.product_performance_analytics", "model.customer_360.risk_management_dashboard", "test.customer_360.accepted_values_int_customer_profile_digital_preference__MOBILE_PREFERRED__WEB_PREFERRED__MULTI_CHANNEL__NON_DIGITAL.8e07d3a36f", "test.customer_360.accepted_values_int_customer_profile_engagement_level__HIGHLY_ENGAGED__MODERATELY_ENGAGED__LIGHTLY_ENGAGED__MINIMAL_ENGAGEMENT.300fcbc429", "test.customer_360.not_null_int_customer_profile_at_risk_customer.cb82b9183d", "test.customer_360.not_null_int_customer_profile_customer_id.43eecb28af", "test.customer_360.not_null_int_customer_profile_full_name.6e928c57ff", "test.customer_360.unique_int_customer_profile_customer_id.e7331e83b5"], "seed.customer_360.product_catalog": ["model.customer_360.stg_accounts", "test.customer_360.not_null_product_catalog_product_id.bd2ef1ab99", "test.customer_360.unique_product_catalog_product_id.ad58ab5fa8"], "seed.customer_360.marketing_segments": ["test.customer_360.not_null_marketing_segments_segment_id.372e2c52f7", "test.customer_360.unique_marketing_segments_segment_id.2adf6d69dc"], "seed.customer_360.income_brackets": ["model.customer_360.stg_customers", "test.customer_360.not_null_income_brackets_bracket_id.e7289c2012", "test.customer_360.unique_income_brackets_bracket_id.89ac3ae36f"], "seed.customer_360.occupation_categories": ["test.customer_360.not_null_occupation_categories_occupation_id.049967923f", "test.customer_360.unique_occupation_categories_occupation_id.aedeeac927"], "seed.customer_360.compliance_rules": ["test.customer_360.not_null_compliance_rules_rule_id.4e9144f6fe", "test.customer_360.unique_compliance_rules_rule_id.2aab33c92d"], "seed.customer_360.holiday_calendars": ["test.customer_360.not_null_holiday_calendars_holiday_id.852d7e9b65", "test.customer_360.unique_holiday_calendars_holiday_id.a1383e3e34"], "seed.customer_360.interest_rate_tiers": ["test.customer_360.not_null_interest_rate_tiers_tier_id.ba54cf404c", "test.customer_360.unique_interest_rate_tiers_tier_id.a9a4ae154b"], "seed.customer_360.risk_categories": ["model.customer_360.stg_customers", "test.customer_360.not_null_risk_categories_risk_category_id.d514d55359", "test.customer_360.unique_risk_categories_risk_category_id.531cdefb99"], "seed.customer_360.economic_indicators": ["test.customer_360.not_null_economic_indicators_indicator_id.80b34f2a6a", "test.customer_360.unique_economic_indicators_indicator_id.154e0631da"], "seed.customer_360.geographic_regions": ["model.customer_360.stg_customer_addresses", "test.customer_360.not_null_geographic_regions_region_id.61a868b6cb", "test.customer_360.unique_geographic_regions_region_id.10d79a046e"], "seed.customer_360.currency_codes": ["test.customer_360.not_null_currency_codes_currency_code.d4e6f50f77", "test.customer_360.unique_currency_codes_currency_code.8f52dad5ba"], "seed.customer_360.lifecycle_stages": ["model.customer_360.stg_customers", "test.customer_360.not_null_lifecycle_stages_stage_id.1f2f4aa529", "test.customer_360.unique_lifecycle_stages_stage_id.9ba4ece453"], "seed.customer_360.fee_structures": ["test.customer_360.not_null_fee_structures_fee_id.24a91e8951", "test.customer_360.unique_fee_structures_fee_id.e372dadd52"], "seed.customer_360.age_cohorts": ["model.customer_360.stg_customers", "test.customer_360.not_null_age_cohorts_cohort_id.5b4cef4196", "test.customer_360.unique_age_cohorts_cohort_id.a482d4358e"], "seed.customer_360.country_risk_ratings": ["test.customer_360.not_null_country_risk_ratings_country_code.0beb7c4165", "test.customer_360.unique_country_risk_ratings_country_code.d44b893501"], "seed.customer_360.regulatory_requirements": ["test.customer_360.not_null_regulatory_requirements_requirement_id.f3e4797840", "test.customer_360.unique_regulatory_requirements_requirement_id.d4821a03e1"], "seed.customer_360.channel_definitions": ["test.customer_360.not_null_channel_definitions_channel_id.fbefcb67e3", "test.customer_360.unique_channel_definitions_channel_id.f81e4e5ee3"], "seed.customer_360.service_level_agreements": ["test.customer_360.not_null_service_level_agreements_sla_id.cc1721d182", "test.customer_360.unique_service_level_agreements_sla_id.38ff5304c7"], "seed.customer_360.credit_score_ranges": ["model.customer_360.stg_customers", "test.customer_360.not_null_credit_score_ranges_score_range_id.099d22141f", "test.customer_360.unique_credit_score_ranges_score_range_id.500ec5b348"], "seed.customer_360.transaction_types": ["test.customer_360.not_null_transaction_types_transaction_type_id.bf9afad10e", "test.customer_360.unique_transaction_types_transaction_type_id.bb14a1d457"], "test.customer_360.unique_product_catalog_product_id.ad58ab5fa8": [], "test.customer_360.not_null_product_catalog_product_id.bd2ef1ab99": [], "test.customer_360.unique_risk_categories_risk_category_id.531cdefb99": [], "test.customer_360.not_null_risk_categories_risk_category_id.d514d55359": [], "test.customer_360.unique_credit_score_ranges_score_range_id.500ec5b348": [], "test.customer_360.not_null_credit_score_ranges_score_range_id.099d22141f": [], "test.customer_360.unique_transaction_types_transaction_type_id.bb14a1d457": [], "test.customer_360.not_null_transaction_types_transaction_type_id.bf9afad10e": [], "test.customer_360.unique_channel_definitions_channel_id.f81e4e5ee3": [], "test.customer_360.not_null_channel_definitions_channel_id.fbefcb67e3": [], "test.customer_360.unique_geographic_regions_region_id.10d79a046e": [], "test.customer_360.not_null_geographic_regions_region_id.61a868b6cb": [], "test.customer_360.unique_income_brackets_bracket_id.89ac3ae36f": [], "test.customer_360.not_null_income_brackets_bracket_id.e7289c2012": [], "test.customer_360.unique_age_cohorts_cohort_id.a482d4358e": [], "test.customer_360.not_null_age_cohorts_cohort_id.5b4cef4196": [], "test.customer_360.unique_occupation_categories_occupation_id.aedeeac927": [], "test.customer_360.not_null_occupation_categories_occupation_id.049967923f": [], "test.customer_360.unique_regulatory_requirements_requirement_id.d4821a03e1": [], "test.customer_360.not_null_regulatory_requirements_requirement_id.f3e4797840": [], "test.customer_360.unique_compliance_rules_rule_id.2aab33c92d": [], "test.customer_360.not_null_compliance_rules_rule_id.4e9144f6fe": [], "test.customer_360.unique_currency_codes_currency_code.8f52dad5ba": [], "test.customer_360.not_null_currency_codes_currency_code.d4e6f50f77": [], "test.customer_360.unique_country_risk_ratings_country_code.d44b893501": [], "test.customer_360.not_null_country_risk_ratings_country_code.0beb7c4165": [], "test.customer_360.unique_fee_structures_fee_id.e372dadd52": [], "test.customer_360.not_null_fee_structures_fee_id.24a91e8951": [], "test.customer_360.unique_interest_rate_tiers_tier_id.a9a4ae154b": [], "test.customer_360.not_null_interest_rate_tiers_tier_id.ba54cf404c": [], "test.customer_360.unique_marketing_segments_segment_id.2adf6d69dc": [], "test.customer_360.not_null_marketing_segments_segment_id.372e2c52f7": [], "test.customer_360.unique_lifecycle_stages_stage_id.9ba4ece453": [], "test.customer_360.not_null_lifecycle_stages_stage_id.1f2f4aa529": [], "test.customer_360.unique_service_level_agreements_sla_id.38ff5304c7": [], "test.customer_360.not_null_service_level_agreements_sla_id.cc1721d182": [], "test.customer_360.unique_holiday_calendars_holiday_id.a1383e3e34": [], "test.customer_360.not_null_holiday_calendars_holiday_id.852d7e9b65": [], "test.customer_360.unique_economic_indicators_indicator_id.154e0631da": [], "test.customer_360.not_null_economic_indicators_indicator_id.80b34f2a6a": [], "test.customer_360.unique_stg_customers_customer_id.c7614daada": [], "test.customer_360.not_null_stg_customers_customer_id.e2cfb1f9aa": [], "test.customer_360.unique_stg_customers_customer_number.1c7b8445eb": [], "test.customer_360.not_null_stg_customers_customer_number.db9a067778": [], "test.customer_360.not_null_stg_customers_first_name.57f99cf033": [], "test.customer_360.not_null_stg_customers_last_name.fa1ab1e186": [], "test.customer_360.not_null_stg_customers_email_address.4ac431a034": [], "test.customer_360.not_null_stg_customers_credit_score.1a2b785b97": [], "test.customer_360.unique_stg_customer_addresses_address_id.3dc38ac7e4": [], "test.customer_360.not_null_stg_customer_addresses_address_id.012a63311d": [], "test.customer_360.not_null_stg_customer_addresses_customer_id.08250e83d9": [], "test.customer_360.unique_stg_customer_phones_phone_id.799d1b6bc9": [], "test.customer_360.not_null_stg_customer_phones_phone_id.f20761ea7b": [], "test.customer_360.not_null_stg_customer_phones_customer_id.6e3e0955c1": [], "test.customer_360.unique_stg_accounts_account_id.cdf6252c79": [], "test.customer_360.not_null_stg_accounts_account_id.182dfbc108": [], "test.customer_360.not_null_stg_accounts_customer_id.0b54f014a3": [], "test.customer_360.not_null_stg_accounts_product_type.58694c1112": [], "test.customer_360.accepted_values_stg_accounts_account_status__ACTIVE__CLOSED__DORMANT__RESTRICTED.c71cafef9c": [], "test.customer_360.unique_stg_transactions_transaction_id.ee9a78a396": [], "test.customer_360.not_null_stg_transactions_transaction_id.1d00a8e2e4": [], "test.customer_360.not_null_stg_transactions_account_id.a7d212da1d": [], "test.customer_360.unique_stg_deposits_deposit_id.e141493b89": [], "test.customer_360.not_null_stg_deposits_deposit_id.b6122931ab": [], "test.customer_360.unique_stg_withdrawals_withdrawal_id.92674c3b97": [], "test.customer_360.not_null_stg_withdrawals_withdrawal_id.ffb18dca4f": [], "test.customer_360.unique_stg_transfers_transfer_id.f991b9cc9e": [], "test.customer_360.not_null_stg_transfers_transfer_id.622a15efdc": [], "test.customer_360.unique_stg_payments_payment_id.3744510712": [], "test.customer_360.not_null_stg_payments_payment_id.c19cc50075": [], "test.customer_360.unique_stg_fees_fee_id.81f1c62ec9": [], "test.customer_360.not_null_stg_fees_fee_id.a46960ff2f": [], "test.customer_360.unique_stg_interest_accruals_accrual_id.0501254279": [], "test.customer_360.not_null_stg_interest_accruals_accrual_id.0816e5042a": [], "test.customer_360.unique_stg_account_balances_balance_id.2ea52af5ab": [], "test.customer_360.not_null_stg_account_balances_balance_id.3f2784ad64": [], "test.customer_360.unique_stg_cards_card_id.f326b4cb4d": [], "test.customer_360.not_null_stg_cards_card_id.9f9047ca6a": [], "test.customer_360.unique_stg_loans_loan_id.be67636b63": [], "test.customer_360.not_null_stg_loans_loan_id.b77c69982c": [], "test.customer_360.unique_stg_credit_scores_score_id.559f99da3b": [], "test.customer_360.not_null_stg_credit_scores_score_id.422dc7f911": [], "test.customer_360.not_null_stg_credit_scores_credit_score.7796f78aa8": [], "test.customer_360.unique_stg_investments_holding_id.fc8fb05352": [], "test.customer_360.not_null_stg_investments_holding_id.9f33621334": [], "test.customer_360.unique_stg_insurance_policies_policy_id.3fb13c969f": [], "test.customer_360.not_null_stg_insurance_policies_policy_id.557b8b16a2": [], "test.customer_360.unique_stg_customer_interactions_interaction_id.0376adc910": [], "test.customer_360.not_null_stg_customer_interactions_interaction_id.06068526a4": [], "test.customer_360.unique_stg_marketing_campaigns_campaign_response_id.b987efe876": [], "test.customer_360.not_null_stg_marketing_campaigns_campaign_response_id.45766a5749": [], "test.customer_360.unique_stg_digital_activity_activity_id.6f0e8f4cc4": [], "test.customer_360.not_null_stg_digital_activity_activity_id.81e37ba655": [], "test.customer_360.unique_stg_channel_usage_usage_id.e3fbcbb409": [], "test.customer_360.not_null_stg_channel_usage_usage_id.37b9a2f3ad": [], "test.customer_360.unique_stg_product_usage_usage_id.8cfe23816f": [], "test.customer_360.not_null_stg_product_usage_usage_id.be0d138046": [], "test.customer_360.unique_stg_customer_segments_segment_id.5a59ccd216": [], "test.customer_360.not_null_stg_customer_segments_segment_id.fbfbf2d859": [], "test.customer_360.unique_stg_retention_events_event_id.245d36dcaa": [], "test.customer_360.not_null_stg_retention_events_event_id.038395d757": [], "test.customer_360.unique_stg_risk_assessments_assessment_id.301f1fb1b6": [], "test.customer_360.not_null_stg_risk_assessments_assessment_id.e8dcbe5ef6": [], "test.customer_360.unique_stg_kyc_records_kyc_id.1349285655": [], "test.customer_360.not_null_stg_kyc_records_kyc_id.93e1addfcf": [], "test.customer_360.unique_stg_compliance_records_compliance_id.c7420a7ff0": [], "test.customer_360.not_null_stg_compliance_records_compliance_id.3153c76fca": [], "test.customer_360.unique_stg_fraud_alerts_alert_id.e84886bf88": [], "test.customer_360.not_null_stg_fraud_alerts_alert_id.d3eab05de4": [], "test.customer_360.unique_stg_account_alerts_alert_id.8a82f61d9e": [], "test.customer_360.not_null_stg_account_alerts_alert_id.dc874d5de8": [], "test.customer_360.not_null_executive_customer_dashboard_dashboard_section.9e476ee539": [], "test.customer_360.accepted_values_executive_customer_dashboard_dashboard_section__EXECUTIVE_SUMMARY__SEGMENT_PERFORMANCE.64a13a820f": [], "test.customer_360.not_null_executive_customer_dashboard_total_customers.61c16a4ef0": [], "test.customer_360.accepted_values_executive_customer_dashboard_portfolio_health__STRONG_VALUE_MIX__BALANCED_PORTFOLIO__GROWTH_OPPORTUNITY.6820918840": [], "test.customer_360.accepted_values_executive_customer_dashboard_digital_maturity__DIGITAL_LEADER__DIGITAL_PROGRESSIVE__DIGITAL_OPPORTUNITY.adc26321fe": [], "test.customer_360.not_null_financial_performance_summary_total_customers.5a254908de": [], "test.customer_360.not_null_financial_performance_summary_total_aum.a3330056d7": [], "test.customer_360.accepted_values_financial_performance_summary_portfolio_yield_assessment__HIGH_YIELD_PORTFOLIO__STRONG_YIELD__MODERATE_YIELD__YIELD_IMPROVEMENT_NEEDED.9bf7a9d784": [], "test.customer_360.not_null_risk_management_dashboard_dashboard_section.e9949c930b": [], "test.customer_360.accepted_values_risk_management_dashboard_dashboard_section__RISK_OVERVIEW__WEALTH_TIER_RISK_BREAKDOWN.d4b443037b": [], "test.customer_360.not_null_risk_management_dashboard_total_customers.f0dae1992c": [], "test.customer_360.accepted_values_risk_management_dashboard_portfolio_risk_status__CRITICAL_RISK_PORTFOLIO__HIGH_RISK_CONCENTRATION__COMPLIANCE_ISSUES__RISK_DETERIORATION__MANAGED_RISK_PROFILE.12838d5721": [], "test.customer_360.accepted_values_risk_management_dashboard_compliance_health_status__COMPLIANCE_CRISIS__COMPLIANCE_ATTENTION_NEEDED__COMPLIANCE_MONITORING_REQUIRED__COMPLIANCE_HEALTHY.8c1932fcae": [], "test.customer_360.accepted_values_risk_management_dashboard_recommended_action__IMMEDIATE_RISK_COMMITTEE_MEETING__COMPLIANCE_REMEDIATION_PLAN__FRAUD_INVESTIGATION_SURGE__HIGH_VALUE_CUSTOMER_REVIEW__STANDARD_RISK_MONITORING.4b09296707": [], "test.customer_360.not_null_customer_segmentation_analysis_analysis_section.71c4545a0f": [], "test.customer_360.accepted_values_customer_segmentation_analysis_analysis_section__SEGMENT_OVERVIEW__LIFECYCLE_ANALYSIS.96a959b417": [], "test.customer_360.accepted_values_customer_segmentation_analysis_segment_strategic_importance__PRIMARY_VALUE_DRIVER__MAJOR_CONTRIBUTOR__SIGNIFICANT_SEGMENT__NICHE_SEGMENT__LIFECYCLE_STAGE.cd65ef5b62": [], "test.customer_360.accepted_values_customer_segmentation_analysis_marketing_effectiveness__HIGHLY_MARKETABLE__MODERATELY_MARKETABLE__SELECTIVE_MARKETING__MARKETING_CHALLENGE.df3216ee7b": [], "test.customer_360.accepted_values_customer_segmentation_analysis_digital_strategy_classification__DIGITAL_NATIVE__DIGITAL_ADOPTER__DIGITAL_OPPORTUNITY__TRADITIONAL_PREFERRED.39b4308baa": [], "test.customer_360.not_null_product_performance_analytics_analytics_section.196c586494": [], "test.customer_360.accepted_values_product_performance_analytics_analytics_section__PRODUCT_PORTFOLIO_OVERVIEW__SEGMENT_PRODUCT_PERFORMANCE__NEXT_BEST_PRODUCT_OPPORTUNITIES.e9807c2d7c": [], "test.customer_360.accepted_values_product_performance_analytics_cross_sell_performance_status__EXCELLENT_CROSS_SELL_PERFORMANCE__STRONG_CROSS_SELL_PERFORMANCE__MODERATE_CROSS_SELL_PERFORMANCE__CROSS_SELL_IMPROVEMENT_NEEDED__NEXT_BEST_PRODUCT.9ee7715bee": [], "test.customer_360.accepted_values_product_performance_analytics_digital_product_maturity__DIGITAL_PRODUCT_LEADER__DIGITAL_PROGRESSIVE__DIGITAL_DEVELOPING__DIGITAL_TRANSFORMATION_NEEDED.4af581acd7": [], "test.customer_360.accepted_values_product_performance_analytics_recommended_product_strategy__AGGRESSIVE_CROSS_SELL_CAMPAIGN__WEALTH_PRODUCT_FOCUS__DIGITAL_PRODUCT_ENHANCEMENT__PRODUCT_BUNDLING_STRATEGY__OPTIMIZE_CURRENT_PORTFOLIO.bf7cd9e1a6": [], "test.customer_360.not_null_int_customer_profile_customer_id.43eecb28af": [], "test.customer_360.unique_int_customer_profile_customer_id.e7331e83b5": [], "test.customer_360.not_null_int_customer_profile_full_name.6e928c57ff": [], "test.customer_360.accepted_values_int_customer_profile_engagement_level__HIGHLY_ENGAGED__MODERATELY_ENGAGED__LIGHTLY_ENGAGED__MINIMAL_ENGAGEMENT.300fcbc429": [], "test.customer_360.accepted_values_int_customer_profile_digital_preference__MOBILE_PREFERRED__WEB_PREFERRED__MULTI_CHANNEL__NON_DIGITAL.8e07d3a36f": [], "test.customer_360.not_null_int_customer_profile_at_risk_customer.cb82b9183d": [], "test.customer_360.not_null_int_customer_360_master_customer_id.2db315d47c": [], "test.customer_360.unique_int_customer_360_master_customer_id.1ef8c74659": [], "test.customer_360.not_null_int_customer_360_master_customer_lifetime_value_score.59abc397bb": [], "test.customer_360.not_null_int_customer_360_master_churn_risk_score.251e2a4d6d": [], "test.customer_360.accepted_values_int_customer_360_master_executive_customer_tier__ULTRA_HIGH_NET_WORTH__HIGH_NET_WORTH__PLATINUM_CUSTOMER__GOLD_CUSTOMER__SILVER_CUSTOMER__BRONZE_CUSTOMER.cd269b07a8": [], "test.customer_360.not_null_int_customer_360_master_next_best_action.7de42dfb1e": [], "test.customer_360.not_null_int_customer_retention_analytics_customer_id.8c8fd202ae": [], "test.customer_360.unique_int_customer_retention_analytics_customer_id.f62b41c0e0": [], "test.customer_360.not_null_int_customer_retention_analytics_churn_risk_score.ade9154dcd": [], "test.customer_360.not_null_int_customer_retention_analytics_retention_opportunity_score.87bbcb25cf": [], "test.customer_360.accepted_values_int_customer_retention_analytics_retention_lifecycle_stage__CHURNED__HIGH_CHURN_RISK__DISSATISFIED__DISENGAGED__COMPLAINT_PATTERN__SUCCESSFULLY_RETAINED__LOYAL__STABLE.bbc1e63adc": [], "test.customer_360.accepted_values_int_customer_retention_analytics_retention_priority__WIN_BACK__CRITICAL__HIGH__MEDIUM__LOW__MONITOR.0674658e8e": [], "test.customer_360.not_null_int_customer_financial_summary_customer_id.597254ced9": [], "test.customer_360.unique_int_customer_financial_summary_customer_id.c179ab9577": [], "test.customer_360.not_null_int_customer_financial_summary_total_relationship_value.1e3b9d217f": [], "test.customer_360.not_null_int_customer_financial_summary_net_worth_with_bank.8ff5a4bcf5": [], "test.customer_360.not_null_int_customer_financial_summary_product_penetration_score.e43c8b0969": [], "test.customer_360.accepted_values_int_customer_financial_summary_wealth_tier__PRIVATE_BANKING__WEALTH_MANAGEMENT__PREFERRED__SELECT__STANDARD.31846be754": [], "test.customer_360.accepted_values_int_customer_financial_summary_financial_risk_level__HIGH_RISK__MEDIUM_RISK__LOW_RISK.1e7cd9ab71": [], "test.customer_360.not_null_int_transaction_analytics_account_id.a6aa75c445": [], "test.customer_360.unique_int_transaction_analytics_account_id.e7fd42642d": [], "test.customer_360.not_null_int_transaction_analytics_total_transaction_volume.d69fd0b417": [], "test.customer_360.not_null_int_transaction_analytics_net_cash_flow.a46ebce986": [], "test.customer_360.not_null_int_transaction_analytics_digital_transaction_percentage.f7c36e9a33": [], "test.customer_360.accepted_values_int_transaction_analytics_activity_level__VERY_ACTIVE__ACTIVE__MODERATE__LIGHT__MINIMAL.608a7926e5": [], "test.customer_360.accepted_values_int_transaction_analytics_spending_category__HIGH_SPENDER__MEDIUM_SPENDER__MODERATE_SPENDER__LOW_SPENDER.da01838831": [], "test.customer_360.not_null_int_account_performance_dashboard_account_id.08b381f2c5": [], "test.customer_360.unique_int_account_performance_dashboard_account_id.989b83e73b": [], "test.customer_360.not_null_int_account_performance_dashboard_customer_id.60c125118b": [], "test.customer_360.not_null_int_account_performance_dashboard_account_profitability_score.37af99624c": [], "test.customer_360.not_null_int_account_performance_dashboard_account_health_score.e2fd76c341": [], "test.customer_360.accepted_values_int_account_performance_dashboard_account_risk_flag__IMMEDIATE_REVIEW_REQUIRED__ENHANCED_MONITORING__CUSTOMER_AT_RISK__DORMANT_ACCOUNT__NEGATIVE_BALANCE__NORMAL.2ec4526af6": [], "test.customer_360.accepted_values_int_account_performance_dashboard_account_service_tier__PRIVATE_BANKING__WEALTH_MANAGEMENT__PREMIUM__PREFERRED__ACTIVE__STANDARD.d4209fe3d4": [], "test.customer_360.not_null_int_comprehensive_risk_profile_customer_id.3fabbe3c3c": [], "test.customer_360.unique_int_comprehensive_risk_profile_customer_id.29fd957e69": [], "test.customer_360.not_null_int_comprehensive_risk_profile_composite_risk_score.fa558d26b5": [], "test.customer_360.accepted_values_int_comprehensive_risk_profile_overall_risk_level__CRITICAL_RISK__HIGH_RISK__ELEVATED_RISK__MODERATE_RISK__LOW_RISK.d1c7910b6f": [], "test.customer_360.accepted_values_int_comprehensive_risk_profile_compliance_status__NON_COMPLIANT__REVIEW_REQUIRED__COMPLIANT__PENDING_VERIFICATION.007f3a1488": [], "test.customer_360.not_null_int_comprehensive_risk_profile_requires_enhanced_monitoring.e084253125": [], "test.customer_360.not_null_int_comprehensive_risk_profile_requires_immediate_review.bedeea5a0d": [], "test.customer_360.accepted_values_int_comprehensive_risk_profile_risk_trend__VOLATILE__DETERIORATING__UNSTABLE__STABLE.96f61c242b": [], "test.customer_360.not_null_int_product_penetration_analysis_customer_id.5f30d340cd": [], "test.customer_360.unique_int_product_penetration_analysis_customer_id.b3f926ca57": [], "test.customer_360.not_null_int_product_penetration_analysis_product_penetration_score.c7f32f2beb": [], "test.customer_360.accepted_values_int_product_penetration_analysis_digital_adoption_level__DIGITAL_NATIVE__DIGITAL_ADOPTER__DIGITAL_BEGINNER__NON_DIGITAL.f2a4124904": [], "test.customer_360.accepted_values_int_product_penetration_analysis_marketing_responsiveness__UNTARGETED__HIGHLY_RESPONSIVE__MODERATELY_RESPONSIVE__LIGHTLY_RESPONSIVE__UNRESPONSIVE.63d13a1c1d": [], "test.customer_360.not_null_int_product_penetration_analysis_cross_sell_opportunity_score.dfd228e7c3": [], "test.customer_360.not_null_int_product_penetration_analysis_product_stickiness_score.b257e1760b": [], "test.customer_360.not_null_int_channel_effectiveness_customer_id.1e4914581a": [], "test.customer_360.unique_int_channel_effectiveness_customer_id.a362e2963f": [], "test.customer_360.not_null_int_channel_effectiveness_digital_adoption_score.017c75b92b": [], "test.customer_360.not_null_int_channel_effectiveness_channel_diversity_score.79c0c44702": [], "test.customer_360.accepted_values_int_channel_effectiveness_channel_preference__DIGITAL_ONLY__DIGITAL_FIRST__DIGITAL_PREFERRED__PHYSICAL_PREFERRED__OMNI_CHANNEL__PHYSICAL_ONLY__MINIMAL_USAGE.b01950ca6b": [], "test.customer_360.accepted_values_int_channel_effectiveness_channel_engagement_level__VERY_HIGH__HIGH__MEDIUM__LOW__MINIMAL__NONE.80e3c7469c": [], "test.customer_360.accepted_values_int_channel_effectiveness_digital_session_quality__HIGH_QUALITY__MEDIUM_QUALITY__LOW_QUALITY__BRIEF_SESSIONS__NO_SESSIONS.ff91ca2327": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}